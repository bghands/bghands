{"0": {
    "doc": "JekyllConf",
    "title": "Featured",
    "content": "Jekyll Codex - Jekyll for front-end developers - Joost van der Schee . ",
    "url": "/jekyllconf/#featured",
    "relUrl": "/jekyllconf/#featured"
  },"1": {
    "doc": "JekyllConf",
    "title": "2019",
    "content": ". | Jekyll As An API Endpoint - Pieter Roozen . | Why I love Jekyll Data Files - Chen Hui Jing . | The Lean Web - Chris Ferdinandi . | Jekyll For City Government - Catherine Roebuck . | Jekyll Codex - Jekyll for front-end developers - Joost van der Schee . | Leverage AWS S3 And CloudFront To Deploy Blazing Fast Jekyll Sites - Matthew Loberg . | Structuring Jekyll Sites For Enterprise Design Systems - George Phillips . | . ",
    "url": "/jekyllconf/#2019",
    "relUrl": "/jekyllconf/#2019"
  },"2": {
    "doc": "JekyllConf",
    "title": "2016",
    "content": ". | Elasticsearch for Jekyll - Allison Zadrozny . | Jekyll for Technical Documentation - Amy Johnston . | Real World Content Strategy with Jekyll - Bud Parr . | Building client-editable Jekyll sites - George Phillips . | Using Jekyll for Rapid CSS Testing - Ire Aderinokun . | Stack Overflow on Jekyll - Jon Chan . | Jekyll on AWS - Julio Faerman . | Unconventional use cases for Jekyll - Katy DeCorah . | Doing a lot with a little - David Darnes . | Designing fast websites with Jekyll - Ronan Berder . | Continuous deployment of Jekyll sites powered by Docker - David Von Lehman . | Building our agency site with Jekyll - David Jones . | Jekyll For Every Case - Scott Hewitt . | Algolia search on Jekyll sites - Tim Carry . | Building a living brand guide with Jekyll and Hologram - Nils Borchers . | Learning resources for the Jekyll community - Mike Neumegen . | Responsive srcset images with imgix - Oliver Pattison . | Jekyll, Your Website’s Baseplate - Michael Lee . | Deploy Jekyll Like A Boss - Paul Webb . | Overcoming challenges in using Jekyll for documentation projects - Tom Johnson . | . ",
    "url": "/jekyllconf/#2016",
    "relUrl": "/jekyllconf/#2016"
  },"3": {
    "doc": "JekyllConf",
    "title": "2015",
    "content": ". | GitHub Pages behind the scenes - Ben Balter . | What the heck is Octopress and why should I care? - Brandon Mathis . | Comparing Jekyll with the Competition - Brian Rinaldi . | Meet the Obama Campaign’s $250 Million Fundraising Platform - Kyle Rush . | Building Living Style Guides with Jekyll - Michael Jovel . | A CMS for Jekyll - Mike Neumegen . | Jekyll 3 and Beyond - Parker Moore . | Some crazy ideas I have for the future of static sites - Tom Preston-Werner . | . ",
    "url": "/jekyllconf/#2015",
    "relUrl": "/jekyllconf/#2015"
  },"4": {
    "doc": "JekyllConf",
    "title": "JekyllConf",
    "content": "JekyllConf is a free, online conference for all things Jekyll hosted by CloudCannon. Each year members of the Jekyll community speak about interesting use cases, tricks they’ve learned, or meta Jekyll topics. ",
    "url": "/jekyllconf/",
    "relUrl": "/jekyllconf/"
  },"5": {
    "doc": "Things",
    "title": "\n    上帝之手 发表\n  ",
    "content": "release 13 Sep 2022 bghand 上帝之手（bghands）在2022年9月发声，此处开始为记录事件，提供信息辅助服务，为提高人们生活质量而生。 . ",
    "url": "/things/",
    "relUrl": "/things/"
  },"6": {
    "doc": "Things",
    "title": "website",
    "content": "网站 bghands.github.io 2022年 Jun . Previous Page: of Next ",
    "url": "/things/#website",
    "relUrl": "/things/#website"
  },"7": {
    "doc": "Things",
    "title": "Things",
    "content": " ",
    "url": "/things/",
    "relUrl": "/things/"
  },"8": {
    "doc": "Philosophy",
    "title": "1. No Magic",
    "content": "Jekyll is not magic. A user should be able to understand the underlying processes that make up the Jekyll build without much reading. It should do only what you ask it to and nothing more. When a user takes a certain action, the outcome should be easily understandable and focused. ",
    "url": "/philosophy/#1-no-magic",
    "relUrl": "/philosophy/#1-no-magic"
  },"9": {
    "doc": "Philosophy",
    "title": "2. It “Just Works”",
    "content": "The out-of-the-box experience should be that it “just works.” Run gem install jekyll and it should build any Jekyll site that it’s given. Features like auto-regeneration and settings like the markdown renderer should represent sane defaults that work perfectly for the vast majority of cases. The burden of initial configuration should not be placed on the user. ",
    "url": "/philosophy/#2-it-just-works",
    "relUrl": "/philosophy/#2-it-just-works"
  },"10": {
    "doc": "Philosophy",
    "title": "3. Content is King",
    "content": "Why is Jekyll so loved by content creators? It focuses on content first and foremost, making the process of publishing content on the Web easy. Users should find the management of their content enjoyable and simple. ",
    "url": "/philosophy/#3-content-is-king",
    "relUrl": "/philosophy/#3-content-is-king"
  },"11": {
    "doc": "Philosophy",
    "title": "4. Stability",
    "content": "If a user’s site builds today, it should build tomorrow. Backwards-compatibility should be strongly preferred over breaking changes. Breaking changes should be made to support a strong practical goal, and breaking changes should never be made to drive forward “purity” of the codebase, or other changes purely to make the maintainers’ lives easier. Breaking changes provide a significant amount of friction between upgrades and reduce the confidence of users in this software, and should thus be avoided unless absolutely necessary. Upon breaking changes, provide a clear path for users to upgrade. ",
    "url": "/philosophy/#4-stability",
    "relUrl": "/philosophy/#4-stability"
  },"12": {
    "doc": "Philosophy",
    "title": "5. Small &amp; Extensible",
    "content": "The core of Jekyll should be simple and small, and extensibility should be a first-class feature to provide added functionality from community contributors. The core should be kept to features used by at least 90% of users–everything else should be provided as a plugin. New features should be shipped as plugins and focus should be put on creating extensible core API’s to support rich plugins. ",
    "url": "/philosophy/#5-small--extensible",
    "relUrl": "/philosophy/#5-small--extensible"
  },"13": {
    "doc": "Philosophy",
    "title": "Philosophy",
    "content": "Jekyll offers a unique philosophy when approaching the problem of static site generation. This core philosophy drives development and product decisions. When a contributor, maintainer, or user asks herself what Jekyll is about, the following principles should come to mind: . ",
    "url": "/philosophy/",
    "relUrl": "/philosophy/"
  },"14": {
    "doc": "Releases",
    "title": "\n    上帝之手 发表\n  ",
    "content": "release 13 Sep 2022 bghand 上帝之手（bghands）在2022年9月发声，此处开始为记录事件，提供信息辅助服务，为提高人们生活质量而生。 . ",
    "url": "/things/releases/",
    "relUrl": "/things/releases/"
  },"15": {
    "doc": "Releases",
    "title": "website",
    "content": "网站 bghands.github.io 2022年 Jun . ",
    "url": "/things/releases/#website",
    "relUrl": "/things/releases/#website"
  },"16": {
    "doc": "Releases",
    "title": "Releases",
    "content": " ",
    "url": "/things/releases/",
    "relUrl": "/things/releases/"
  },"17": {
    "doc": "Resources",
    "title": "Themes",
    "content": ". | GitHub.com #jekyll-theme repos | jamstackthemes.dev | jekyllthemes.org | jekyllthemes.io | . See also: docs/themes. ",
    "url": "/resources/#themes",
    "relUrl": "/resources/#themes"
  },"18": {
    "doc": "Resources",
    "title": "Plugins",
    "content": ". | jekyll-plugin topic on GitHub | Planet Jekyll | . ",
    "url": "/resources/#plugins",
    "relUrl": "/resources/#plugins"
  },"19": {
    "doc": "Resources",
    "title": "Guides",
    "content": ". | Community tutorials | Deploy Jekyll 4 on GitHub Pages | Deploy Jekyll on Vercel | Deploy Jekyll 4 on Netlify | CloudCannon Academy is a set of resources created by CloudCannon to help folks get up and running with Jekyll. They cover all skill levels, and even include some great video tutorials. | Jekyll Cheatsheet is a single-page resource for Jekyll filters, variables, and the like. | . ",
    "url": "/resources/#guides",
    "relUrl": "/resources/#guides"
  },"20": {
    "doc": "Resources",
    "title": "Integrations",
    "content": "Use a SaaS service as a backend for functionality on your Jekyll site . ",
    "url": "/resources/#integrations",
    "relUrl": "/resources/#integrations"
  },"21": {
    "doc": "Resources",
    "title": "Comments",
    "content": ". | Staticman: Add user-generated content to a Jekyll site (free and open source) | Talkyard: Embedded comments for Jekyll and others (free and open source, or hosted serverless) | . ",
    "url": "/resources/#comments",
    "relUrl": "/resources/#comments"
  },"22": {
    "doc": "Resources",
    "title": "Content Management",
    "content": ". | CloudCannon: The Cloud CMS for Jekyll | Contentful: Content infrastructure for digital teams | Forestry.io: A free Git-based responsive CMS, with content modeling and instant previews. | Netlify CMS: Open source content management for your Git workflow | Siteleaf: Built for developers, Loved by everyone | Kentico Kontent: A headless CMS with full control over content presentation | . ",
    "url": "/resources/#content-management",
    "relUrl": "/resources/#content-management"
  },"23": {
    "doc": "Resources",
    "title": "E-commerce",
    "content": ". | MemberSpace: Add memberships and paywall functionality to a Jekyll site | Snipcart: Add a shopping cart to a Jekyll site | . ",
    "url": "/resources/#e-commerce",
    "relUrl": "/resources/#e-commerce"
  },"24": {
    "doc": "Resources",
    "title": "Forms",
    "content": ". | Arengu | Getform | 99Inbound | Formcake | Formcarry | Formingo | FormKeep | Formspark | Formspree (open source) | formX | Simple Form | SmartForms | Typeform | . ",
    "url": "/resources/#forms",
    "relUrl": "/resources/#forms"
  },"25": {
    "doc": "Resources",
    "title": "Search",
    "content": ". | Algolia: Add a powerful instant search to your Jekyll site | Elastic Site Search: Another option for adding search to your Jekyll site, built on Elasticsearch | Bonsai Search: The easiest way to use Elasticsearch for your Jekyll site | CloudSh: Website search with a few lines of JavaScript | . ",
    "url": "/resources/#search",
    "relUrl": "/resources/#search"
  },"26": {
    "doc": "Resources",
    "title": "Editors plugins",
    "content": ". | Visual Studio Code has various jekyll related plugins and supports autocompletion for configuration file. | jekyll-atom: A collection of snippets and tools for Jekyll in Atom | markdown-writer: An Atom package for Jekyll. It can create new posts/drafts, manage tags/categories, insert link/images and add many useful key mappings. | sublime-jekyll: A Sublime Text package for Jekyll static sites. This package should help creating Jekyll sites and posts easier by providing access to key template tags and filters, as well as common completions and a current date/datetime command (for dating posts). You can install this package manually via GitHub, or via Package Control. | vim-jekyll: A vim plugin to generate new posts and run jekyll build all without leaving vim. | WordPress2Jekyll: A WordPress plugin that allows you to use WordPress as your editor and (automatically) export content in to Jekyll. WordPress2Jekyll attempts to marry these two systems together in order to make a site that can be easily managed from all devices. | . ",
    "url": "/resources/#editors-plugins",
    "relUrl": "/resources/#editors-plugins"
  },"27": {
    "doc": "Resources",
    "title": "Posts",
    "content": ". | How I’m using Jekyll in 2016 | Talkyard comments instructions for Jekyll | Static Comments with Jekyll &amp; Staticman | Adding Ajax pagination to Jekyll | ‘About this Website’, by Carter Allen . “Jekyll is everything that I ever wanted in a blogging engine. Really. It isn’t perfect, but what’s excellent about it is that if there’s something wrong, I know exactly how it works and how to fix it. It runs on the your machine only, and is essentially an added”build” step between you and the browser. I coded this entire site in TextMate using standard HTML5 and CSS3, and then at the end I added just a few little variables to the markup. Presto-chango, my site is built and I am at peace with the world.” . | A way to extend Jekyll without forking and modifying the Jekyll gem codebase and some portable Jekyll extensions that can be reused and shared. | Using your Rails layouts in Jekyll | . ",
    "url": "/resources/#posts",
    "relUrl": "/resources/#posts"
  },"28": {
    "doc": "Resources",
    "title": "Forks",
    "content": ". | Time to Visit Bridgetown | Creating a Faster Jekyll | . ",
    "url": "/resources/#forks",
    "relUrl": "/resources/#forks"
  },"29": {
    "doc": "Resources",
    "title": "Resources",
    "content": "Jekyll’s growing community produces wide variety of themes, plugins, tutorials and other resources that can be helpful. Below is a collection of links to some of the most popular Jekyll resources. ",
    "url": "/resources/",
    "relUrl": "/resources/"
  },"30": {
    "doc": "Showcase",
    "title": "Showcase",
    "content": "Jekyll powers many company websites, here a few nice ones: . | Ruby on Rails | Sketch | Spotify for Developers | frame.ai | Release Management Blog | Yeoman | Twitch Developer Documentation | Netflix Devices | UN World Statistics | TwitchCon | GitHub On Demand Training | Paris Call for Trust and Security in Cyberspace | French Government Digital Services | Isomer - Singapore Government Static Websites | Development Seed | 18F | IBM MobileFirst Foundation | Chain | CSS Reference | HTML Reference | Digital Democracy | MailTape | Lattice | Matt Grey | Probot | The Markdown Guide | Rehan Butt | Grantmaker Search | U.S. Web Design Standards | plainlanguage.gov | Login.gov | Sydney New Years Eve | italia.it | Lightburn | We are COLLINS | Passbolt Help | Art & About Sydney | Freedom of Information Act | Auth0 Blog | Mapwize | Bitcoin | Vidgrid | MvvmCross | KOTN | Vesterheim Norwegian-American Museum | CloudCannon | SiteLeaf | Tom Preston Werner Blog | | . ",
    "url": "/showcase/",
    "relUrl": "/showcase/"
  },"31": {
    "doc": "The Jekyll Team",
    "title": "Core Team",
    "content": "The Jekyll Core Team’s responsibility is to ensure the development and community around the Jekyll ecosystem thrive. | Ashwin (@ashmaroli) | Matt (@mattr-) | . ",
    "url": "/team/#core-team",
    "relUrl": "/team/#core-team"
  },"32": {
    "doc": "The Jekyll Team",
    "title": "Security Team",
    "content": "The Jekyll Security Team’s responsibility is to triage, validate, and patch security vulnerabilities reported to them. | Parker (@parkr) | Ashwin (@ashmaroli) | Matt (@mattr-) | . ",
    "url": "/team/#security-team",
    "relUrl": "/team/#security-team"
  },"33": {
    "doc": "The Jekyll Team",
    "title": "Emeritus Core Team Members",
    "content": "Emeritus Core Team Members were once members of Jekyll’s Core Team. | Alfred (@alfredxing) | Frank (@DirtyF) | Nick (@qrush) | Parker (@parkr) | Tom (@mojombo) | . ",
    "url": "/team/#emeritus-core-team-members",
    "relUrl": "/team/#emeritus-core-team-members"
  },"34": {
    "doc": "The Jekyll Team",
    "title": "The Jekyll Team",
    "content": " ",
    "url": "/team/",
    "relUrl": "/team/"
  },"35": {
    "doc": "上帝之手 发表",
    "title": "website",
    "content": "网站 bghands.github.io 2022年 Jun . ",
    "url": "/things/2022/09/13/bghand-statement/#website",
    "relUrl": "/things/2022/09/13/bghand-statement/#website"
  },"36": {
    "doc": "上帝之手 发表",
    "title": "上帝之手 发表",
    "content": "上帝之手（bghands）在2022年9月发声，此处开始为记录事件，提供信息辅助服务，为提高人们生活质量而生。 . ",
    "url": "/things/2022/09/13/bghand-statement/",
    "relUrl": "/things/2022/09/13/bghand-statement/"
  },"37": {
    "doc": "Navigation",
    "title": "Scenario 1: Basic List",
    "content": "You want to return a basic list of pages. YAML . docs_list_title: ACME Documentation docs: - title: Introduction url: introduction.html - title: Configuration url: configuration.html - title: Deployment url: deployment.html . Liquid . &lt;h2&gt;{{ site.data.samplelist.docs_list_title }}&lt;/h2&gt; &lt;ul&gt; {% for item in site.data.samplelist.docs %} &lt;li&gt;&lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; . Result . ",
    "url": "/tutorials/navigation/#scenario-1-basic-list",
    "relUrl": "/tutorials/navigation/#scenario-1-basic-list"
  },"38": {
    "doc": "Navigation",
    "title": "ACME Documentation",
    "content": ". | Introduction | Configuration | Deployment | . For the results in these fictitious samples, # is manually substituted for the actual link value (to avoid 404 errors.) . When you use a for loop, you choose how you want to refer to the items you’re looping through. The variable you choose (in this case, item) becomes how you access the properties of each item in the list. Dot notation is used to get a property of the item (for example, item.url). The YAML content has two main types of formats that are relevant here: . | mapping | list | . docs_list_title: ACME Documentation is a mapping. You access the value with site.data.samplelist.docs_list_title. docs: is a list. The list begins each item with a hyphen. Unlike with mappings, you usually don’t access list properties directly as you do with mappings. If you want to access a specific item in the list, you must identify the position in the list you want, following typical array notation. For example, site.data.samplelist.docs[0] would access the first item in the list. However, this is rarely done. With lists, you usually use for loops to cycle through the list of items and do something with each item. With navigation menus, you usually insert each list item into li tags based on the navigation structure you’re using in your HTML theme. Each hyphen (-) indicates another item in the list. This example just has two properties with each list item: title and url. You can include as many properties as you want for each item. The order of properties at each position in the list doesn’t matter. ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"39": {
    "doc": "Navigation",
    "title": "Scenario 2: Sorted list",
    "content": "Suppose you wanted to sort the list by the title. To do this, convert the reference to the docs collection to a variable, and then apply Liquid’s sort filter to the variable: . Liquid . {% assign doclist = site.data.samplelist.docs | sort: 'title' %} &lt;ol&gt; {% for item in doclist %} &lt;li&gt;&lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ol&gt; . Result . | Configuration | Deployment | Introduction | . The items now appear in alphabetical order. The sort property in the Liquid filter applies to the title, which is an actual property in the list. If title weren’t a property, we would need to sort by another property. See the Liquid array filter for more filter options. Note that you can’t simply use this syntax: . {% for item in site.data.samplelist.docs | sort: \"title\" %}{% endfor %} . You have to convert site.data.samplelist.docs to a variable first using either assign or capture tags. ",
    "url": "/tutorials/navigation/#scenario-2-sorted-list",
    "relUrl": "/tutorials/navigation/#scenario-2-sorted-list"
  },"40": {
    "doc": "Navigation",
    "title": "Scenario 3: Two-level navigation list",
    "content": "Suppose you want a more robust list that incorporates multiple sections of heading titles and subitems. To do this, add an additional level to each list item to store this information: . YAML . toc: - title: Group 1 subfolderitems: - page: Thing 1 url: /thing1.html - page: Thing 2 url: /thing2.html - page: Thing 3 url: /thing3.html - title: Group 2 subfolderitems: - page: Piece 1 url: /piece1.html - page: Piece 2 url: /piece2.html - page: Piece 3 url: /piece3.html - title: Group 3 subfolderitems: - page: Widget 1 url: /widget1.html - page: Widget 2 url: /widget2.html - page: Widget 3 url: /widget3.html . Liquid . {% for item in site.data.samplelist.toc %} &lt;h3&gt;{{ item.title }}&lt;/h3&gt; &lt;ul&gt; {% for entry in item.subfolderitems %} &lt;li&gt;&lt;a href=\"{{ entry.url }}\"&gt;{{ entry.page }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; {% endfor %} . Result . ",
    "url": "/tutorials/navigation/#scenario-3-two-level-navigation-list",
    "relUrl": "/tutorials/navigation/#scenario-3-two-level-navigation-list"
  },"41": {
    "doc": "Navigation",
    "title": "Group 1",
    "content": ". | Thing 1 | Thing 2 | Thing 3 | . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"42": {
    "doc": "Navigation",
    "title": "Group 2",
    "content": ". | Piece 1 | Piece 2 | Piece 3 | . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"43": {
    "doc": "Navigation",
    "title": "Group 3",
    "content": ". | Widget 1 | Widget 2 | Widget 3 | . In this example, Group 1 is the first list item. Within that list item, its subpages are included as a property that itself contains a list (subfolderitems). The Liquid code looks through the first level with for item in site.data.samplelist.toc, and then looks through the second-level property with for entry in item.subfolderitems. Just as item is an arbitrary name for the items we’re looping through, so is entry. ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"44": {
    "doc": "Navigation",
    "title": "Scenario 4: Three-level navigation list",
    "content": "Building on the previous section, let’s add one more level of depth (subsubfolderitems) to the list. The formatting will get more complex here, but the principles are the same. YAML . toc2: - title: Group 1 subfolderitems: - page: Thing 1 url: /thing1.html - page: Thing 2 url: /thing2.html subsubfolderitems: - page: Subthing 1 url: /subthing1.html - page: Subthing 2 url: /subthing2.html - page: Thing 3 url: /thing3.html - title: Group 2 subfolderitems: - page: Piece 1 url: /piece1.html - page: Piece 2 url: /piece2.html - page: Piece 3 url: /piece3.html subsubfolderitems: - page: Subpiece 1 url: /subpiece1.html - page: Subpiece2 url: /subpiece2.html - title: Group 3 subfolderitems: - page: Widget 1 url: /widget1.html subsubfolderitems: - page: Subwidget 1 url: /subwidget1.html - page: Subwidget 2 url: /subwidget2.html - page: Widget 2 url: /widget2.html - page: Widget 3 url: /widget3.html . Liquid . &lt;div&gt; {% if site.data.samplelist.toc2[0] %} {% for item in site.data.samplelist.toc2 %} &lt;h3&gt;{{ item.title }}&lt;/h3&gt; {% if item.subfolderitems[0] %} &lt;ul&gt; {% for entry in item.subfolderitems %} &lt;li&gt;&lt;a href=\"{{ entry.url }}\"&gt;{{ entry.page }}&lt;/a&gt; {% if entry.subsubfolderitems[0] %} &lt;ul&gt; {% for subentry in entry.subsubfolderitems %} &lt;li&gt;&lt;a href=\"{{ subentry.url }}\"&gt;{{ subentry.page }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; {% endif %} &lt;/li&gt; {% endfor %} &lt;/ul&gt; {% endif %} {% endfor %} {% endif %} &lt;/div&gt; . Result . ",
    "url": "/tutorials/navigation/#scenario-4-three-level-navigation-list",
    "relUrl": "/tutorials/navigation/#scenario-4-three-level-navigation-list"
  },"45": {
    "doc": "Navigation",
    "title": "Group 1",
    "content": ". | Thing 1 | Thing 2 | . | Subthing 1 | Subthing 2 | . | Thing 3 | . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"46": {
    "doc": "Navigation",
    "title": "Group 2",
    "content": ". | Piece 1 | Piece 2 | Piece 3 | . | Subpiece 1 | Subpiece2 | . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"47": {
    "doc": "Navigation",
    "title": "Group 3",
    "content": ". | Widget 1 | . | Subwidget 1 | Subwidget 2 | . | Widget 2 | Widget 3 | . In this example, if site.data.samplelist.toc2[0] is used to ensure that the YAML level actually contains items. If there isn’t anything at the [0] position, we can skip looking in this level. ProTip: Line up for loops and if statements . To keep the code clear, line up the beginning and ending Liquid tags, such as the for loops and if statements. This way you know when the open tags have been closed. If the code will appear in a Markdown page, keep the opening and closing HTML tags flush against the left edge so that the Markdown filter won't treat the content as a code sample. If necessary, you can wrap the entire code sample in a div tag to ensure the code has HTML tags that bookend the code. ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"48": {
    "doc": "Navigation",
    "title": "Scenario 5: Using a page variable to select the YAML list",
    "content": "Suppose your sidebar will differ based on various documentation sets. You might have 3 different products on your site, and so you want 3 different sidebars — each unique for that product. You can store the name of the sidebar list in your page front matter and then pass that value into the list dynamically. Page front matter . --- title: My page sidebar: toc --- . Liquid . &lt;ul&gt; {% for item in site.data.samplelist[page.sidebar] %} &lt;li&gt;&lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; . Result . | Introduction | Configuration | Deployment | . In this scenario, we want to pass values from the page’s front matter into a for loop that contains a variable. When the assigned variable isn’t a string but rather a data reference, you must use brackets (instead of curly braces) to refer to the front matter’s value. For more information, see Expressions and Variables in Liquid’s documentation. Brackets are used in places where dot notation can’t be used. You can also read more details in this Stack Overflow answer. ",
    "url": "/tutorials/navigation/#scenario-5-using-a-page-variable-to-select-the-yaml-list",
    "relUrl": "/tutorials/navigation/#scenario-5-using-a-page-variable-to-select-the-yaml-list"
  },"49": {
    "doc": "Navigation",
    "title": "Scenario 6: Applying the active class for the current page",
    "content": "In addition to inserting items from the YAML data file into your list, you also usually want to highlight the current link if the user is viewing that page. You do this by inserting an active class for items that match the current page URL. CSS .result li.active a { color: lightgray; cursor: default; } . Liquid . {% for item in site.data.samplelist.docs %} &lt;li class=\"{% if item.url == page.url %}active{% endif %}\"&gt; &lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt; &lt;/li&gt; {% endfor %} . Result . | Introduction | Configuration | Deployment | . In this case, assume Deployment is the current page. To make sure the item.url (stored in the YAML file) matches the page.url, it can be helpful to print the {{ page.url }} to the page. ",
    "url": "/tutorials/navigation/#scenario-6-applying-the-active-class-for-the-current-page",
    "relUrl": "/tutorials/navigation/#scenario-6-applying-the-active-class-for-the-current-page"
  },"50": {
    "doc": "Navigation",
    "title": "Scenario 7: Including items conditionally",
    "content": "You might want to include items conditionally in your list. For example, maybe you have multiple site outputs and only want to include the sidebar item for certain outputs. You can add properties in each list item and then use those properties to conditionally include the content. YAML . docs2_list_title: ACME Documentation docs2: - title: Introduction url: introduction.html version: 1 - title: Configuration url: configuration.html version: 1 - title: Deployment url: deployment.html version: 2 . Liquid . &lt;ul&gt; {% for item in site.data.samplelist.docs2 %} {% if item.version == 1 %} &lt;li&gt;&lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt; {% endif %} {% endfor %} &lt;/ul&gt; . Result . | Introduction | Configuration | . The Deployment page is excluded because its version is 2. ",
    "url": "/tutorials/navigation/#scenario-7-including-items-conditionally",
    "relUrl": "/tutorials/navigation/#scenario-7-including-items-conditionally"
  },"51": {
    "doc": "Navigation",
    "title": "Scenario 8: Retrieving items based on front matter properties",
    "content": "If you don’t want to store your navigation items in a YAML file in your _data folder, you can use for loops to look through the front matter of each page or collection and get the content based on properties in the front matter. In this scenario, suppose we have a collection called _docs. Collections are often better than pages because they allow you to narrow the list of what you’re looping through. (Try to avoid scenarios where you loop through large numbers of items, since it will increase your build time. Collections help you narrow the scope.) . In our scenario, there are 6 docs in the docs collection: Sample 1, Sample 2, Topic 1, Topic 2, Widget 1, and Widget 2. Each doc in the collection contains at least 3 properties in the front matter: . | title | category | order | . The front matter for each page is as follows (consolidated here for brevity): . --- Title: Sample 1 category: getting-started order: 1 --- --- Title: Sample 2 category: getting-started order: 2 --- --- Title: Topic 1 category: configuration order: 1 --- --- Title: Topic 2 category: configuration order: 2 --- --- Title: Widget 1 category: deployment order: 1 --- --- Title: Widget 2 category: deployment order: 2 --- . Note that even though category is used in the doc front matter, category is not a built-in variable like it is with posts. In other words, you cannot look directly inside category with site.docs.category. If you wanted to simply get all docs in the collection for a specific category, you could use a for loop with an if condition to check for a specific category: . &lt;h3&gt;Getting Started&lt;/h3&gt; &lt;ul&gt; {% for doc in site.docs %} {% if doc.category == \"getting-started\" %} &lt;li&gt;&lt;a href=\"{{ doc.url }}\"&gt;{{ doc.title }}&lt;/a&gt;&lt;/li&gt; {% endif %} {% endfor %} &lt;/ul&gt; . The result would be as follows: . ",
    "url": "/tutorials/navigation/#scenario-8-retrieving-items-based-on-front-matter-properties",
    "relUrl": "/tutorials/navigation/#scenario-8-retrieving-items-based-on-front-matter-properties"
  },"52": {
    "doc": "Navigation",
    "title": "Getting Started",
    "content": ". | Sample1 | Sample2 | . This might be useful if you’re setting up a knowledge base and have dozens of topics in each category, with each category displaying on its own page. But let’s say you want to sort the items by category and group them under the category name, without hard-coding the category names. To achieve this, you could use two filters: . | group_by | sort | . Here’s the code for getting lists of pages grouped under their corresponding category headers: . Liquid . {% assign mydocs = site.docs | group_by: 'category' %} {% for cat in mydocs %} &lt;h2&gt;{{ cat.name | capitalize }}&lt;/h2&gt; &lt;ul&gt; {% assign items = cat.items | sort: 'order' %} {% for item in items %} &lt;li&gt;&lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; {% endfor %} . Result . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"53": {
    "doc": "Navigation",
    "title": "Getting-started",
    "content": ". | Sample2 | Sample1 | . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"54": {
    "doc": "Navigation",
    "title": "Configuration",
    "content": ". | Topic2 | Topic1 | . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"55": {
    "doc": "Navigation",
    "title": "Deployment",
    "content": ". | Widget2 | Widget1 | . Let’s walk through the code. First, we assign a variable (mydocs) to the collection content (site.docs). The group_by filter groups the collection content by category. More specifically, the group_by filter converts mydocs into an array with name, items, and size properties, somewhat like this: . [ {\"name\": \"getting-started\", \"items\": [Sample 1, Sample 2],\"size\": 2}, {\"name\": \"configuration\", \"items\": [Topic 1, Topic 2], \"size\": 2}, {\"name\": \"deployment\", \"items\": [Widget 1, Widget 2], \"size\": 2} ] . Using for cat in mydocs, we look through each item in the mydocs array and print the category name. After getting the category name, we assign the variable items for the docs and use the sort filter to arrange the docs by their order property. The dot notation cat.items is used because we’re accessing the content in the items array. The sort filter orders the items by their numbers in ascending order. The for item in items loop looks through each item and gets the title and url to form the list item link. For more details on the group_by filter, see Jekyll’s Templates documentation as well as this Siteleaf tutorial. For more details on the sort filter, see sort in Liquid’s documentation. Whether you use properties in your doc’s front matter to retrieve your pages or a YAML data file, in both cases you can programmatically build a more robust navigation for your site. ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"56": {
    "doc": "Navigation",
    "title": "Scenario 9: Nested tree navigation with recursion",
    "content": "Suppose you want a nested tree navigation of any depth. We can achieve this by recursively looping through our tree of navigation links. YAML . nav: - title: Deployment url: deployment.html subnav: - title: Heroku url: heroku.html subnav: - title: Jekyll on Heroku url: jekyll-on-heroku.html - title: Help url: help.html . Liquid . First, we’ll create an include that we can use for rendering the navigation tree. This file would be _includes/nav.html . &lt;ul&gt; {% for item in include.nav %} &lt;li&gt;&lt;a href=\"{{ item.url }}\"&gt;{{ item.title }}&lt;/a&gt;&lt;/li&gt; {% if item.subnav %} {% include nav.html nav=item.subnav %} {% endif %} {% endfor %} &lt;/ul&gt; . To render this in your layout or pages, you would simply include the template and pass in the nav parameter. In this case, we’ll use the page.nav to grab it from the yaml frontmatter. {% include nav.html nav=page.nav %} . Our include will use this first, then look through each item for a subnav property to recursively render the nested lists. Result . | Deployment | . | Heroku | . | Jekyll On Heroku | . | Help | . ",
    "url": "/tutorials/navigation/#scenario-9-nested-tree-navigation-with-recursion",
    "relUrl": "/tutorials/navigation/#scenario-9-nested-tree-navigation-with-recursion"
  },"57": {
    "doc": "Navigation",
    "title": "Navigation",
    "content": "If your Jekyll site has a lot of pages, you might want to create navigation for the pages. Instead of hard-coding navigation links, you can programmatically retrieve a list of pages to build the navigation for your site. Although there’s already information about interacting with data files in other Jekyll docs, this tutorial dives into building more robust navigation for your site. There are two primary ways of retrieving pages on a Jekyll site: . | Retrieve pages listed in a YAML data source. Store the page data in a YAML (or JSON or CSV) file in the _data folder, loop through the YAML properties, and insert the values into your theme. | Retrieve pages by looping through the page front matter. Look through the front matter of your pages to identify certain properties, return those pages, and insert the pages’ front matter values into your theme. | . The examples that follow start with a basic navigation scenario and add more sophisticated elements to demonstrate different ways of returning the pages. In every scenario, you’ll see 3 elements: . | YAML | Liquid | Result | . The YAML file in the _data directory is called samplelist.yml. The scenarios are as follows: . | Scenario 1: Basic List | Scenario 2: Sorted list | Scenario 3: Two-level navigation list | Scenario 4: Three-level navigation list | Scenario 5: Using a page variable to select the YAML list | Scenario 6: Applying the active class for the current page | Scenario 7: Including items conditionally | Scenario 8: Retrieving items based on front matter properties | Scenario 9: Nested tree navigation with recursion | . ",
    "url": "/tutorials/navigation/",
    "relUrl": "/tutorials/navigation/"
  },"58": {
    "doc": "Order of interpretation",
    "title": "Order of interpretations",
    "content": "Jekyll converts your site in the following order: . | Site variables. Jekyll looks across your files and populates site variables, such as site, page, post, and collection objects. (From these objects, Jekyll determines the values for permalinks, tags, categories, and other details.) . | Liquid. Jekyll processes any Liquid formatting in pages that contain front matter. You can identify Liquid as follows: . | Liquid tags start with {% and end with a %}. For example: {% highlight %} or {% seo %}. Tags can define blocks or be inline. Block-defining tags will also come with a corresponding end tag — for example, {% endhighlight %}. | Liquid variables start and end with double curly braces. For example: {{ site.myvariable }} or {{ content }}. | Liquid filters start with a pipe character (|) and can only be used within Liquid variables after the variable string. For example: the relative_url filter in {{ \"css/main.css\" | relative_url }}. | . | Markdown. Jekyll converts Markdown to HTML using the Markdown filter specified in your config file. Files must have a Markdown file extension and front matter in order for Jekyll to convert them. | Layout. Jekyll pushes content into the layouts specified by the page’s front matter (or as specified in the config file). The content from each page gets pushed into the {{ content }} tags within the layouts. | Files. Jekyll writes the generated content into files in the directory structure in _site. Pages, posts, and collections get structured based on their permalink setting. Directories that begin with _ (such as _includes and _data) are usually hidden in the output. | . ",
    "url": "/tutorials/orderofinterpretation/#order-of-interpretations",
    "relUrl": "/tutorials/orderofinterpretation/#order-of-interpretations"
  },"59": {
    "doc": "Order of interpretation",
    "title": "Scenarios where incorrect configurations create problems",
    "content": "For the most part, you don’t have to think about the order of interpretation when building your Jekyll site. These details only become important to know when something isn’t rendering. The following scenarios highlight potential problems you might encounter. These problems come from misunderstanding the order of interpretation and can be easily fixed. ",
    "url": "/tutorials/orderofinterpretation/#scenarios-where-incorrect-configurations-create-problems",
    "relUrl": "/tutorials/orderofinterpretation/#scenarios-where-incorrect-configurations-create-problems"
  },"60": {
    "doc": "Order of interpretation",
    "title": "Variable on page not rendered because variable is assigned in layout",
    "content": "In your layout file (_layouts/default.html), suppose you have a variable assigned: . {% assign myvar = \"joe\" %} . On a page that uses the layout, you reference that variable: . {{ myvar }} . The variable won’t render because the page’s order of interpretation is to render Liquid first and later process the Layout. When the Liquid rendering happens, the variable assignment isn’t available. To make the code work, you could put the variable assignment into the page’s front matter. ",
    "url": "/tutorials/orderofinterpretation/#variable-on-page-not-rendered-because-variable-is-assigned-in-layout",
    "relUrl": "/tutorials/orderofinterpretation/#variable-on-page-not-rendered-because-variable-is-assigned-in-layout"
  },"61": {
    "doc": "Order of interpretation",
    "title": "Markdown in include file not processed",
    "content": "Suppose you have a Markdown file at _includes/mycontent.md. In the Markdown file, you have some Markdown formatting: . This is a list: * first item * second item . You include the file into an HTML file as follows: . {% include mycontent.md %} . The Markdown is not processed because first the Liquid (include tag) gets processed, inserting mycontent.md into the HTML file. Then the Markdown would get processed. But because the content is included into an HTML page, the Markdown isn’t rendered. The Markdown filter processes content only in Markdown files. To make the code work, use HTML formatting in includes that are inserted into HTML files. Note that highlight tags don’t require Markdown to process. Suppose your include contains the following: . {% highlight javascript %} console.log('alert'); {% endhighlight %} . The highlight tag is Liquid. (Liquid passes the content to Rouge for syntax highlighting.) As a result, this code will actually convert to HTML with syntax highlighting. Jekyll does not need the Markdown filter to process highlight tags. ",
    "url": "/tutorials/orderofinterpretation/#markdown-in-include-file-not-processed",
    "relUrl": "/tutorials/orderofinterpretation/#markdown-in-include-file-not-processed"
  },"62": {
    "doc": "Order of interpretation",
    "title": "Liquid mixed with JavaScript isn’t rendered",
    "content": "Suppose you try to mix Liquid’s assign tag with JavaScript, like this: . &lt;button onclick=\"someFunction()\"&gt;Click me&lt;/button&gt; &lt;p id=\"intro\"&gt;&lt;/p&gt; &lt;script&gt; {% assign someContent = \"This is some content\" %} function someFunction() { document.getElementById(\"intro\").innerHTML = someContent; } &lt;/script&gt; . This won’t work because the assign tag is only available during the Liquid rendering phase of the site. In this JavaScript example, the script executes when a user clicks a button (“Click me”) on the HTML page. At that time, the Liquid logic is no longer available, so the assign tag wouldn’t return anything. However, you can use Jekyll’s site variables or Liquid to populate a script that is executed at a later time. For example, suppose you have the following property in your front matter: someContent: \"This is some content\". You could do this: . &lt;button onclick=\"someFunction()\"&gt;Click me&lt;/button&gt; &lt;p id=\"intro\"&gt;&lt;/p&gt; &lt;script&gt; function someFunction() { document.getElementById(\"intro\").innerHTML = \"{{ page.someContent }}\"; } &lt;/script&gt; . When Jekyll builds the site, this someContent property populates the script’s values, converting {{ page.someContent }} to \"This is some content\". The key to remember is that Liquid renders when Jekyll builds your site. Liquid is not available at run-time in the browser when a user executes an event. ",
    "url": "/tutorials/orderofinterpretation/#liquid-mixed-with-javascript-isnt-rendered",
    "relUrl": "/tutorials/orderofinterpretation/#liquid-mixed-with-javascript-isnt-rendered"
  },"63": {
    "doc": "Order of interpretation",
    "title": "Note about using Liquid in YAML",
    "content": "There’s one more detail to remember: Liquid does not render when embedded in YAML files or front matter. (This isn’t related to order of interpretation, but it’s worth mentioning because it’s a common question about element rendering.) . For example, suppose you have a highlight tag in your _data/mydata.yml file: . myvalue: &gt; {% highlight javascript %} console.log('alert'); {% endhighlight %} . On a page, you try to insert the value: . {{ site.data.mydata.myvalue }} . This would render only as a string rather than a code sample with syntax highlighting. To make the code render, consider using an include instead. ",
    "url": "/tutorials/orderofinterpretation/#note-about-using-liquid-in-yaml",
    "relUrl": "/tutorials/orderofinterpretation/#note-about-using-liquid-in-yaml"
  },"64": {
    "doc": "Order of interpretation",
    "title": "Order of interpretation",
    "content": "Jekyll’s main job is to convert your raw text files into a static website. It does this by rendering Liquid, Markdown, and other transforms as it generates the static HTML output. In this conversion process, it’s important to understand Jekyll’s order of interpretation. By “order of interpretation,” we mean what gets rendered, in what order, and what rules get applied in converting content. If an element isn’t converting, you can troubleshoot the problem by analyzing the order of interpretation. ",
    "url": "/tutorials/orderofinterpretation/",
    "relUrl": "/tutorials/orderofinterpretation/"
  },"65": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "What is a Jekyll Website?",
    "content": "First, let’s start with a grounding in the basics. Stripping a Jekyll site down to an extremely basic level will help clarify what happens in a Jekyll site. If you haven’t already installed the jekyll gem, install it. We’ll start with a basic Jekyll site consisting of three files: . ├── _config.yml ├── _layouts │   └── default.html └── index.md . Manually create these three files in a folder called my_jekyll_site or whatever suits you the most, and place default.html inside a folder named _layouts. touch _config.yml index.md default.html mkdir _layouts &amp;&amp; mv default.html _layouts . Fire up your favorite editor, and populate the contents of the default.html and index.md files as follows: . _config.yml . name: My Jekyll Website . _layouts/default.html . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;body&gt; {{ content }} &lt;/body&gt; &lt;/html&gt; . index.md . --- title: My page layout: default --- # {{ page.title }} Content is written in [Markdown](https://learnxinyminutes.com/docs/markdown/). Plain text format allows you to focus on your **content**. &lt;!-- You can use HTML elements in Markdown, such as the comment element, and they won't be affected by a markdown parser. However, if you create an HTML element in your markdown file, you cannot use markdown syntax within that element's contents. --&gt; . Now cd to my_jekyll_site and serve the site with the built-in server: . cd my_jekyll_site jekyll serve . If you have a Gemfile, use Bundler by typing bundle exec jekyll serve instead. When you serve the site, you get a preview URL such as http://127.0.0.1:4000/ (which is the same as http://localhost:4000/). The site’s files are built into the _site folder by default. This is a Jekyll site at the most basic functional level. Here’s what is happening: . | The _config.yml file contains settings that Jekyll uses as it processes your site. An empty config file will use default values for building a Jekyll site. For example, to convert Markdown to HTML, Jekyll will automatically use the kramdown Markdown filter, without any need to specify it. | Jekyll looks for files with front matter tags (the two sets of dashed lines --- like those in index.md) and processes the files (populating site variables, rendering any Liquid, and converting Markdown to HTML). | Jekyll pushes the content from all pages and posts into the {{ content }} variable in the layout specified (default) in the front matter tags. | The processed files get written as .html files in the _site directory. | . You can read more about how Jekyll processes the files in order of Interpretation. With this basic understanding of how a Jekyll site works, you can convert almost any HTML theme for Jekyll. The following sections will take you through a step-by-step tutorial to do so. ",
    "url": "/tutorials/convert-site-to-jekyll/#what-is-a-jekyll-website",
    "relUrl": "/tutorials/convert-site-to-jekyll/#what-is-a-jekyll-website"
  },"66": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "1. Create a template for your default layout",
    "content": "Find your HTML theme and save it as a default layout. If you’re converting or cloning an existing site, you can right-click the page and view the source code. For example, suppose you’re cloning your company site to create a documentation site with the same branding. Or suppose you have a personal site that you built with HTML and now want to make it a Jekyll site. Get the HTML source code for your site. Regardless of the site, do check the license and make sure you have permission to copy and use the code. Copy and paste the source code into a file called default.html. Put the default.html file inside the _layouts folder. This will be the default layout template for your pages and posts — that is, each page or post will use this layout when Jekyll builds the site. Note that in looking for templates, you want the HTML output of the template. If the template has PHP tags or other dynamic scripts, these dynamic elements will need to be converted to HTML or to Liquid. Liquid is Jekyll templating system to retrieve dynamic content. Open default.html into your browser locally to ensure the site looks and behaves like it does online. You will likely need to adjust CSS, JS, and image paths so they work. For example, if the paths were relative on the site you copied, you’ll need to either download the same assets into your Jekyll site or use absolute paths to the same assets in the cloud. (Syntax such as src=\"// requires a prefix such as src=\"http:// to work in your local browser.) . Jekyll provides some filters to prepend a site URL before path. For example, you could preface your stylesheet like this: . {{ \"/assets/style.css\" | relative_url }} . The relative_url filter will prepend the baseurl value from your config file (as blog for instance) to the input. This is useful if your site is hosted at a subpath rather than at the root of the domain (for example, http://mysite.com/blog/). You can also use an absolute_url filter. This filter will prepend the url and baseurl value to the input: . {{ \"/assets/style.css\" | absolute_url }} . Again, both url and baseurl can be defined in your site’s config file, like this: . url: http://mysite.com baseurl: /blog . The result in the output will be http://mysite.com/blog/assets/style.css. Note that the url property of any page begins with a forward slash (/), so omit this at the end of your url or baseurl property. You don’t have to prepend filters to link paths like this. You could also use relative links across your entire site. However you decide to code the paths to your assets, make sure they render correctly. Does your local default.html page look good in your browser? Are all images, styles, and other elements showing up correctly? If so, great. Keep going. You can use this template as the layout for all your pages and posts or create as many templates as you need. In the next section, you’ll blank out the content of the layout and replace it with placeholder tags that get populated dynamically with your Jekyll pages. ",
    "url": "/tutorials/convert-site-to-jekyll/#1-create-a-template-for-your-default-layout",
    "relUrl": "/tutorials/convert-site-to-jekyll/#1-create-a-template-for-your-default-layout"
  },"67": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "2. Identify the content part of the layout",
    "content": "In default.html, find where the page content begins (usually at h1 or h2 tags). Replace the title that appears inside these tags with {{ page.title }}. Remove the content part (keep everything else: navigation menu, sidebar, footer, etc.) and replace it with {{ content }}. Check the layout again in your browser and make sure you didn’t corrupt or alter it up by inadvertently removing a crucial div tag or other element. The only change should be to the title and page content, which are now blanked out or showing the placeholder tag. ",
    "url": "/tutorials/convert-site-to-jekyll/#2-identify-the-content-part-of-the-layout",
    "relUrl": "/tutorials/convert-site-to-jekyll/#2-identify-the-content-part-of-the-layout"
  },"68": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "3. Create a couple of files with front matter tags",
    "content": "Create a couple of files (index.md and about.md) in your root directory. In your index.md file, add some front matter tags containing a title and layout property, like this: . --- title: Home layout: default --- Some page content here... Create another page for testing called about.md with similar front matter tags. If you don’t specify a layout in your pages, Jekyll will simply render that page as an unstyled basic HTML page. ",
    "url": "/tutorials/convert-site-to-jekyll/#3-create-a-couple-of-files-with-front-matter-tags",
    "relUrl": "/tutorials/convert-site-to-jekyll/#3-create-a-couple-of-files-with-front-matter-tags"
  },"69": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "4. Add a configuration file",
    "content": "Add a _config.yml file in your root directory. In _config.yml, you can optionally specify the markdown filter you want. By default, the GitHub Flavored Markdown (GFM) processor for kramdown is used. If no other filter is specified, your config file will automatically apply the following as a default setting: . markdown: kramdown kramdown: input: GFM . You can find additional Markdown Options in the Jekyll docs, though it’s unlikely that you’ll need them. ",
    "url": "/tutorials/convert-site-to-jekyll/#4-add-a-configuration-file",
    "relUrl": "/tutorials/convert-site-to-jekyll/#4-add-a-configuration-file"
  },"70": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "5. Test your pages",
    "content": "Now run jekyll serve and toggle between your index.html and about.html pages. The default layout should load for both pages. You’ve now extracted your content out into separate files and defined a common layout for pages. You could define any number of layouts you want for pages. Then just identify the layout you want that particular page to use. For example: . --- title: Sample page layout: homepage --- . This page would then use the homepage.html template in the _layouts folder. You can even set default front matter tags for pages, posts, or collections in your _config.yml file so that you don’t have to specify the layout in the front matter variables. Anyways, setting defaults is beyond the scope of this tutorial, let’s get back to work. ",
    "url": "/tutorials/convert-site-to-jekyll/#5-test-your-pages",
    "relUrl": "/tutorials/convert-site-to-jekyll/#5-test-your-pages"
  },"71": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "6. Configure site variables",
    "content": "You already configured the page title using {{ page.title }} tags. But there are more title tags to populate. Pages also have a title tag that appears in the browser tab or window. Typically you put the page title followed by the site title here. In your default.html layout, look for the title tags below your head tags: . &lt;title&gt;ACME Website&lt;/title&gt; . Insert the following site variables: . &lt;title&gt;{{ page.title }} | {{ site.title }}&lt;/title&gt; . Open _config.yml and add a title property for your site’s name. title: ACME Website . Any properties you add in your _config.yml file are accessible through the site namespace. Similarly, any properties in your page’s front matter are accessible through the page namespace. Use dot notation after site or page to access the value. Stop your Jekyll server with Ctrl + C and restart it. Verify that the title tags are populating correctly. Every time you modify your config file, you have to restart Jekyll for the changes to take effect. When you modify other files, Jekyll automatically picks up the changes when it rebuilds. If you have other variables to populate in your site, rinse and repeat. ",
    "url": "/tutorials/convert-site-to-jekyll/#6-configure-site-variables",
    "relUrl": "/tutorials/convert-site-to-jekyll/#6-configure-site-variables"
  },"72": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "7. Show posts on a page",
    "content": "It’s common to show a list of posts on the homepage. First, let’s create some posts so that we have something to showcase. Add some posts in a _posts folder following the standard YYYY-MM-DD-title.md post format: . | 2017-01-02-my-first-post.md | 2017-01-15-my-second-post.md | 2017-02-08-my-third-post.md | . In each post, add some basic content: . --- title: My First Post layout: default --- Some sample content... Now let’s create a layout that will display the posts. Create a new file in _layouts called home.html and add the following logic: . --- layout: default --- {{ content }} &lt;ul class=\"myposts\"&gt; {% for post in site.posts %} &lt;li&gt;&lt;a href=\"{{ post.url }}\"&gt;{{ post.title}}&lt;/a&gt; &lt;span class=\"postDate\"&gt;{{ post.date | date: \"%b %-d, %Y\" }}&lt;/span&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; . Create a file called blog.md in your root directory and specify the home layout: . --- title: Blog layout: home --- . In this case, contents of blog.md will be pushed into the {{ content }} tag in the home layout. Then the home layout will be pushed into the {{ content }} tag of the default layout. ",
    "url": "/tutorials/convert-site-to-jekyll/#7-show-posts-on-a-page",
    "relUrl": "/tutorials/convert-site-to-jekyll/#7-show-posts-on-a-page"
  },"73": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "How layouts work",
    "content": "When a layout specifies another layout, it means the content of the first layout will be stuffed into the {{ content }} tag of the second layout. As an analogy, think of Russian dolls that fit into each other. Each layout fits into another layout that it specifies. The following diagram shows how layouts work in Jekyll: . In this example, the content from a Markdown document document.md that specifies layout: docs gets pushed into the {{ content }} tag of the layout file docs.html. Because the docs layout itself specifies layout: page, the content from docs.html gets pushed into the {{ content }} tag in the layout file page.html. Finally because the page layout specifies layout: default, the content from page.html gets pushed into the {{ content }} tag of the layout file default.html. You don’t need multiple layouts. You could just use one: default. You have options for how you design your site. In general, it’s common to define one layout for pages and another layout for posts, but for both of these layouts to inherit the default template (which usually defines the top and bottom parts of the site). In your browser, go to blog.html and see the list of posts. Note that you don’t have to use the method described here. You could have simply added the for loop to any page, such as index.md, to display these posts. But given that you may have more complex logic for other features, it can be helpful to store your logic in templates separate from the page area where you frequently type your content. At minimum, a layout should contain {{ content }}, which acts as a receiver for the content to be rendered. ",
    "url": "/tutorials/convert-site-to-jekyll/#how-layouts-work",
    "relUrl": "/tutorials/convert-site-to-jekyll/#how-layouts-work"
  },"74": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "For loops",
    "content": "By the way, let’s pause here to look at the for loop logic a little more closely. For loops in Liquid are one of the most commonly used Liquid tags. For loops let you iterate through content in your Jekyll site and build out a result. The for loop also has certain properties available (like first or last iteration) based on the loop’s position in the loop as well. We’ve only scratched the surface of what you can do with for loops in retrieving posts. For example, if you wanted to display posts from a specific category, you could do so by adding a categories property to your post’s front matter and then look in those categories. Further, you could limit the number of results by adding a limit property. Here’s an example: . &lt;ul class=\"myposts\"&gt; {% for post in site.categories.podcasts limit:3 %} &lt;li&gt;&lt;a href=\"{{ post.url }}\"&gt;{{ post.title}}&lt;/a&gt; &lt;span class=\"postDate\"&gt;{{ post.date | date: \"%b %-d, %Y\" }}&lt;/span&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; . This loop would get the latest three posts that have a category called podcasts in the front matter. ",
    "url": "/tutorials/convert-site-to-jekyll/#for-loops",
    "relUrl": "/tutorials/convert-site-to-jekyll/#for-loops"
  },"75": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "8. Configure navigation",
    "content": "Now that you’ve configured posts, let’s configure page navigation. Most websites have some navigation either in the sidebar or header area. In this tutorial, we’ll assume you’ve got a simple list of pages you want to generate. If you only have a handful of pages, you could list them by using a for loop to iterate through the site.pages object and then order them by a front matter property. Identify the part of your code where the list of pages appears. Usually this is a &lt;ul&gt; element with various child &lt;li&gt; elements. Replace the code with the following: . &lt;ul&gt; {% assign mypages = site.pages | sort: \"order\" %} {% for page in mypages %} &lt;li&gt;&lt;a href=\"{{ page.url | absolute_url }}\"&gt;{{ page.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; . This example assumes each page would have front matter containing both a title and order property like this: . --- title: My page order: 2 --- . Here the order property will define how the pages get sorted, with 1 appearing first in the list. You could also iterate through a list of pages that you maintain in a separate data file. This might be more appropriate if you have a lot of pages, or you have other properties about the pages you want to store. To manage page links this way, create a folder in your Jekyll project called _data. In this folder, create a file called e.g. navigation.yml with this content: . - title: Sample page 1 url: /page-1-permalink/ - title: Sample page 2 url: /page-2-permalink/ - title: Sample page 3 url: /page-3-permalink/ . If you never wrote any YAML before, you’ll get quickly familiar with it. Take a look at what you can do with YAML. You can store additional properties for each item in this data file as desired. Arrange the list items in the order you want them to appear. To print the list of pages from the data file, use code like this: . &lt;ul&gt; {% for link in site.data.navigation %} &lt;li&gt;&lt;a href=\"{{ link.url }}\"&gt;{{ link.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; . If you have more sophisticated requirements around navigation, such as when building a documentation site, see the detailed tutorial on navigation. ",
    "url": "/tutorials/convert-site-to-jekyll/#8-configure-navigation",
    "relUrl": "/tutorials/convert-site-to-jekyll/#8-configure-navigation"
  },"76": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "9. Simplify your site with includes",
    "content": "Let’s suppose your default.html file is massive and hard to work with. You can break up your layout by putting some of the HTML code in include files. Add a folder called _includes in your root directory. In that folder, add a file there called sidebar.html. Remove your sidebar code from your default.html layout and insert it into the sidebar.html file. Where the sidebar code previously existed in default.html, pull in your “include” like this: . {% include sidebar.html %} . You can break up other elements of your theme like this, such as your header or footer. Then you can apply these common elements to other layout files. This way you won’t have duplicate code. ",
    "url": "/tutorials/convert-site-to-jekyll/#9-simplify-your-site-with-includes",
    "relUrl": "/tutorials/convert-site-to-jekyll/#9-simplify-your-site-with-includes"
  },"77": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "10. RSS feed",
    "content": "Your Jekyll site needs an RSS feed. Here’s the basic RSS feed syntax. To create an RSS file in Jekyll, create a file called feed.xml in your root directory and add the following: . --- layout: null --- &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;rss version=\"2.0\"&gt; &lt;channel&gt; &lt;title&gt;{{ site.title }}&lt;/title&gt; &lt;link&gt;{{ site.url }}&lt;/link&gt; &lt;atom:link href=\"{{ page.url | prepend: site.url }}\" rel=\"self\" type=\"application/rss+xml\" /&gt; &lt;description&gt;{{ site.description }}&lt;/description&gt; &lt;lastBuildDate&gt;{{ site.time | date_to_rfc822 }}&lt;/lastBuildDate&gt; {% for post in site.posts %} &lt;item&gt; &lt;title&gt;{{ post.title }}&lt;/title&gt; &lt;link&gt; {{ post.url | prepend: site.url }} &lt;/link&gt; &lt;description&gt; {{ post.content | escape | truncate: '400' }} &lt;/description&gt; &lt;pubDate&gt;{{ post.date | date_to_rfc822 }}&lt;/pubDate&gt; &lt;guid&gt; {{ post.url | prepend: site.url }} &lt;/guid&gt; &lt;/item&gt; {% endfor %} &lt;/channel&gt; &lt;/rss&gt; . Make sure your _config.yml file has properties for title, url, and description. This code uses a for loop to look through your last 20 posts. The content from the posts gets escaped and truncated to the last 400 characters using Liquid filters. In your default.html layout, look for a reference to the RSS or Atom feed in your header, and replace it with a reference to the file you just created. For example: . &lt;link rel=\"alternate\" type=\"application/rss+xml\" href=\"{{ site.url }}/feed.xml\" title=\"{{ site.title }}\"&gt; . You can also auto-generate your posts feed by adding a gem called jekyll-feed. This gem will also work on GitHub Pages. ",
    "url": "/tutorials/convert-site-to-jekyll/#10-rss-feed",
    "relUrl": "/tutorials/convert-site-to-jekyll/#10-rss-feed"
  },"78": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "11. Add a sitemap",
    "content": "Finally, add a site map. Create a sitemap.xml file in your root directory and add this code: . --- layout: null search: exclude --- &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"&gt; {% for page in site.pages %} &lt;url&gt; &lt;loc&gt;{{page.url}}&lt;/loc&gt; &lt;lastmod&gt;{{site.time | date: '%Y-%m-%d' }}&lt;/lastmod&gt; &lt;changefreq&gt;daily&lt;/changefreq&gt; &lt;priority&gt;0.5&lt;/priority&gt; &lt;/url&gt; {% endfor %} {% for post in site.posts %} &lt;url&gt; &lt;loc&gt;{{post.url}}&lt;/loc&gt; &lt;lastmod&gt;{{site.time | date: '%Y-%m-%d' }}&lt;/lastmod&gt; &lt;changefreq&gt;daily&lt;/changefreq&gt; &lt;priority&gt;0.5&lt;/priority&gt; &lt;/url&gt; {% endfor %} &lt;/urlset&gt; . Again, we’re using a for loop here to iterate through all posts and pages to add them to the sitemap. You can also auto-generate your sitemap by adding a gem called jekyll-sitemap. This gem will also work on GitHub Pages. ",
    "url": "/tutorials/convert-site-to-jekyll/#11-add-a-sitemap",
    "relUrl": "/tutorials/convert-site-to-jekyll/#11-add-a-sitemap"
  },"79": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "12. Add external services",
    "content": "For other services you might need (such as contact forms, search, comments, and more), look for third-party services. We listed some integrations on our resources page but in todays’s world of SaaS and APis the list is endless. Your Jekyll pages consist of HTML, CSS, and JavaScript, so pretty much any code you need to embed will work without a problem. As you integrate code for these services, note that if a page in your Jekyll site doesn’t have front matter tags, Jekyll won’t process any of the content in that page. The page will just be passed to the _site folder when you build your site. If you do want Jekyll to process some page content (for example, to populate a variable that you define in your site’s config file), just add front matter tags to the page. If you don’t want any layout applied to the page, specify layout: null like this: . --- layout: null --- . ",
    "url": "/tutorials/convert-site-to-jekyll/#12-add-external-services",
    "relUrl": "/tutorials/convert-site-to-jekyll/#12-add-external-services"
  },"80": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "13. Conclusion",
    "content": "Although websites can implement more sophisticated features and functionality, we’ve covered the basics in this tutorial. You now have a fully functional Jekyll site. To deploy your site, consider using GitHub Pages, Netlify, Vercel, Render, Amazon AWS S3 using the s3_website plugin, or just FTP your files to your web server. You can also package your layouts, includes and assets into a Ruby gem and make it a Jekyll theme. ",
    "url": "/tutorials/convert-site-to-jekyll/#13-conclusion",
    "relUrl": "/tutorials/convert-site-to-jekyll/#13-conclusion"
  },"81": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "Additional resources",
    "content": "Here are some additional tutorials on creating Jekyll sites: . | Convert a static site to Jekyll | Building a Jekyll Site – Part 1 of 3: Converting a Static Website To Jekyll | . ",
    "url": "/tutorials/convert-site-to-jekyll/#additional-resources",
    "relUrl": "/tutorials/convert-site-to-jekyll/#additional-resources"
  },"82": {
    "doc": "Convert an HTML site to Jekyll",
    "title": "Convert an HTML site to Jekyll",
    "content": "If you’re looking for themes for your Jekyll site, you don’t have to restrict yourself to existing Jekyll themes. It’s pretty easy to convert almost any static HTML files into a Jekyll website. In many ways, any site that is currently a static site is already a Jekyll website. Jekyll just allows you to automate parts of the site (like inserting pages into templates, rendering lists for navigation, generating feeds and sitemaps, and more) as it processes the files. Understanding how to convert any HTML site into Jekyll templates will open your world to many more options for Jekyll themes. Instead of searching online for Jekyll themes, you can choose from the large variety of HTML templates for your site, quickly Jekyll-ize the HTML templates as you need to, and build the output with Jekyll. Although websites can have sophisticated features and controls, we’ll keep things simple in this tutorial. ",
    "url": "/tutorials/convert-site-to-jekyll/",
    "relUrl": "/tutorials/convert-site-to-jekyll/"
  },"83": {
    "doc": "Custom 404 Page",
    "title": "On GitHub Pages",
    "content": "Any 404.html at the root of your _site directory will be served automatically by GitHub Pages and the local WEBrick development server. Simply add a 404.md or 404.html at the root of your site’s source directory and include front matter data to use the theme’s base layout. If you plan to organize your files under subdirectories, the error page should have the following Front Matter Data, set: permalink: /404.html. This is to ensure that the compiled 404.html resides at the root of your processed site, where it’ll be picked by the server. --- # example 404.md layout: default permalink: /404.html --- # 404 Page not found! :( . ",
    "url": "/tutorials/custom-404-page/#on-github-pages",
    "relUrl": "/tutorials/custom-404-page/#on-github-pages"
  },"84": {
    "doc": "Custom 404 Page",
    "title": "Hosting on Apache Web Servers",
    "content": "Apache Web Servers load a configuration file named .htaccess that modifies the functionality of these servers. Simply add the following to your .htaccess file. ErrorDocument 404 /404.html . With an .htaccess file, you have the freedom to place your error page within a subdirectory. ErrorDocument 404 /error_pages/404.html . Where the path is relative to your site’s domain. More info on configuring Apache Error Pages can found in official documentation. ",
    "url": "/tutorials/custom-404-page/#hosting-on-apache-web-servers",
    "relUrl": "/tutorials/custom-404-page/#hosting-on-apache-web-servers"
  },"85": {
    "doc": "Custom 404 Page",
    "title": "Hosting on Nginx server",
    "content": "The procedure is just as simple as configuring Apache servers, but slightly different. The nginx configuration file depends on the system in which it is installed. In most systems, it is the nginx.conf file, which is usually located inside /etc/nginx/ or /etc/nginx/conf/. However, in other systems like Ubuntu, you would have to look for a default nginx configuration file, containing server related information, which is usually located inside /etc/nginx/sites-available/ or /etc/nginx/sites-enabled/. Add the following to your nginx configuration file, i.e. either to nginx.conf file or to default file: . server { error_page 404 /404.html; location = /404.html { internal; } } . If the server block already exists, only add the code inside the server block given above. The location directive prevents users from directly browsing the 404.html page. More info on nginx error page can be found on nginx official documentation. Proceed with caution while editing the configuration file. ",
    "url": "/tutorials/custom-404-page/#hosting-on-nginx-server",
    "relUrl": "/tutorials/custom-404-page/#hosting-on-nginx-server"
  },"86": {
    "doc": "Custom 404 Page",
    "title": "Custom 404 Page",
    "content": "You can easily serve custom 404 error pages with Jekyll to replace the default Error 404 – File Not Found page displayed when one tries to access a broken link on your site. ",
    "url": "/tutorials/custom-404-page/",
    "relUrl": "/tutorials/custom-404-page/"
  },"87": {
    "doc": "Video Walkthroughs",
    "title": "List of Lessons",
    "content": ". | Introduction to Jekyll (see above) | Mac Installation | Windows Installation | Creating a Site | Front Matter | Writing Posts | Working With Drafts | Creating Pages | Permalinks | Front Matter Defaults | Themes | Layouts | Variables | Includes | Looping Through Posts | Conditionals | Data Files | Static Files | Hosting on GitHub Pages | . ",
    "url": "/tutorials/video-walkthroughs/#list-of-lessons",
    "relUrl": "/tutorials/video-walkthroughs/#list-of-lessons"
  },"88": {
    "doc": "Video Walkthroughs",
    "title": "Video Walkthroughs",
    "content": "Giraffe Academy has a series of videos that will walk you through the basics of using Jekyll. In this series you’ll learn everything from installing Jekyll on your computer and setting up your first site, to using more complex features like variables, layouts and conditionals. ",
    "url": "/tutorials/video-walkthroughs/",
    "relUrl": "/tutorials/video-walkthroughs/"
  },"89": {
    "doc": "Using Jekyll with Bundler",
    "title": "Before You Begin",
    "content": "To complete this tutorial, you’ll need to have Ruby and Bundler installed. You can find the installation instructions on their websites. ",
    "url": "/tutorials/using-jekyll-with-bundler/#before-you-begin",
    "relUrl": "/tutorials/using-jekyll-with-bundler/#before-you-begin"
  },"90": {
    "doc": "Using Jekyll with Bundler",
    "title": "Initialize Bundler",
    "content": "The first thing to do is create a new directory for your project and run bundle init. This creates a new Bundler project (by creating an empty Gemfile). mkdir my-jekyll-website cd my-jekyll-website bundle init . ",
    "url": "/tutorials/using-jekyll-with-bundler/#initialize-bundler",
    "relUrl": "/tutorials/using-jekyll-with-bundler/#initialize-bundler"
  },"91": {
    "doc": "Using Jekyll with Bundler",
    "title": "Configure Bundler Install Path",
    "content": "This step is optional. In this step, we’re going to configure Bundler to install gems in the ./vendor/bundle/ project subdirectory. The advantage of doing this is that bundler will install gems within your project folder instead of the location used by gem install. This can help you avoid permissions errors you might otherwise get during gem installation, depending how you installed Ruby. If you skip this step, Bundler will install your dependencies to the location used by gem install. bundle config set --local path 'vendor/bundle' . Bundler Config is Persistent . This step is only required once per project. Bundler saves your config in ./.bundle/config, so future gems will be installed to the same location. ",
    "url": "/tutorials/using-jekyll-with-bundler/#configure-bundler-install-path",
    "relUrl": "/tutorials/using-jekyll-with-bundler/#configure-bundler-install-path"
  },"92": {
    "doc": "Using Jekyll with Bundler",
    "title": "Add Jekyll",
    "content": "Now, we’re going to use Bundler to add Jekyll as a dependency of our new project. This command will add the Jekyll gem to our Gemfile and install it to the ./vendor/bundle/ folder (or your default gem installation directory if you didn’t set a custom path). bundle add jekyll . ",
    "url": "/tutorials/using-jekyll-with-bundler/#add-jekyll",
    "relUrl": "/tutorials/using-jekyll-with-bundler/#add-jekyll"
  },"93": {
    "doc": "Using Jekyll with Bundler",
    "title": "Create A Jekyll Scaffold",
    "content": "Now that Jekyll is installed, we can use it to create the scaffolding for our site. We need the --force parameter because our folder isn’t empty - it already has some Bundler files in it. We run the bundle install separately because Jekyll gets confused if the Gemfile already exists. bundle exec jekyll new --force --skip-bundle . bundle install . ",
    "url": "/tutorials/using-jekyll-with-bundler/#create-a-jekyll-scaffold",
    "relUrl": "/tutorials/using-jekyll-with-bundler/#create-a-jekyll-scaffold"
  },"94": {
    "doc": "Using Jekyll with Bundler",
    "title": "Serve the Site",
    "content": "Your new website is ready! You can serve the website with bundle exec jekyll serve and visit it at http://127.0.0.1:4000. From here, you’re ready to continue developing the site on your own. All of the normal Jekyll commands are available to you, but you should prefix them with bundle exec so that Bundler runs the version of Jekyll that is installed in your project folder. ",
    "url": "/tutorials/using-jekyll-with-bundler/#serve-the-site",
    "relUrl": "/tutorials/using-jekyll-with-bundler/#serve-the-site"
  },"95": {
    "doc": "Using Jekyll with Bundler",
    "title": "Commit to Source Control",
    "content": "If you’re storing your new site in version control, you’ll want to ignore the ./vendor/ and ./.bundle/ folders since they contain user- or platform-specific information. New users will be able to install the correct dependencies based on Gemfile and Gemfile.lock, which should both be checked in. You can use this .gitignore to get started, if you want.gitignore . # Ignore metadata generated by Jekyll _site/ .sass-cache/ .jekyll-cache/ .jekyll-metadata # Ignore folders generated by Bundler .bundle/ vendor/ . ",
    "url": "/tutorials/using-jekyll-with-bundler/#commit-to-source-control",
    "relUrl": "/tutorials/using-jekyll-with-bundler/#commit-to-source-control"
  },"96": {
    "doc": "Using Jekyll with Bundler",
    "title": "Using Jekyll with Bundler",
    "content": "Bundler provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed. Bundler can be a great tool to use with Jekyll. Because it tracks dependencies on a per-project basis, it is particularly useful if you need to run different versions of Jekyll in different projects. In addition, because it can (optionally) install dependencies in the project folder, it can help you avoid permissions issues you might otherwise run into. The usual way to use Jekyll is to install Jekyll to the system’s default gem installation directory and then run jekyll new. In this tutorial, we’ll show you how to create a new Jekyll project using Bundler and without installing gems outside the project directory. This is not the simplest way to start using Jekyll . This tutorial helps you get Jekyll set up using Bundler, and optionally without any system-wide gem installations. If prefer installing the jekyll command to your default gem installation directory, you might want the Quickstart. ",
    "url": "/tutorials/using-jekyll-with-bundler/",
    "relUrl": "/tutorials/using-jekyll-with-bundler/"
  },"97": {
    "doc": "Cache API",
    "title": "Jekyll::Cache.new(name) → new_cache",
    "content": "If there has already been a cache created with name, this will return a reference to that existing Cache. Otherwise, create a new Cache called name. If this Cache will be used by a Gem-packaged plugin, name should either be the name of the Gem, or prefixed with the name of the Gem followed by :: (if a plugin expects to use multiple Caches). If this Cache will be used internally by Jekyll, name should be the name of the class that is using the Cache (ie: \"Jekyll::Converters::Markdown\"). Cached objects are shared between all Caches created with the same name, but are not shared between Caches with different names. There can be an object stored with key 1 in Jekyll::Cache.new(\"a\") and an object stored with key 1 in Jekyll::Cache.new(\"b\") and these will not point to the same cached object. This way, you do not need to ensure that keys are globally unique. ",
    "url": "/tutorials/cache-api/#jekyllcachenewname--new_cache",
    "relUrl": "/tutorials/cache-api/#jekyllcachenewname--new_cache"
  },"98": {
    "doc": "Cache API",
    "title": "getset(key) {block}",
    "content": "This is the most common way to utilize the Cache. block is a bit of code that takes a lot of time to compute, but always generates the same output given a particular input (like converting Markdown to HTML). key is a String (or an object with to_s) that uniquely identifies the input to the function. If key already exists in the Cache, it will be returned and block will never be executed. If key does not exist in the Cache, block will be executed and the result will be added to the Cache and returned. def cache @@cache ||= Jekyll::Cache.new(\"ConvertMarkdown\") end def convert_markdown_to_html(markdown) cache.getset(markdown) do expensive_conversion_method(markdown) end end . In the above example, expensive_conversion_method will only be called once for any given markdown input. If convert_markdown_to_html is called a second time with the same input, the cached output will be returned. Because posts will frequently remain unchanged from one build to the next, this is an effective way to avoid performing the same computations each time the site is built. ",
    "url": "/tutorials/cache-api/#getsetkey-block",
    "relUrl": "/tutorials/cache-api/#getsetkey-block"
  },"99": {
    "doc": "Cache API",
    "title": "clear",
    "content": "This will clear all cached objects from a particular Cache. The Cache will be empty, both in memory and on disk. ",
    "url": "/tutorials/cache-api/#clear",
    "relUrl": "/tutorials/cache-api/#clear"
  },"100": {
    "doc": "Cache API",
    "title": "The following methods will probably only be used in special circumstances",
    "content": " ",
    "url": "/tutorials/cache-api/#the-following-methods-will-probably-only-be-used-in-special-circumstances",
    "relUrl": "/tutorials/cache-api/#the-following-methods-will-probably-only-be-used-in-special-circumstances"
  },"101": {
    "doc": "Cache API",
    "title": "cache[key] → value",
    "content": "Fetches key from Cache and returns its value. Raises if key does not exist in Cache. ",
    "url": "/tutorials/cache-api/#cachekey--value",
    "relUrl": "/tutorials/cache-api/#cachekey--value"
  },"102": {
    "doc": "Cache API",
    "title": "cache[key] = value",
    "content": "Adds value to Cache under key. Returns nothing. ",
    "url": "/tutorials/cache-api/#cachekey--value-1",
    "relUrl": "/tutorials/cache-api/#cachekey--value-1"
  },"103": {
    "doc": "Cache API",
    "title": "key?(key) → true or false",
    "content": "Returns true if key already exists in Cache. False otherwise. ",
    "url": "/tutorials/cache-api/#keykey--true-or-false",
    "relUrl": "/tutorials/cache-api/#keykey--true-or-false"
  },"104": {
    "doc": "Cache API",
    "title": "delete(key)",
    "content": "Removes key from Cache. Returns nothing. ",
    "url": "/tutorials/cache-api/#deletekey",
    "relUrl": "/tutorials/cache-api/#deletekey"
  },"105": {
    "doc": "Cache API",
    "title": "Cache API",
    "content": "Jekyll includes a caching API, which is used both internally as well as exposed for plugins, which can be used to cache the output of deterministic functions to speed up site generation. This cache will be persistent across builds, but cleared when Jekyll detects any changes to _config.yml. ",
    "url": "/tutorials/cache-api/",
    "relUrl": "/tutorials/cache-api/"
  },"106": {
    "doc": "Tabulate CSV Data",
    "title": "1. Create a CSV",
    "content": "Create a CSV file in your Data files directory so that Jekyll will pick it up. A sample path and CSV data are shown below: . _data/authors.csv . First name,Last name,Age,Location John,Doe,35,United States Jane,Doe,29,France Jack,Hill,25,Australia . That data file will now be available in Jekyll like this: . {{ site.data.authors }} . ",
    "url": "/tutorials/csv-to-table/#1-create-a-csv",
    "relUrl": "/tutorials/csv-to-table/#1-create-a-csv"
  },"107": {
    "doc": "Tabulate CSV Data",
    "title": "2. Add a table",
    "content": "Choose an HTML or markdown file where you want your table to be shown. For example: table_test.md . --- title: Table test --- . ",
    "url": "/tutorials/csv-to-table/#2-add-a-table",
    "relUrl": "/tutorials/csv-to-table/#2-add-a-table"
  },"108": {
    "doc": "Tabulate CSV Data",
    "title": "Inspect a row",
    "content": "Grab the first row and see what it looks like using the inspect filter. {% assign row = site.data.authors[0] %} {{ row | inspect }} . The result will be a hash (an object consisting of key-value pairs) which looks like this: . { \"First name\"=&gt;\"John\", \"Last name\"=&gt;\"Doe\", \"Age\"=&gt;\"35\", \"Location\"=&gt;\"United States\" } . Note that Jekyll does in fact preserve the order here, based on the original CSV. ",
    "url": "/tutorials/csv-to-table/#inspect-a-row",
    "relUrl": "/tutorials/csv-to-table/#inspect-a-row"
  },"109": {
    "doc": "Tabulate CSV Data",
    "title": "Unpack a row",
    "content": "A simple solution would be to hardcode the field names when looking up the row values by key. {{ row[\"First name\"] }} {{ row[\"Last name\"] }} . But we prefer a solution that will work for any CSV, without specifying the column names upfront. So we iterate over the row object using a for loop: . {% assign row = site.data.authors[0] %} {% for pair in row %} {{ pair | inspect }} {% endfor %} . This produces the following. Note the first item in each pair is the key and the second will be the value. [\"First name\", \"John\"] [\"Last name\", \"Doe\"] [\"Age\", \"35\"] [\"Location\", \"United States\"] . ",
    "url": "/tutorials/csv-to-table/#unpack-a-row",
    "relUrl": "/tutorials/csv-to-table/#unpack-a-row"
  },"110": {
    "doc": "Tabulate CSV Data",
    "title": "Create a table header row",
    "content": "Here we make a table with a single table row (tr), made up of table header (th) tags. We find the header name by getting the first element (at index 0) from pair. We ignore the second element as we don’t need the value yet. &lt;table&gt; {% for row in site.data.authors %} {% if forloop.first %} &lt;tr&gt; {% for pair in row %} &lt;th&gt;{{ pair[0] }}&lt;/th&gt; {% endfor %} &lt;/tr&gt; {% endif %} {% endfor %} &lt;/table&gt; . For now, we do not display any content from the second row onwards. We achieve this by using forloop.first, since this will return true for the first row and false otherwise. ",
    "url": "/tutorials/csv-to-table/#create-a-table-header-row",
    "relUrl": "/tutorials/csv-to-table/#create-a-table-header-row"
  },"111": {
    "doc": "Tabulate CSV Data",
    "title": "Add table data rows",
    "content": "In this section we add the data rows to the table. Now, we use the second element of pair to find the value. For convenience, we render using the tablerow tag - this works like a for loop, but the inner data will be rendered with tr and td HTML tags for us. Unfortunately, there is no equivalent for the header row, so we must write that out in full, as in the previous section. --- title: Table test --- &lt;table&gt; {% for row in site.data.authors %} {% if forloop.first %} &lt;tr&gt; {% for pair in row %} &lt;th&gt;{{ pair[0] }}&lt;/th&gt; {% endfor %} &lt;/tr&gt; {% endif %} {% tablerow pair in row %} {{ pair[1] }} {% endtablerow %} {% endfor %} &lt;/table&gt; . With the code above, the complete table would look like this: . | First name | Last name | Age | Location | . | John | Doe | 35 | United States | . | Jane | Doe | 29 | France | . | Jack | Hill | 25 | Australia | . That’s it - you can now turn a CSV into an HTML table using Jekyll. ",
    "url": "/tutorials/csv-to-table/#add-table-data-rows",
    "relUrl": "/tutorials/csv-to-table/#add-table-data-rows"
  },"112": {
    "doc": "Tabulate CSV Data",
    "title": "Next steps",
    "content": ". | Change the field names in the CSV. | Choose a different CSV. | Add CSS styling to your table. | Render the table using a JSON or YAML input file. | . ",
    "url": "/tutorials/csv-to-table/#next-steps",
    "relUrl": "/tutorials/csv-to-table/#next-steps"
  },"113": {
    "doc": "Tabulate CSV Data",
    "title": "Tabulate CSV Data",
    "content": "This tutorial shows how to use Jekyll to read a CSV and render the data as an HTML table. This approach will: . | use the CSV’s first row as the HTML table header. | use remaining rows for the body of the table. | preserve the order of the columns from the original CSV. | be flexible enough to work with any valid CSV that is referenced. | . There is no need to specify what the names of the columns are, or how many columns there are. The trick to this tutorial is that, when we iterate over the row data, we pick up the first row and unpack that so we can get the header names. Follow the steps below to convert a sample CSV of authors into an HTML table. ",
    "url": "/tutorials/csv-to-table/",
    "relUrl": "/tutorials/csv-to-table/"
  },"114": {
    "doc": "Tutorials",
    "title": "How to contribute a tutorial",
    "content": "We welcome your tutorial contributions. To add your tutorial: . | Fork the Jekyll project by clicking the Fork button in the upper-right corner of the jekyll/jekyll project GitHub repo. | Add your tutorial in the _tutorials collection. | Make sure your tutorial has the same front matter items as other tutorial items. | Add a reference to your tutorial filename in _data/tutorials.yml. This allows your tutorial to appear in the Tutorials sidebar. | Follow the regular git workflow to submit the pull request. | . When you submit your pull request, the Jekyll documentation team will review your contribution and either merge it or suggest edits. ",
    "url": "/tutorials/home/#how-to-contribute-a-tutorial",
    "relUrl": "/tutorials/home/#how-to-contribute-a-tutorial"
  },"115": {
    "doc": "Tutorials",
    "title": "Tutorials",
    "content": "In contrast to Docs, Tutorials provide more detailed, narrative instruction that cover a variety of Jekyll topics and scenarios. Tutorials might contain the following: . | Step-by-step processes through particular scenarios or challenges | Full walk-throughs using sample data, showing inputs and results from the sample data | Detailed explanation about the pros and cons for different Jekyll strategies | End-to-end instruction in developing a complete feature on a Jekyll site | Instruction that combines various techniques from across the docs | . In short, tutorials aren’t the core reference information in docs. They walk users through processes from beginning to end. The Tutorials section is new, so there aren’t many tutorials yet. You can add a tutorial here to help populate this section. Some of these techniques might even guide you through a supporting tool, script, service, or other hack used with your Jekyll site. Feel free to include tutorials involving external services with Jekyll as well. However, note that Jekyll in no way endorses any third-party tools mentioned in tutorials. ",
    "url": "/tutorials/home/",
    "relUrl": "/tutorials/home/"
  },"116": {
    "doc": "Assets",
    "title": "Sass/SCSS",
    "content": "Jekyll allows you to customize your Sass conversion in certain ways. Place all your partials in your sass_dir, which defaults to &lt;source&gt;/_sass. Place your main SCSS or Sass files in the place you want them to be in the output file, such as &lt;source&gt;/css. For an example, take a look at this example site using Sass support in Jekyll. If you are using Sass @import statements, you’ll need to ensure that your sass_dir is set to the base directory that contains your Sass files: . sass: sass_dir: _sass . The Sass converter will default the sass_dir configuration option to _sass. The sass_dir is only used by Sass . Note that the sass_dir becomes the load path for Sass imports, nothing more. This means that Jekyll does not know about these files directly. Any files here should not contain the empty front matter as described above. If they do, they'll not be transformed as described above. This folder should only contain imports. You may also specify the output style with the style option in your _config.yml file: . sass: style: compressed . These are passed to Sass, so any output style options Sass supports are valid here, too. For more information on Sass configuration options, see the Sass configuration docs. ",
    "url": "/docs/assets/#sassscss",
    "relUrl": "/docs/assets/#sassscss"
  },"117": {
    "doc": "Assets",
    "title": "Coffeescript",
    "content": "To enable Coffeescript in Jekyll 3.0 and up you must . | Install the jekyll-coffeescript gem | Ensure that your _config.yml is up-to-date and includes the following: | . plugins: - jekyll-coffeescript . ",
    "url": "/docs/assets/#coffeescript",
    "relUrl": "/docs/assets/#coffeescript"
  },"118": {
    "doc": "Assets",
    "title": "Assets",
    "content": "Jekyll provides built-in support for Sass and can work with CoffeeScript via a Ruby gem. In order to use them, you must first create a file with the proper extension name (one of .sass, .scss, or .coffee) and start the file with two lines of triple dashes, like this: . --- --- // start content .my-definition font-size: 1.2em . Jekyll treats these files the same as a regular page, in that the output file will be placed in the same directory that it came from. For instance, if you have a file named css/styles.scss in your site’s source folder, Jekyll will process it and put it in your site’s destination folder under css/styles.css. Jekyll processes all Liquid filters and tags in asset files . If you are using Mustache or another JavaScript templating language that conflicts with the Liquid template syntax, you will need to place {&#37; raw &#37;} and {&#37; endraw &#37;} tags around your code. ",
    "url": "/docs/assets/",
    "relUrl": "/docs/assets/"
  },"119": {
    "doc": "Code of Conduct",
    "title": "Our Pledge",
    "content": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. ",
    "url": "/docs/code_of_conduct/#our-pledge",
    "relUrl": "/docs/code_of_conduct/#our-pledge"
  },"120": {
    "doc": "Code of Conduct",
    "title": "Our Standards",
    "content": "Examples of behavior that contributes to creating a positive environment include: . | Using welcoming and inclusive language | Being respectful of differing viewpoints and experiences | Gracefully accepting constructive criticism | Focusing on what is best for the community | Showing empathy towards other community members | . Examples of unacceptable behavior by participants include: . | The use of sexualized language or imagery and unwelcome sexual attention or advances | Trolling, insulting/derogatory comments, and personal or political attacks | Public or private harassment | Publishing others’ private information, such as a physical or electronic address, without explicit permission | Other conduct which could reasonably be considered inappropriate in a professional setting | . ",
    "url": "/docs/code_of_conduct/#our-standards",
    "relUrl": "/docs/code_of_conduct/#our-standards"
  },"121": {
    "doc": "Code of Conduct",
    "title": "Our Responsibilities",
    "content": "Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. ",
    "url": "/docs/code_of_conduct/#our-responsibilities",
    "relUrl": "/docs/code_of_conduct/#our-responsibilities"
  },"122": {
    "doc": "Code of Conduct",
    "title": "Scope",
    "content": "This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. ",
    "url": "/docs/code_of_conduct/#scope",
    "relUrl": "/docs/code_of_conduct/#scope"
  },"123": {
    "doc": "Code of Conduct",
    "title": "Enforcement",
    "content": "Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at olivia@jekyllrb.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project’s leadership. ",
    "url": "/docs/code_of_conduct/#enforcement",
    "relUrl": "/docs/code_of_conduct/#enforcement"
  },"124": {
    "doc": "Code of Conduct",
    "title": "Attribution",
    "content": "This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html . For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq . ",
    "url": "/docs/code_of_conduct/#attribution",
    "relUrl": "/docs/code_of_conduct/#attribution"
  },"125": {
    "doc": "Code of Conduct",
    "title": "Code of Conduct",
    "content": " ",
    "url": "/docs/code_of_conduct/",
    "relUrl": "/docs/code_of_conduct/"
  },"126": {
    "doc": "Collections",
    "title": "Setup",
    "content": "To use a Collection you first need to define it in your _config.yml. For example here’s a collection of staff members: . collections: - staff_members . In this case collections is defined as a sequence (i.e., array) with no additional metadata defined for each collection. You can optionally specify metadata for your collection by defining collections as a mapping (i.e., hashmap) instead of sequence, and then defining additional fields in it: . collections: staff_members: people: true . When defining a collection as a sequence, its pages will not be rendered by default. To enable this, output: true must be specified on the collection, which requires defining the collection as a mapping. For more information, see the section Output. Gather your collections3.7.0 . You can optionally specify a directory to store all your collections in the same place with collections_dir: my_collections. Then Jekyll will look in my_collections/_books for the books collection, and in my_collections/_recipes for the recipes collection. Be sure to move drafts and posts into custom collections directory . If you specify a directory to store all your collections in the same place with collections_dir: my_collections, then you will need to move your _drafts and _posts directory to my_collections/_drafts and my_collections/_posts. Note that, the name of your collections directory cannot start with an underscore (`_`). ",
    "url": "/docs/collections/#setup",
    "relUrl": "/docs/collections/#setup"
  },"127": {
    "doc": "Collections",
    "title": "Add content",
    "content": "Create a corresponding folder (e.g. &lt;source&gt;/_staff_members) and add documents. Front matter is processed if the front matter exists, and everything after the front matter is pushed into the document’s content attribute. If no front matter is provided, Jekyll will consider it to be a static file and the contents will not undergo further processing. If front matter is provided, Jekyll will process the file contents into the expected output. Regardless of whether front matter exists or not, Jekyll will write to the destination directory (e.g. _site) only if output: true has been set in the collection’s metadata. For example here’s how you would add a staff member to the collection set above. The filename is ./_staff_members/jane.md with the following content: . --- name: Jane Doe position: Developer --- Jane has worked on Jekyll for the past *five years*. Do note that in spite of being considered as a collection internally, the above doesn’t apply to posts. Posts with a valid filename format will be marked for processing even if they do not contain front matter. Be sure to name your directories correctly . The folder must be named identically to the collection you defined in your _config.yml file, with the addition of the preceding _ character. ",
    "url": "/docs/collections/#add-content",
    "relUrl": "/docs/collections/#add-content"
  },"128": {
    "doc": "Collections",
    "title": "Output",
    "content": "Now you can iterate over site.staff_members on a page and output the content for each staff member. Similar to posts, the body of the document is accessed using the content variable: . {% for staff_member in site.staff_members %} &lt;h2&gt;{{ staff_member.name }} - {{ staff_member.position }}&lt;/h2&gt; &lt;p&gt;{{ staff_member.content | markdownify }}&lt;/p&gt; {% endfor %} . If you’d like Jekyll to create a rendered page for each document in your collection, you can set the output key to true in your collection metadata in _config.yml: . collections: staff_members: output: true . You can link to the generated page using the url attribute: . {% for staff_member in site.staff_members %} &lt;h2&gt; &lt;a href=\"{{ staff_member.url }}\"&gt; {{ staff_member.name }} - {{ staff_member.position }} &lt;/a&gt; &lt;/h2&gt; &lt;p&gt;{{ staff_member.content | markdownify }}&lt;/p&gt; {% endfor %} . ",
    "url": "/docs/collections/#output",
    "relUrl": "/docs/collections/#output"
  },"129": {
    "doc": "Collections",
    "title": "Permalinks",
    "content": "There are special permalink variables for collections to help you control the output url for the entire collection. ",
    "url": "/docs/collections/#permalinks",
    "relUrl": "/docs/collections/#permalinks"
  },"130": {
    "doc": "Collections",
    "title": "Custom Sorting of Documents4.0",
    "content": "By default, two documents in a collection are sorted by their date attribute when both of them have the date key in their front matter. However, if either or both documents do not have the date key in their front matter, they are sorted by their respective paths. You can control this sorting via the collection’s metadata. ",
    "url": "/docs/collections/#custom-sorting-of-documents",
    "relUrl": "/docs/collections/#custom-sorting-of-documents"
  },"131": {
    "doc": "Collections",
    "title": "Sort By Front Matter Key",
    "content": "Documents can be sorted based on a front matter key by setting a sort_by metadata to the front matter key string. For example, to sort a collection of tutorials based on key lesson, the configuration would be: . collections: tutorials: sort_by: lesson . The documents are arranged in the increasing order of the key’s value. If a document does not have the front matter key defined then that document is placed immediately after sorted documents. When multiple documents do not have the front matter key defined, those documents are sorted by their dates or paths and then placed immediately after the sorted documents. ",
    "url": "/docs/collections/#sort-by-front-matter-key",
    "relUrl": "/docs/collections/#sort-by-front-matter-key"
  },"132": {
    "doc": "Collections",
    "title": "Manually Ordering Documents",
    "content": "You can also manually order the documents by setting an order metadata with the filenames listed in the desired order. For example, a collection of tutorials would be configured as: . collections: tutorials: order: - hello-world.md - introduction.md - basic-concepts.md - advanced-concepts.md . Any documents with filenames that do not match the list entry simply gets placed after the rearranged documents. If a document is nested under subdirectories, include them in entries as well: . collections: tutorials: order: - hello-world.md - introduction.md - concepts/basics.md - concepts/advanced.md . If both metadata keys have been defined properly, order list takes precedence. ",
    "url": "/docs/collections/#manually-ordering-documents",
    "relUrl": "/docs/collections/#manually-ordering-documents"
  },"133": {
    "doc": "Collections",
    "title": "Liquid Attributes",
    "content": " ",
    "url": "/docs/collections/#liquid-attributes",
    "relUrl": "/docs/collections/#liquid-attributes"
  },"134": {
    "doc": "Collections",
    "title": "Collections",
    "content": "Collections are also available under site.collections, with the metadata you specified in your _config.yml (if present) and the following information: . | Variable | Description | . | label . | The name of your collection, e.g. my_collection. | . | docs . | An array of documents. | . | files . | An array of static files in the collection. | . | relative_directory . | The path to the collection's source directory, relative to the site source. | . | directory . | The full path to the collections's source directory. | . | output . | Whether the collection's documents will be output as individual files. | . A Hard-Coded Collection . In addition to any collections you create yourself, the posts collection is hard-coded into Jekyll. It exists whether you have a _posts directory or not. This is something to note when iterating through site.collections as you may need to filter it out. You may wish to use filters to find your collection: {{ site.collections | where: \"label\", \"myCollection\" | first }} . Collections and Time . Except for documents in hard-coded default collection posts, all documents in collections you create, are accessible via Liquid irrespective of their assigned date, if any, and therefore renderable. Documents are attempted to be written to disk only if the concerned collection metadata has output: true. Additionally, future-dated documents are only written if site.future is also true. More fine-grained control over documents being written to disk can be exercised by setting published: false (true by default) in the document's front matter. ",
    "url": "/docs/collections/#collections",
    "relUrl": "/docs/collections/#collections"
  },"135": {
    "doc": "Collections",
    "title": "Documents",
    "content": "In addition to any front matter provided in the document’s corresponding file, each document has the following attributes: . | Variable | Description | . | content . | The (unrendered) content of the document. If no front matter is provided, Jekyll will not generate the file in your collection. If front matter is used, then this is all the contents of the file after the terminating `---` of the front matter. | . | output . | The rendered output of the document, based on the content. | . | path . | The full path to the document's source file. | . | relative_path . | The path to the document's source file relative to the site source. | . | url . | The URL of the rendered collection. The file is only written to the destination when the collection to which it belongs has output: true in the site's configuration. | . | collection . | The name of the document's collection. | . | date . | The date of the document's collection. | . ",
    "url": "/docs/collections/#documents",
    "relUrl": "/docs/collections/#documents"
  },"136": {
    "doc": "Collections",
    "title": "Collections",
    "content": "Collections are a great way to group related content like members of a team or talks at a conference. ",
    "url": "/docs/collections/",
    "relUrl": "/docs/collections/"
  },"137": {
    "doc": "Report a bug",
    "title": "Report a bug",
    "content": "If you think you’ve found a bug within a Jekyll plugin, open an issue in that plugin’s repository — First look for the plugin on rubygems then click on the Homepage link to access the plugin repository. If you think you’ve found a bug within Jekyll itself, open an issue. ",
    "url": "/docs/community/bug/",
    "relUrl": "/docs/community/bug/"
  },"138": {
    "doc": "Community",
    "title": "Jekyll Contributor Code of Conduct",
    "content": "As contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities. Read the full code of conduct . ",
    "url": "/docs/community/#jekyll-contributor-code-of-conduct",
    "relUrl": "/docs/community/#jekyll-contributor-code-of-conduct"
  },"139": {
    "doc": "Community",
    "title": "Reporting Security Vulnerabilities",
    "content": "Find something in our codebase that could be exploited by malicious elements? . Consult our Security Policy to see if a product version is considered outdated and how to report the situation responsibly. ",
    "url": "/docs/community/#reporting-security-vulnerabilities",
    "relUrl": "/docs/community/#reporting-security-vulnerabilities"
  },"140": {
    "doc": "Community",
    "title": "Where to get support",
    "content": "If you’re looking for support for Jekyll, there are a lot of options: . | Read the Jekyll Documentation | If you have a question about using Jekyll, start a discussion on the Jekyll Forum or StackOverflow | Chat with Jekyllers — Join our Gitter channel or our IRC channel #jekyll on Libera. | . There are a bunch of helpful community members on these services who are willing to point you in the right direction. Reminder: Jekyll’s issue tracker is not a support forum. ",
    "url": "/docs/community/#where-to-get-support",
    "relUrl": "/docs/community/#where-to-get-support"
  },"141": {
    "doc": "Community",
    "title": "Ways to contribute",
    "content": ". | How to Contribute | How to file a bug | Guide for maintaining Jekyll | . ",
    "url": "/docs/community/#ways-to-contribute",
    "relUrl": "/docs/community/#ways-to-contribute"
  },"142": {
    "doc": "Community",
    "title": "Jekyllconf",
    "content": "Watch videos from members of the Jekyll community speak about interesting use cases, tricks they’ve learned or meta Jekyll topics. ",
    "url": "/docs/community/#jekyllconf",
    "relUrl": "/docs/community/#jekyllconf"
  },"143": {
    "doc": "Community",
    "title": "Jekyll on Twitter",
    "content": "The official Jekyll Twitter account. ",
    "url": "/docs/community/#jekyll-on-twitter",
    "relUrl": "/docs/community/#jekyll-on-twitter"
  },"144": {
    "doc": "Community",
    "title": "Community",
    "content": " ",
    "url": "/docs/community/",
    "relUrl": "/docs/community/"
  },"145": {
    "doc": "Code of Conduct",
    "title": "Our Pledge",
    "content": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. ",
    "url": "/docs/conduct/#our-pledge",
    "relUrl": "/docs/conduct/#our-pledge"
  },"146": {
    "doc": "Code of Conduct",
    "title": "Our Standards",
    "content": "Examples of behavior that contributes to creating a positive environment include: . | Using welcoming and inclusive language | Being respectful of differing viewpoints and experiences | Gracefully accepting constructive criticism | Focusing on what is best for the community | Showing empathy towards other community members | . Examples of unacceptable behavior by participants include: . | The use of sexualized language or imagery and unwelcome sexual attention or advances | Trolling, insulting/derogatory comments, and personal or political attacks | Public or private harassment | Publishing others’ private information, such as a physical or electronic address, without explicit permission | Other conduct which could reasonably be considered inappropriate in a professional setting | . ",
    "url": "/docs/conduct/#our-standards",
    "relUrl": "/docs/conduct/#our-standards"
  },"147": {
    "doc": "Code of Conduct",
    "title": "Our Responsibilities",
    "content": "Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. ",
    "url": "/docs/conduct/#our-responsibilities",
    "relUrl": "/docs/conduct/#our-responsibilities"
  },"148": {
    "doc": "Code of Conduct",
    "title": "Scope",
    "content": "This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. ",
    "url": "/docs/conduct/#scope",
    "relUrl": "/docs/conduct/#scope"
  },"149": {
    "doc": "Code of Conduct",
    "title": "Enforcement",
    "content": "Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at olivia@jekyllrb.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project’s leadership. ",
    "url": "/docs/conduct/#enforcement",
    "relUrl": "/docs/conduct/#enforcement"
  },"150": {
    "doc": "Code of Conduct",
    "title": "Attribution",
    "content": "This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html . For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq . ",
    "url": "/docs/conduct/#attribution",
    "relUrl": "/docs/conduct/#attribution"
  },"151": {
    "doc": "Code of Conduct",
    "title": "Code of Conduct",
    "content": " ",
    "url": "/docs/conduct/",
    "relUrl": "/docs/conduct/"
  },"152": {
    "doc": "Configuration",
    "title": "Configuration",
    "content": "Jekyll gives you a lot of flexibility to customize how it builds your site. These options can either be specified in a _config.yml or _config.toml file placed in your site’s root directory, or can be specified as flags for the jekyll executable in the terminal. | Configuration Options | Default Configuration | Front Matter Defaults | Environments | Markdown Options | Liquid Options | Sass/SCSS Options | Webrick Options | Incremental Regeneration | . ",
    "url": "/docs/configuration/",
    "relUrl": "/docs/configuration/"
  },"153": {
    "doc": "Default Configuration",
    "title": "Default Configuration",
    "content": "Jekyll runs with the following configuration options by default. Alternative settings for these options can be explicitly specified in the configuration file or on the command-line. Be aware of directory paths . In general, make directory path values in configuration keys like plugins_dir relative to the current working directory, not the site source. The sass configuration key is an exception, where values must be relative to the site source. # Where things are source : . destination : ./_site collections_dir : . plugins_dir : _plugins # takes an array of strings and loads plugins in that order layouts_dir : _layouts data_dir : _data includes_dir : _includes sass: sass_dir: _sass collections: posts: output : true # Handling Reading safe : false include : [\".htaccess\"] exclude : [\"Gemfile\", \"Gemfile.lock\", \"node_modules\", \"vendor/bundle/\", \"vendor/cache/\", \"vendor/gems/\", \"vendor/ruby/\"] keep_files : [\".git\", \".svn\"] encoding : \"utf-8\" markdown_ext : \"markdown,mkdown,mkdn,mkd,md\" strict_front_matter : false # Filtering Content show_drafts : null limit_posts : 0 future : false unpublished : false # Plugins whitelist : [] plugins : [] # Conversion markdown : kramdown highlighter : rouge lsi : false excerpt_separator : \"\\n\\n\" incremental : false # Serving detach : false port : 4000 host : 127.0.0.1 baseurl : \"\" # does not include hostname show_dir_listing : false # Outputting permalink : date paginate_path : /page:num timezone : null quiet : false verbose : false defaults : [] liquid: error_mode : warn strict_filters : false strict_variables : false # Markdown Processors kramdown: auto_ids : true entity_output : as_char toc_levels : [1, 2, 3, 4, 5, 6] smart_quotes : lsquo,rsquo,ldquo,rdquo input : GFM hard_wrap : false footnote_nr : 1 show_warnings : false . ",
    "url": "/docs/configuration/default/",
    "relUrl": "/docs/configuration/default/"
  },"154": {
    "doc": "Environments",
    "title": "Environments",
    "content": "In the build (or serve) arguments, you can specify a Jekyll environment and value. The build will then apply this value in any conditional statements in your content. For example, suppose you set this conditional statement in your code: . {% if jekyll.environment == \"production\" %} {% include disqus.html %} {% endif %} . When you build your Jekyll site, the content inside the if statement won’t be run unless you also specify a production environment in the build command, like this: . JEKYLL_ENV=production jekyll build . Specifying an environment value allows you to make certain content available only within specific environments. The default value for JEKYLL_ENV is development. Therefore if you omit JEKYLL_ENV from the build arguments, the default value will be JEKYLL_ENV=development. Any content inside {% if jekyll.environment == \"development\" %} tags will automatically appear in the build. Your environment values can be anything you want (not just development or production). Some elements you might want to hide in development environments include Disqus comment forms or Google Analytics. Conversely, you might want to expose an “Edit me in GitHub” button in a development environment but not include it in production environments. By specifying the option in the build command, you avoid having to change values in your configuration files when moving from one environment to another. To switch part of your config settings depending on the environment, use the build command option, for example --config _config.yml,_config_development.yml. Settings in later files override settings in earlier files. ",
    "url": "/docs/configuration/environments/",
    "relUrl": "/docs/configuration/environments/"
  },"155": {
    "doc": "Front Matter Defaults",
    "title": "Glob patterns in Front Matter defaults",
    "content": "It is also possible to use glob patterns (currently limited to patterns that contain *) when matching defaults. For example, it is possible to set specific layout for each special-page.html in any subfolder of section folder.3.7.0 . collections: my_collection: output: true defaults: - scope: path: \"section/*/special-page.html\" values: layout: \"specific-layout\" . Globbing and Performance . Please note that globbing a path is known to have a negative effect on performance and is currently not optimized, especially on Windows. Globbing a path will increase your build times in proportion to the size of the associated collection directory. ",
    "url": "/docs/configuration/front-matter-defaults/#glob-patterns-in-front-matter-defaults",
    "relUrl": "/docs/configuration/front-matter-defaults/#glob-patterns-in-front-matter-defaults"
  },"156": {
    "doc": "Front Matter Defaults",
    "title": "Precedence",
    "content": "Jekyll will apply all of the configuration settings you specify in the defaults section of your _config.yml file. You can choose to override settings from other scope/values pair by specifying a more specific path for the scope. You can see that in the second to last example above. First, we set the default page layout to my-site. Then, using a more specific path, we set the default layout for pages in the projects/ path to project. This can be done with any value that you would set in the page or post front matter. Finally, if you set defaults in the site configuration by adding a defaults section to your _config.yml file, you can override those settings in a post or page file. All you need to do is specify the settings in the post or page front matter. For example: . # In _config.yml ... defaults: - scope: path: \"projects\" type: \"pages\" values: layout: \"project\" author: \"Mr. Hyde\" category: \"project\" ... # In projects/foo_project.md --- author: \"John Smith\" layout: \"foobar\" --- The post text goes here... The projects/foo_project.md would have the layout set to foobar instead of project and the author set to John Smith instead of Mr. Hyde when the site is built. ",
    "url": "/docs/configuration/front-matter-defaults/#precedence",
    "relUrl": "/docs/configuration/front-matter-defaults/#precedence"
  },"157": {
    "doc": "Front Matter Defaults",
    "title": "Front Matter Defaults",
    "content": "Using front matter is one way that you can specify configuration in the pages and posts for your site. Setting things like a default layout, or customizing the title, or specifying a more precise date/time for the post can all be added to your page or post front matter. Often times, you will find that you are repeating a lot of configuration options. Setting the same layout in each file, adding the same category - or categories - to a post, etc. You can even add custom variables like author names, which might be the same for the majority of posts on your blog. Instead of repeating this configuration each time you create a new post or page, Jekyll provides a way to set these defaults in the site configuration. To do this, you can specify site-wide defaults using the defaults key in the _config.yml file in your project’s root directory. The defaults key holds an array of scope/values pairs that define what defaults should be set for a particular file path, and optionally, a file type in that path. Let’s say that you want to add a default layout to all pages and posts in your site. You would add this to your _config.yml file: . defaults: - scope: path: \"\" # an empty string here means all files in the project values: layout: \"default\" . Stop and rerun `jekyll serve` command. The _config.yml master configuration file contains global configurations and variable definitions that are read once at execution time. Changes made to _config.yml during automatic regeneration are not loaded until the next execution. Note Data Files are included and reloaded during automatic regeneration. Here, we are scoping the values to any file that exists in the path scope. Since the path is set as an empty string, it will apply to all files in your project. You probably don’t want to set a layout on every file in your project - like css files, for example - so you can also specify a type value under the scope key. defaults: - scope: path: \"\" # an empty string here means all files in the project type: \"posts\" # previously `post` in Jekyll 2.2. values: layout: \"default\" . Now, this will only set the layout for files where the type is posts. The different types that are available to you are pages, posts, drafts or any collection in your site. While type is optional, you must specify a value for path when creating a scope/values pair. As mentioned earlier, you can set multiple scope/values pairs for defaults. defaults: - scope: path: \"\" type: \"pages\" values: layout: \"my-site\" - scope: path: \"projects\" type: \"pages\" # previously `page` in Jekyll 2.2. values: layout: \"project\" # overrides previous default layout author: \"Mr. Hyde\" . With these defaults, all pages would use the my-site layout. Any html files that exist in the projects/ folder will use the project layout, if it exists. Those files will also have the page.author liquid variable set to Mr. Hyde. collections: my_collection: output: true defaults: - scope: path: \"\" type: \"my_collection\" # a collection in your site, in plural form values: layout: \"default\" . In this example, the layout is set to default inside the collection with the name my_collection. ",
    "url": "/docs/configuration/front-matter-defaults/",
    "relUrl": "/docs/configuration/front-matter-defaults/"
  },"158": {
    "doc": "Default Configuration",
    "title": "Incremental Regeneration",
    "content": "Incremental regeneration is still an experimental feature . While incremental regeneration will work for the most common cases, it will not work correctly in every scenario. Please be extremely cautious when using the feature, and report any problems not listed below by opening an issue on GitHub. Incremental regeneration helps shorten build times by only generating documents and pages that were updated since the previous build. It does this by keeping track of both file modification times and inter-document dependencies in the .jekyll-metadata file. Under the current implementation, incremental regeneration will only generate a document or page if either it, or one of its dependencies, is modified. Currently, the only types of dependencies tracked are includes (using the {% include %} tag) and layouts. This means that plain references to other documents (for example, the common case of iterating over site.posts in a post listings page) will not be detected as a dependency. To remedy some of these shortfalls, putting regenerate: true in the front-matter of a document will force Jekyll to regenerate it regardless of whether it has been modified. Note that this will generate the specified document only; references to other documents’ contents will not work since they won’t be re-rendered. Incremental regeneration can be enabled via the --incremental flag (-I for short) from the command-line or by setting incremental: true in your configuration file. ",
    "url": "/docs/configuration/incremental-regeneration/#incremental-regeneration",
    "relUrl": "/docs/configuration/incremental-regeneration/#incremental-regeneration"
  },"159": {
    "doc": "Default Configuration",
    "title": "Default Configuration",
    "content": " ",
    "url": "/docs/configuration/incremental-regeneration/",
    "relUrl": "/docs/configuration/incremental-regeneration/"
  },"160": {
    "doc": "Liquid Options",
    "title": "Liquid Options",
    "content": "Liquid’s response to errors can be configured by setting error_mode. The options are . | lax — Ignore all errors. | warn — Output a warning on the console for each error. (default) | strict — Output an error message and stop the build. | . Within _config.yml, the default configuration is as follows: . liquid: error_mode: warn . The above example depicts the “warn” value, which is already set by default- error_mode: warn. This results in any issues being called out during the build process however will continue to build if possible. You can also configure Liquid’s renderer to catch non-assigned variables and non-existing filters by setting strict_variables and / or strict_filters to true respectively. 3.8.0 . Do note that while error_mode configures Liquid’s parser, the strict_variables and strict_filters options configure Liquid’s renderer and are consequently orthogonal. An example of setting these variables within _config.yml is as follows: . liquid: error_mode: strict strict_variables: true strict_filters: true . Configuring as described above will stop your build/serve from happening and call out the offending error and halt. This is helpful when desiring to catch liquid-related issues by stopping the build or serve process and allowing you to deal with any issues. ",
    "url": "/docs/configuration/liquid/",
    "relUrl": "/docs/configuration/liquid/"
  },"161": {
    "doc": "Markdown Options",
    "title": "Kramdown",
    "content": "Kramdown is the default Markdown renderer for Jekyll, and often works well with no additional configuration. However, it does support many configuration options. ",
    "url": "/docs/configuration/markdown/#kramdown",
    "relUrl": "/docs/configuration/markdown/#kramdown"
  },"162": {
    "doc": "Markdown Options",
    "title": "Kramdown Processor",
    "content": "By default, Jekyll uses the GitHub Flavored Markdown (GFM) processor for Kramdown. (Specifying input: GFM is fine, but redundant.) GFM supports a couple additional Kramdown options, documented by kramdown-parser-gfm. These options can be used directly in your Kramdown Jekyll config, like this: . kramdown: gfm_quirks: [paragraph_end] . You can also change the processor used by Kramdown (as specified for the input key in the Kramdown RDoc). For example, to use the non-GFM Kramdown processor in Jekyll, add the following to your configuration. kramdown: input: Kramdown . Documentation for Kramdown parsers is available in the Kramdown docs. If you use a Kramdown parser other than Kramdown or GFM, you’ll need to add the gem for it. ",
    "url": "/docs/configuration/markdown/#kramdown-processor",
    "relUrl": "/docs/configuration/markdown/#kramdown-processor"
  },"163": {
    "doc": "Markdown Options",
    "title": "Syntax Highlighting (CodeRay)",
    "content": "To use the CodeRay syntax highlighter with Kramdown, you need to add a dependency on the kramdown-syntax-coderay gem. For example, bundle add kramdown-syntax-coderay. Then, you’ll be able to specify CodeRay in your syntax_highlighter config: . kramdown: syntax_highlighter: coderay . CodeRay supports several of its own configuration options, documented in the kramdown-syntax-coderay docs which can be passed as syntax_highlighter_opts like this: . kramdown: syntax_highlighter: coderay syntax_highlighter_opts: line_numbers: table bold_every: 5 . ",
    "url": "/docs/configuration/markdown/#syntax-highlighting-coderay",
    "relUrl": "/docs/configuration/markdown/#syntax-highlighting-coderay"
  },"164": {
    "doc": "Markdown Options",
    "title": "Advanced Kramdown Options",
    "content": "Kramdown supports a variety of other relatively advanced options such as header_offset and smart_quotes. These are documented in the Kramdown configuration documentation and can be added to your Kramdown config like this: . kramdown: header_offset: 2 . There are several unsupported kramdown options . Please note that Jekyll uses Kramdown's HTML converter. Kramdown options used only by other converters, such as remove_block_html_tags (used by the RemoveHtmlTags converter), will not work. ",
    "url": "/docs/configuration/markdown/#advanced-kramdown-options",
    "relUrl": "/docs/configuration/markdown/#advanced-kramdown-options"
  },"165": {
    "doc": "Markdown Options",
    "title": "CommonMark",
    "content": "CommonMark is a rationalized version of Markdown syntax, implemented in C and thus faster than default Kramdown implemented in Ruby. It slightly differs from original Markdown and does not support all the syntax elements implemented in Kramdown, like Block Inline Attribute Lists. It comes in two flavors: basic CommonMark with jekyll-commonmark plugin and GitHub Flavored Markdown supported by GitHub Pages. ",
    "url": "/docs/configuration/markdown/#commonmark",
    "relUrl": "/docs/configuration/markdown/#commonmark"
  },"166": {
    "doc": "Markdown Options",
    "title": "Custom Markdown Processors",
    "content": "If you’re interested in creating a custom markdown processor, you’re in luck! Create a new class in the Jekyll::Converters::Markdown namespace: . class Jekyll::Converters::Markdown::MyCustomProcessor def initialize(config) require 'funky_markdown' @config = config rescue LoadError STDERR.puts 'You are missing a library required for Markdown. Please run:' STDERR.puts ' $ [sudo] gem install funky_markdown' raise FatalException.new(\"Missing dependency: funky_markdown\") end def convert(content) ::FunkyMarkdown.new(content).convert end end . Once you’ve created your class and have it properly set up either as a plugin in the _plugins folder or as a gem, specify it in your _config.yml: . markdown: MyCustomProcessor . ",
    "url": "/docs/configuration/markdown/#custom-markdown-processors",
    "relUrl": "/docs/configuration/markdown/#custom-markdown-processors"
  },"167": {
    "doc": "Markdown Options",
    "title": "Markdown Options",
    "content": "The various Markdown renderers supported by Jekyll sometimes have extra options available. ",
    "url": "/docs/configuration/markdown/",
    "relUrl": "/docs/configuration/markdown/"
  },"168": {
    "doc": "Configuration Options",
    "title": "Global Configuration",
    "content": "| Setting | Options and Flags | . | Site source . Change the directory where Jekyll will read files . | source: DIR . -s, --source DIR . | . | Site destination . Change the directory where Jekyll will write files . | destination: DIR . -d, --destination DIR . | . | Safe . Disable non-whitelisted plugins, caching to disk, and ignore symbolic links. | safe: BOOL . --safe . | . | Disable disk cache 4.1.0 . Disable caching of content to disk in order to skip creating a .jekyll-cache or similar directory at the source to avoid interference with virtual environments and third-party directory watchers. Caching to disk is always disabled in safe mode. | disable_disk_cache: BOOL . --disable-disk-cache . | . | Ignore theme configuration 4.1.0 . Jekyll 4.0 started allowing themes to bundle a _config.yml to simplify theme-onboarding for new users. In the unfortunate situation that importing a bundled theme configuration messes up the merged site-configuration, the user can configure Jekyll to not import the theme-config entirely. | ignore_theme_config: BOOL . | . | Exclude . Exclude directories and/or files from the conversion. These exclusions are relative to the site's source directory and cannot be outside the source directory. | exclude: [DIR, FILE, ...] . | . | Include . Force inclusion of directories and/or files in the conversion.htaccess is a good example since dotfiles are excluded by default. | include: [DIR, FILE, ...] . | . | Keep files . When clobbering the site destination, keep the selected files. Useful for files that are not generated by jekyll; e.g. files or assets that are generated by your build tool. The paths are relative to the destination. | keep_files: [DIR, FILE, ...] . | . | Time zone . Set the time zone for site generation. This sets the TZ environment variable, which Ruby uses to handle time and date creation and manipulation. Any entry from the IANA Time Zone Database is valid, e.g. America/New_York. A list of all available values can be found here. When serving on a local machine, the default time zone is set by your operating system. But when served on a remote host/server, the default time zone depends on the server's setting or location. | timezone: TIMEZONE . | . | Encoding . Set the encoding of files by name (only available for Ruby 1.9 or later). The default value is utf-8 starting in 2.0.0, and nil before 2.0.0, which will yield the Ruby default of ASCII-8BIT. Available encodings can be shown by the command ruby -e 'puts Encoding::list.join(\"\\n\")'. | encoding: ENCODING . | . | Defaults . Set defaults for front matter variables. | see below . | . Destination folders are cleaned on site builds . The contents of &lt;destination&gt; are automatically cleaned, by default, when the site is built. Files or folders that are not created by your site will be removed. Some files could be retained by specifying them within the &lt;keep_files&gt; configuration directive. Do not use an important location for &lt;destination&gt;; instead, use it as a staging area and copy files from there to your web server. ",
    "url": "/docs/configuration/options/#global-configuration",
    "relUrl": "/docs/configuration/options/#global-configuration"
  },"169": {
    "doc": "Configuration Options",
    "title": "Build Command Options",
    "content": "| Setting | Options and Flags | . | Regeneration . Enable auto-regeneration of the site when files are modified. | -w, --[no-]watch . | . | Configuration . Specify config files instead of using _config.yml automatically. Settings in later files override settings in earlier files. | --config FILE1[,FILE2,...] . | . | Plugins . Specify plugin directories instead of using _plugins/ automatically. | plugins_dir: [ DIR1,... ] . -p, --plugins DIR1[,DIR2,...] . | . | Layouts . Specify layout directory instead of using _layouts/ automatically. | layouts_dir: DIR . --layouts DIR . | . | Drafts . Process and render draft posts. | show_drafts: BOOL . -D, --drafts . | . | Environment . Use a specific environment value in the build. | JEKYLL_ENV=production . | . | Future . Publish posts or collection documents with a future date. | future: BOOL . --future . | . | Unpublished . Render posts that were marked as unpublished. | unpublished: BOOL . --unpublished . | . | LSI . Produce an index for related posts. Requires the classifier-reborn plugin. | lsi: BOOL . --lsi . | . | Limit posts . Limit the number of posts to parse and publish. | limit_posts: NUM . --limit_posts NUM . | . | Force polling . Force watch to use polling. | force_polling: BOOL . --force_polling . | . | Verbose output . Print verbose output. | verbose: BOOL . -V, --verbose . | . | Silence output . Silence the normal output from Jekyll during a build. | quiet: BOOL . -q, --quiet . | . | Log level . Specify a log level among debug, info, warn, or error. | JEKYLL_LOG_LEVEL=info . | . | Incremental build . Enable the experimental incremental build feature. Incremental build only re-builds posts and pages that have changed, resulting in significant performance improvements for large sites, but may also break site generation in certain cases. | incremental: BOOL . -I, --incremental . | . | Disable bundle require . Disables the need to require gems in `:jekyll_plugins` Gemfile . | JEKYLL_NO_BUNDLER_REQUIRE=true . | . | Liquid profiler . Generate a Liquid rendering profile to help you identify performance bottlenecks. | profile: BOOL . --profile . | . | Strict front matter . Cause a build to fail if there is a YAML syntax error in a page's front matter. | strict_front_matter: BOOL . --strict_front_matter . | . | Base URL . Serve the website from the given base URL. | baseurl: URL . -b, --baseurl URL . | . | Trace . Show the full backtrace when an error occurs. | -t, --trace . | . ",
    "url": "/docs/configuration/options/#build-command-options",
    "relUrl": "/docs/configuration/options/#build-command-options"
  },"170": {
    "doc": "Configuration Options",
    "title": "Serve Command Options",
    "content": "In addition to the options below, the serve sub-command can accept any of the options for the build sub-command, which are then applied to the site build which occurs right before your site is served. | Setting | Options and Flags | . | Local server port . Listen on the given port. The default is `4000`. | port: PORT . -P, --port PORT . | . | Local server hostname . Listen at the given hostname. The default is `localhost`. | host: HOSTNAME . -H, --host HOSTNAME . | . | Live reload . Reload a page automatically on the browser when its content is edited. | livereload: BOOL . -l, --livereload . | . | Live reload ignore . File glob patterns for LiveReload to ignore. | livereload_ignore: [ GLOB1,... ] . --livereload-ignore GLOB1[,GLOB2,...] . | . | Live reload min/max delay . Minimum/Maximum delay before automatically reloading page. | livereload_min_delay: SECONDS livereload_max_delay: SECONDS . --livereload-min-delay SECONDS --livereload-max-delay SECONDS . | . | Live reload port . Port for LiveReload to listen on. | --livereload-port PORT . | . | Open URL . Open the site's URL in the browser. | open_url: BOOL . -o, --open-url . | . | Detach . Detach the server from the terminal. | detach: BOOL . -B, --detach . | . | Skips the initial site build . Skips the initial site build which occurs before the server is started. | skip_initial_build: BOOL . --skip-initial-build . | . | Show directory listing . Show a directory listing instead of loading your index file. | show_dir_listing: BOOL . --show-dir-listing . | . | X.509 (SSL) private key . SSL Private Key, stored or symlinked in the site source. | --ssl-key . | . | X.509 (SSL) certificate . SSL Public certificate, stored or symlinked in the site source. | --ssl-cert . | . Do not use tabs in configuration files . This will either lead to parsing errors, or Jekyll will revert to the default settings. Use spaces instead. ",
    "url": "/docs/configuration/options/#serve-command-options",
    "relUrl": "/docs/configuration/options/#serve-command-options"
  },"171": {
    "doc": "Configuration Options",
    "title": "Configuration Options",
    "content": "The tables below list the available settings for Jekyll, and the various options (specified in the configuration file) and flags (specified on the command-line) that control them. ",
    "url": "/docs/configuration/options/",
    "relUrl": "/docs/configuration/options/"
  },"172": {
    "doc": "Sass/SCSS Options",
    "title": "Sass/SCSS Options",
    "content": "Jekyll comes bundled with jekyll-sass-converter plugin. By default, Jekyll will look for Sass partials in the _sass directory relative to your site’s source directory. You can further configure the plugin by adding options to your Jekyll config under the sass attribute. See the plugin’s documentation for details and for its default values. Note that directory paths specified in the sass configuration are resolved relative to your site's source, not relative to the location of the _config.yml file. ",
    "url": "/docs/configuration/sass/",
    "relUrl": "/docs/configuration/sass/"
  },"173": {
    "doc": "WEBrick Options",
    "title": "Defaults",
    "content": "Jekyll provides by default Content-Type and Cache-Control response headers: one dynamic in order to specify the nature of the data being served, the other static in order to disable caching so that you don’t have to fight with Chrome’s aggressive caching when you are in development mode. ",
    "url": "/docs/configuration/webrick/#defaults",
    "relUrl": "/docs/configuration/webrick/#defaults"
  },"174": {
    "doc": "WEBrick Options",
    "title": "WEBrick Options",
    "content": "You can provide custom headers for your site by adding them to _config.yml . # File: _config.yml webrick: headers: My-Header: My-Value My-Other-Header: My-Other-Value . ",
    "url": "/docs/configuration/webrick/",
    "relUrl": "/docs/configuration/webrick/"
  },"175": {
    "doc": "Buddy",
    "title": "1. Getting started",
    "content": ". | Log in at https://buddy.works with your GitHub/Bitbucket account or email | Choose your Git provider and select or push your Jekyll Project | Create a new pipeline and set the trigger mode to ‘On every push’ | Add and configure the Jekyll action and save the pipeline | . ",
    "url": "/docs/continuous-integration/buddyworks/#1-getting-started",
    "relUrl": "/docs/continuous-integration/buddyworks/#1-getting-started"
  },"176": {
    "doc": "Buddy",
    "title": "2. How it works",
    "content": "Whenever you make a push to the selected branch, the Jekyll action runs jekyll build in an isolated Jekyll Docker image. The output is generated to the /filesystem directory, and can be further deployed to FTP/SFTP and IaaS services. You can add your own commands, install additional packages, attach services, and run Selenium tests, as well as add other actions down the pipeline, eg. a Slack notification or an SSH script that will restart your server. ",
    "url": "/docs/continuous-integration/buddyworks/#2-how-it-works",
    "relUrl": "/docs/continuous-integration/buddyworks/#2-how-it-works"
  },"177": {
    "doc": "Buddy",
    "title": "3. Using YAML for configuration",
    "content": "If you prefer configuration as code over GUI, you can generate a buddy.yml that will create a pipeline with the Jekyll action once you push it to the target branch: . - pipeline: \"Build and Deploy Jekyll site\" trigger_mode: \"ON_EVERY_PUSH\" ref_name: \"master\" actions: - action: \"Execute: jekyll build\" type: \"BUILD\" docker_image_name: \"jekyll/jekyll\" docker_image_tag: \"latest\" execute_commands: - \"chown jekyll:jekyll $WORKING_DIR\" - \"jekyll build\" . ",
    "url": "/docs/continuous-integration/buddyworks/#3-using-yaml-for-configuration",
    "relUrl": "/docs/continuous-integration/buddyworks/#3-using-yaml-for-configuration"
  },"178": {
    "doc": "Buddy",
    "title": "4. Setting up on-premises server",
    "content": "The self-hosted version of Buddy can be installed on any type of server supporting Docker, including Linux, Mac, AWS EC2, DigitalOcean, and Microsoft Azure. ",
    "url": "/docs/continuous-integration/buddyworks/#4-setting-up-on-premises-server",
    "relUrl": "/docs/continuous-integration/buddyworks/#4-setting-up-on-premises-server"
  },"179": {
    "doc": "Buddy",
    "title": "5. Questions?",
    "content": "This entire guide is open-source. Go ahead and edit it if you want to expand it or have a fix or ask for help if you run into trouble and need assistance. Buddy also has an online community for help. ",
    "url": "/docs/continuous-integration/buddyworks/#5-questions",
    "relUrl": "/docs/continuous-integration/buddyworks/#5-questions"
  },"180": {
    "doc": "Buddy",
    "title": "Buddy",
    "content": "Buddy is a Docker-based CI server that you can set up in 15-20 minutes to build, test, and deploy your Jekyll websites. It supports GitHub, Bitbucket, and GitLab repositories, and can be installed on-premises or used in cloud. The following guide will show you how to set up a free environment to build and test your Jekyll project. ",
    "url": "/docs/continuous-integration/buddyworks/",
    "relUrl": "/docs/continuous-integration/buddyworks/"
  },"181": {
    "doc": "CircleCI",
    "title": "1. Follow Your Project on CircleCI",
    "content": "To start building your project on CircleCI, all you need to do is ‘follow’ your project from CircleCI’s website: . | Visit the ‘Add Projects’ page | From the GitHub or Bitbucket tab on the left, choose a user or organization. | Find your project in the list and click ‘Build project’ on the right. | The first build will start on its own. You can start telling CircleCI how to build your project by creating a .circleci/config.yml file in the root of your repository. | . ",
    "url": "/docs/continuous-integration/circleci/#1-follow-your-project-on-circleci",
    "relUrl": "/docs/continuous-integration/circleci/#1-follow-your-project-on-circleci"
  },"182": {
    "doc": "CircleCI",
    "title": "2. Dependencies",
    "content": "The easiest way to manage dependencies for a Jekyll project (with or without CircleCI) is via a Gemfile. You’d want to have Jekyll, any Jekyll plugins, HTML Proofer, and any other gems that you are using in the Gemfile. Don’t forget to version Gemfile.lock as well. Here’s an example Gemfile: . source 'https://rubygems.org' ruby '2.7.4' gem 'jekyll' gem 'html-proofer' . - step: run: bundle install . ",
    "url": "/docs/continuous-integration/circleci/#2-dependencies",
    "relUrl": "/docs/continuous-integration/circleci/#2-dependencies"
  },"183": {
    "doc": "CircleCI",
    "title": "3. Testing",
    "content": "The most basic test that can be run is seeing if jekyll build actually works. This is a blocker, a dependency if you will, for other tests you might run on the generate site. So we’ll run Jekyll, via Bundler, in the dependencies phase. - step: run: bundle exec jekyll build . ",
    "url": "/docs/continuous-integration/circleci/#3-testing",
    "relUrl": "/docs/continuous-integration/circleci/#3-testing"
  },"184": {
    "doc": "CircleCI",
    "title": "HTML Proofer",
    "content": "With your site built, it’s useful to run tests to check for valid HTML, broken links, etc. There’s a few tools out there but HTML Proofer is popular amongst Jekyll users. We’ll run it in the test phase with a few preferred flags. Check out the html-proofer README for all available flags, or run htmlproofer --help locally. - step: run: bundle exec htmlproofer ./_site --check-html --disable-external . ",
    "url": "/docs/continuous-integration/circleci/#html-proofer",
    "relUrl": "/docs/continuous-integration/circleci/#html-proofer"
  },"185": {
    "doc": "CircleCI",
    "title": "Complete Example .circleci/config.yml File",
    "content": "The example .circleci/config.yml below demonstrates how to deploy your Jekyll project to AWS. In order for this to work you would first have to set the S3_BUCKET_NAME environment variable. workflows: test-deploy: jobs: - build - deploy: requires: - build filters: branches: only: master version: 2.1 jobs: build: docker: - image: cimg/ruby:2.7.4 environment: BUNDLE_PATH: ~/repo/vendor/bundle steps: - checkout - restore_cache: keys: - rubygems-v1-{{ checksum \"Gemfile.lock\" }} - rubygems-v1-fallback - run: name: Bundle Install command: bundle check || bundle install - save_cache: key: rubygems-v1-{{ checksum \"Gemfile.lock\" }} paths: - vendor/bundle - run: name: Jekyll build command: bundle exec jekyll build - run: name: HTMLProofer tests command: | bundle exec htmlproofer ./_site \\ --allow-hash-href \\ --check-favicon \\ --check-html \\ --disable-external - persist_to_workspace: root: ./ paths: - _site deploy: docker: - image: cimg/python:3.9.1 environment: S3_BUCKET_NAME: &lt;&lt;YOUR BUCKET NAME HERE&gt;&gt; steps: - attach_workspace: at: ./ - run: name: Install AWS CLI command: pip install awscli --upgrade --user - run: name: Upload to s3 command: ~/.local/bin/aws s3 sync ./_site s3://$S3_BUCKET_NAME/ --delete --acl public-read . ",
    "url": "/docs/continuous-integration/circleci/#complete-example-circleciconfigyml-file",
    "relUrl": "/docs/continuous-integration/circleci/#complete-example-circleciconfigyml-file"
  },"186": {
    "doc": "CircleCI",
    "title": "Questions?",
    "content": "This entire guide is open-source. Go ahead and edit it if you have a fix or ask for help if you run into trouble and need some help. CircleCI also has an online community for help. ",
    "url": "/docs/continuous-integration/circleci/#questions",
    "relUrl": "/docs/continuous-integration/circleci/#questions"
  },"187": {
    "doc": "CircleCI",
    "title": "CircleCI",
    "content": "Building, testing, and deploying your Jekyll-generated website can quickly be done with CircleCI, a continuous integration &amp; delivery tool. CircleCI supports GitHub and Bitbucket, and you can get started for free using an open-source or private repository. ",
    "url": "/docs/continuous-integration/circleci/",
    "relUrl": "/docs/continuous-integration/circleci/"
  },"188": {
    "doc": "GitHub Actions",
    "title": "Advantages of using Actions",
    "content": " ",
    "url": "/docs/continuous-integration/github-actions/#advantages-of-using-actions",
    "relUrl": "/docs/continuous-integration/github-actions/#advantages-of-using-actions"
  },"189": {
    "doc": "GitHub Actions",
    "title": "Control over gemset",
    "content": ". | Jekyll version — Instead of using the currently enabled version at 3.9.0, you can use any version of Jekyll you want. For example 4.2.2, or point directly to the repository. | Plugins — You can use any Jekyll plugins irrespective of them being on the supported versions list, even *.rb files placed in the _plugins directory of your site. | Themes — While using a custom theme is possible without Actions, it is now simpler. | . ",
    "url": "/docs/continuous-integration/github-actions/#control-over-gemset",
    "relUrl": "/docs/continuous-integration/github-actions/#control-over-gemset"
  },"190": {
    "doc": "GitHub Actions",
    "title": "Workflow Management",
    "content": ". | Customization — By creating a workflow file to run Actions, you can specify custom build steps, use environment variables. | Logging — The build log is visible and can be tweaked to be verbose, so it is much easier to debug errors using Actions. | . ",
    "url": "/docs/continuous-integration/github-actions/#workflow-management",
    "relUrl": "/docs/continuous-integration/github-actions/#workflow-management"
  },"191": {
    "doc": "GitHub Actions",
    "title": "Workspace setup",
    "content": "The first and foremost requirement is a Jekyll project hosted at GitHub. Choose an existing Jekyll project or follow the quickstart and push the repository to GitHub if it is not hosted there already. We’re only going to cover builds from the main branch in this page. Therefore, ensure that you are working on the main branch. If necessary, you may create it based on your default branch. When the Action builds your site, the contents of the destination directory will be automatically pushed to the gh-pages branch with a commit, ready to be used for serving. The Action we’re using here will create (or reset an existing) gh-pages branch on every successful deploy. So, if you have an existing gh-pages branch that is used to deploy your production build, ensure to make a backup of the contents into a different branch so that you can rollback easily if necessary. The Jekyll site we’ll be using for the rest of this page initially consists of just a _config.yml, an index.md page and a Gemfile. The contents are respectively: . # _config.yml title: \"Jekyll Actions Demo\" . --- --- Welcome to My Home Page {% assign date = '2020-04-13T10:20:00Z' %} - Original date - {{ date }} - With timeago filter - {{ date | timeago }} . # Gemfile source 'https://rubygems.org' gem 'jekyll', '~&gt; 4.2' group :jekyll_plugins do gem 'jekyll-timeago', '~&gt; 0.13.1' end . The demo site uses Jekyll 4 and a third-party plugin, both of which are currently not whitelisted for use on GitHub pages. The plugin will allow us to describe how far back a date was from today. e.g. If we give a date as 2016-03-23T10:20:00Z and the current date is 2020-04-13T10:20:00Z, then the output would be 4 years and 3 weeks ago. The action we’re using takes care of installing the Ruby gems and dependencies. While that keeps the setup simple for the user, one may encounter issues if they also check-in Gemfile.lock if it was generated with an old version of Bundler. ",
    "url": "/docs/continuous-integration/github-actions/#workspace-setup",
    "relUrl": "/docs/continuous-integration/github-actions/#workspace-setup"
  },"192": {
    "doc": "GitHub Actions",
    "title": "Setting up the Action",
    "content": "GitHub Actions are registered for a repository by using a YAML file inside the directory path .github/workflows (note the dot at the start). For simplicity, here we use one of the Jekyll Actions to show you how to use the action. Create a workflow file, say github-pages.yml, using either the GitHub interface or by pushing a YAML file to the workflow directory path manually. The base contents are: . name: Build and deploy Jekyll site to GitHub Pages on: push: branches: - main # or master before October 2020 jobs: github-pages: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/cache@v2 with: path: vendor/bundle key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile') }} restore-keys: | ${{ runner.os }}-gems- - uses: helaili/jekyll-action@2.0.5 # Choose any one of the Jekyll Actions with: # Some relative inputs of your action token: ${{ secrets.GITHUB_TOKEN }} . The above workflow can be explained as the following: . | We trigger the build using on.push condition for main branch only — this prevents the Action from overwriting the gh-pages branch on any feature branch pushes. | The name of the job matches our YAML filename: github-pages. | The checkout action takes care of cloning your repository. | The cache action is an optimization to avoid fetching and installing gems on every build. | We specify our selected action and version number using helaili/jekyll-action@2.0.5, this handles the build and deploy. You can choose any one of the Jekyll Actions that matches your project and flavor from GitHub Marketplace. | We set a reference to a secret environment variable for the action to use. The GITHUB_TOKEN is a secret token automatically initialized at the start of every workflow run. More information can be found in GitHub documentation. | . Instead of using the on.push condition, you could trigger your build on a schedule by using the on.schedule parameter. For example, here we build daily at midnight by specifying cron syntax, which can be tested at the crontab guru site. on: schedule: - cron: \"0 0 * * *\" . Note that this string must be quoted to prevent the asterisks from being evaluated incorrectly. ",
    "url": "/docs/continuous-integration/github-actions/#setting-up-the-action",
    "relUrl": "/docs/continuous-integration/github-actions/#setting-up-the-action"
  },"193": {
    "doc": "GitHub Actions",
    "title": "Providing permissions",
    "content": "At the start of each workflow run, GitHub automatically creates a unique GITHUB_TOKEN secret to use in your workflow. You can use the GITHUB_TOKEN to authenticate in a workflow run. You can use the GITHUB_TOKEN by using the standard syntax for referencing secrets: $. For more information, please read GitHub’s docs on token authentication . If you need a token that requires permissions that aren’t available in the GITHUB_TOKEN, you can create a Personal Access Token (PAT), and set it as a secret in your repository for this action to push to the gh-pages branch: . | On your GitHub profile, under Developer Settings, go to the Personal Access Tokens section. | Create a token. Give it a name like “GitHub Actions” and ensure it has permissions to public_repos (or the entire repo scope for private repository) — necessary for the action to commit to the gh-pages branch. | Copy the token value. | Go to your repository’s Settings and then the Secrets tab. | Create a token named YOUR_CUSTOM_TOKEN (important). Give it a value using the value copied above. | . ",
    "url": "/docs/continuous-integration/github-actions/#providing-permissions",
    "relUrl": "/docs/continuous-integration/github-actions/#providing-permissions"
  },"194": {
    "doc": "GitHub Actions",
    "title": "Build and deploy",
    "content": "On pushing any local changes onto main, the action will be triggered and the build will start. To watch the progress and see any build errors, check on the build status using one of the following approaches: . | View by commit . | Go to the repository level view in GitHub. Under the most recent commit (near the top) you’ll see a status symbol next to the commit message as a tick or X. Hover over it and click the details link. | . | Actions tab . | Go to the repository’s Actions tab. Click on the jekyll workflow tab. | . | . If all goes well, all steps will be green and the built assets will now exist on the gh-pages branch. On a successful build, GitHub Pages will publish the site stored on the repository gh-pages branches. Note that you do not need to setup a gh-pages branch or enable GitHub Pages, as the action will take care of this for you. (For private repositories, you’ll have to upgrade to a paid plan). To see the live site: . | Go to the environment tab on your repository. | Click View Deployment to see the deployed site URL. | View your site at the URL. Make sure the timeago filter works as expected. | Optionally add this URL to your repository’s main page and to your README.md, to make it easy for people to find. | . When you need to make further changes to the site, commit to master and push. The workflow will build and deploy your site again. Be sure not to edit the gh-pages branch directly, as any changes will be lost on the next successful deploy from the Action. ",
    "url": "/docs/continuous-integration/github-actions/#build-and-deploy",
    "relUrl": "/docs/continuous-integration/github-actions/#build-and-deploy"
  },"195": {
    "doc": "GitHub Actions",
    "title": "External links",
    "content": ". | jekyll-actions is an action available on the GitHub Marketplace and was used in this guide. | jekyll-actions-quickstart is an unofficial repository that includes a live demo of the jekyll-actions action. That project can be used as a template for making a new site. | jekyll-action-ts is another action to build and publish Jekyll sites on GiHub Pages that includes HTML formatting options with Prettier and caching. | jekyll-deploy-action is a GitHub Action to deploy the Jekyll site conveniently for GitHub Pages (An alternative action with better speed and compatibility). | . ",
    "url": "/docs/continuous-integration/github-actions/#external-links",
    "relUrl": "/docs/continuous-integration/github-actions/#external-links"
  },"196": {
    "doc": "GitHub Actions",
    "title": "GitHub Actions",
    "content": "When building a Jekyll site with GitHub Pages, the standard flow is restricted for security reasons and to make it simpler to get a site setup. For more control over the build and still host the site with GitHub Pages you can use GitHub Actions. ",
    "url": "/docs/continuous-integration/github-actions/",
    "relUrl": "/docs/continuous-integration/github-actions/"
  },"197": {
    "doc": "Razorops",
    "title": "1. Getting started",
    "content": ". | Log in at https://razorops.com/ with your GitHub/Bitbucket or Gitlab account | Create a pipeline, choose your Git provider and select your Jekyll Project | Add .razorops.yaml file in your root directory of your project | Add environment var and your deployment is ready | Add build and deployment steps as shown in this post How to Deploy a Static Website to AWS S3 with Razorops CI/CD | . ",
    "url": "/docs/continuous-integration/razorops/#1-getting-started",
    "relUrl": "/docs/continuous-integration/razorops/#1-getting-started"
  },"198": {
    "doc": "Razorops",
    "title": "2. How it works",
    "content": "Whenever you make a push to the selected branch, your steps auto runs as defined in .razorops.yaml file . tasks: build-and-deploy: steps: - checkout # commands to build jekyll website - commands: - bundle install - JEKYLL_ENV=production bundle exec jekyll build # Commands to upload static pages folder to AWS S3 or ftp # Set AWS access key &amp; secrets environment variables under # Razorops dashboard project pipelines - commands: - aws s3 rm s3://$AWS_S3_BUCKET --recursive - aws s3 cp _site s3://$AWS_S3_BUCKET --recursive if: branch == 'main' . Build step generates _site folder as Jekyll default and during deploy you will able to ship code to s3 or any ftp server you can define any command to ship your website code to server. Razorops is FREE for opensource projects, Try it Now https://razorops.com/ . ",
    "url": "/docs/continuous-integration/razorops/#2-how-it-works",
    "relUrl": "/docs/continuous-integration/razorops/#2-how-it-works"
  },"199": {
    "doc": "Razorops",
    "title": "Razorops",
    "content": "Razorops is a complete container native CI/CD solution handling all aspects of the software lifecycle from the moment a commit is created until it is deployed to production. Razorops has all the capabilities that you would expect from a CI/CD platform such as . | Code compilation/build | Artifact packaging | Testing Automation(unit, integration, acceptance etc.) | Faster builds and shipping to production | . Razorops is a single solution that implements the whole pipeline from start to deployment. With Razorops you can set up your Jekyll websites project’s build, test, and deploy steps just in 15 min. It supports GitHub, Bitbucket, and GitLab repositories. The following guide will show you how to set up a free environment to build, test and deploy your Jekyll project. ",
    "url": "/docs/continuous-integration/razorops/",
    "relUrl": "/docs/continuous-integration/razorops/"
  },"200": {
    "doc": "Travis CI",
    "title": "1. Enabling Travis and GitHub",
    "content": "To enable Travis builds for your GitHub repository: . | Go to your profile on travis-ci.org: https://travis-ci.org/profile/username | Find the repository for which you’re interested in enabling builds. | Flick the repository switch on so that it turns blue. | Optionally configure the build by clicking on the gear icon. Further configuration happens via your .travis.yml file. More details below. | . ",
    "url": "/docs/continuous-integration/travis-ci/#1-enabling-travis-and-github",
    "relUrl": "/docs/continuous-integration/travis-ci/#1-enabling-travis-and-github"
  },"201": {
    "doc": "Travis CI",
    "title": "2. The Test Script",
    "content": "The simplest test script runs jekyll build and ensures that Jekyll doesn’t fail to build the site. It doesn’t check the resulting site, but it does ensure things are built properly. When testing Jekyll output, there is no better tool than html-proofer. This tool checks your resulting site to ensure all links and images exist. Utilize it either with the convenient htmlproofer command-line executable, or write a Ruby script which utilizes the gem. Save the commands you want to run and succeed in a file: ./script/cibuild . ",
    "url": "/docs/continuous-integration/travis-ci/#2-the-test-script",
    "relUrl": "/docs/continuous-integration/travis-ci/#2-the-test-script"
  },"202": {
    "doc": "Travis CI",
    "title": "The HTML Proofer Executable",
    "content": "#!/usr/bin/env bash set -e # halt script on error bundle exec jekyll build bundle exec htmlproofer ./_site . Some options can be specified via command-line switches. Check out the html-proofer README for more information about these switches, or run htmlproofer --help locally. For example to avoid testing external sites, use this command: . bundle exec htmlproofer ./_site --disable-external . ",
    "url": "/docs/continuous-integration/travis-ci/#the-html-proofer-executable",
    "relUrl": "/docs/continuous-integration/travis-ci/#the-html-proofer-executable"
  },"203": {
    "doc": "Travis CI",
    "title": "The HTML Proofer Library",
    "content": "You can also invoke html-proofer in Ruby scripts (e.g. in a Rakefile): . #!/usr/bin/env ruby require 'html-proofer' HTMLProofer.check_directory(\"./_site\").run . Options are given as a second argument to .new, and are encoded in a symbol-keyed Ruby Hash. For more information about the configuration options, check out html-proofer’s README file. ",
    "url": "/docs/continuous-integration/travis-ci/#the-html-proofer-library",
    "relUrl": "/docs/continuous-integration/travis-ci/#the-html-proofer-library"
  },"204": {
    "doc": "Travis CI",
    "title": "3. Configuring Your Travis Builds",
    "content": "This file is used to configure your Travis builds. Because Jekyll is built with Ruby and requires RubyGems to install, we use the Ruby language build environment. Below is a sample .travis.yml file, followed by an explanation of each line. Note: You will need a Gemfile as well, Travis will automatically install the dependencies based on the referenced gems. Here is an example Gemfile with two referenced gems, “jekyll” and “html-proofer”: . source \"https://rubygems.org\" gem \"jekyll\" gem \"html-proofer\" . Your .travis.yml file should look like this: . language: ruby rvm: - 2.6.3 before_script: - chmod +x ./script/cibuild # or do this locally and commit # Assume bundler is being used, therefore # the `install` step will run `bundle install` by default. script: ./script/cibuild # branch whitelist, only for GitHub Pages branches: only: - gh-pages # test the gh-pages branch - /pages-(.*)/ # test every branch which starts with \"pages-\" addons: apt: packages: - libcurl4-openssl-dev cache: bundler # caching bundler gem packages will speed up build # Optional: disable email notifications about the outcome of your builds notifications: email: false . Ok, now for an explanation of each line: . language: ruby . This line tells Travis to use a Ruby build container. It gives your script access to Bundler, RubyGems, and a Ruby runtime. rvm: - 2.6.3 . RVM is a popular Ruby Version Manager (like rbenv, chruby, etc). This directive tells Travis the Ruby version to use when running your test script. Use a version which is pre-installed on the Travis build docker image to speed up the build. before_script: - chmod +x ./script/cibuild . The build script file needs to have the executable attribute set or Travis will fail with a permission denied error. You can also run this locally and commit the permissions directly, thus rendering this step irrelevant. script: ./script/cibuild . Travis allows you to run any arbitrary shell script to test your site. One convention is to put all scripts for your project in the script directory, and to call your test script cibuild. This line is completely customizable. If your script won’t change much, you can write your test incantation here directly: . install: gem install jekyll html-proofer script: jekyll build &amp;&amp; htmlproofer ./_site . The script directive can be absolutely any valid shell command. # branch whitelist, only for GitHub Pages branches: only: - gh-pages # test the gh-pages branch - /pages-(.*)/ # test every branch which starts with \"pages-\" . You want to ensure the Travis builds for your site are being run only on the branch or branches which contain your site. One means of ensuring this isolation is including a branch whitelist in your Travis configuration file. By specifying the gh-pages branch, you will ensure the associated test script (discussed above) is only executed on site branches. If you use a pull request flow for proposing changes, you may wish to enforce a convention for your builds such that all branches containing edits are prefixed, exemplified above with the /pages-(.*)/ regular expression. The branches directive is completely optional. Travis will build from every push to any branch of your repo if leave it out. Be sure to exclude vendor from your _config.yml . Travis bundles all gems in the vendor directory on its build servers, which Jekyll will mistakenly read and explode on. exclude: [vendor] . To speed up the build, you should cache the gem packages created by bundler. Travis has a pre-defined cache strategy for this tool which should have all the default configs to do exactly that. cache: bundler . Optionally, if you are not interested in the build email notifications you can disable them with this configuration. Travis supports a wide array of notification services, you may find another one more useful (e.g. slack). notifications: email: false . ",
    "url": "/docs/continuous-integration/travis-ci/#3-configuring-your-travis-builds",
    "relUrl": "/docs/continuous-integration/travis-ci/#3-configuring-your-travis-builds"
  },"205": {
    "doc": "Travis CI",
    "title": "Troubleshooting",
    "content": "Travis error: “You are trying to install in deployment mode after changing your Gemfile. Run bundle install elsewhere and add the updated Gemfile.lock to version control.” . Workaround: Either run bundle install locally and commit your changes to Gemfile.lock, or remove the Gemfile.lock file from your repository and add an entry in the .gitignore file to avoid it from being checked in again. ",
    "url": "/docs/continuous-integration/travis-ci/#troubleshooting",
    "relUrl": "/docs/continuous-integration/travis-ci/#troubleshooting"
  },"206": {
    "doc": "Travis CI",
    "title": "Questions?",
    "content": "This entire guide is open-source. Go ahead and edit it if you have a fix or ask for help if you run into trouble and need some help. ",
    "url": "/docs/continuous-integration/travis-ci/#questions",
    "relUrl": "/docs/continuous-integration/travis-ci/#questions"
  },"207": {
    "doc": "Travis CI",
    "title": "Travis CI",
    "content": "You can test your website build against one or more versions of Ruby. The following guide will show you how to set up a free build environment on Travis, with GitHub integration for pull requests. ",
    "url": "/docs/continuous-integration/travis-ci/",
    "relUrl": "/docs/continuous-integration/travis-ci/"
  },"208": {
    "doc": "Contributing",
    "title": "Where to get help or report a problem",
    "content": "See the support guidelines . ",
    "url": "/docs/contributing/#where-to-get-help-or-report-a-problem",
    "relUrl": "/docs/contributing/#where-to-get-help-or-report-a-problem"
  },"209": {
    "doc": "Contributing",
    "title": "Ways to contribute",
    "content": "Whether you’re a developer, a designer, or just a Jekyll devotee, there are lots of ways to contribute. Here’s a few ideas: . | Install Jekyll on your computer and kick the tires. Does it work? Does it do what you’d expect? If not, open an issue and let us know. | Comment on some of the project’s open issues. Have you experienced the same problem? Know a work around? Do you have a suggestion for how the feature could be better? | Read through the documentation, and click the “improve this page” button, any time you see something confusing, or have a suggestion for something that could be improved. | Browse through the Jekyll discussion forum, and lend a hand answering questions. There’s a good chance you’ve already experienced what another user is experiencing. | Find an open issue (especially those labeled help-wanted), and submit a proposed fix. If it’s your first pull request, we promise we won’t bite, and are glad to answer any questions. | Help evaluate open pull requests, by testing the changes locally and reviewing what’s proposed. | . ",
    "url": "/docs/contributing/#ways-to-contribute",
    "relUrl": "/docs/contributing/#ways-to-contribute"
  },"210": {
    "doc": "Contributing",
    "title": "Submitting a pull request",
    "content": " ",
    "url": "/docs/contributing/#submitting-a-pull-request",
    "relUrl": "/docs/contributing/#submitting-a-pull-request"
  },"211": {
    "doc": "Contributing",
    "title": "Pull requests generally",
    "content": ". | The smaller the proposed change, the better. If you’d like to propose two unrelated changes, submit two pull requests. | The more information, the better. Make judicious use of the pull request body. Describe what changes were made, why you made them, and what impact they will have for users. | If this is your first pull request, it may help to understand GitHub Flow. | If you’re submitting a code contribution, be sure to read the code contributions section below. | . ",
    "url": "/docs/contributing/#pull-requests-generally",
    "relUrl": "/docs/contributing/#pull-requests-generally"
  },"212": {
    "doc": "Contributing",
    "title": "Submitting a pull request via github.com",
    "content": "Many small changes can be made entirely through the github.com web interface. | Navigate to the file within jekyll/jekyll that you’d like to edit. | Click the pencil icon in the top right corner to edit the file | Make your proposed changes | Click “Propose file change” | Click “Create pull request” | Add a descriptive title and detailed description for your proposed change. The more information the better. | Click “Create pull request” | . That’s it! You’ll be automatically subscribed to receive updates as others review your proposed change and provide feedback. ",
    "url": "/docs/contributing/#submitting-a-pull-request-via-githubcom",
    "relUrl": "/docs/contributing/#submitting-a-pull-request-via-githubcom"
  },"213": {
    "doc": "Contributing",
    "title": "Submitting a pull request via Git command line",
    "content": ". | Fork the project by clicking “Fork” in the top right corner of jekyll/jekyll. | Clone the repository locally git clone https://github.com/&lt;you-username&gt;/jekyll. | Create a new, descriptively named branch to contain your change ( git checkout -b my-awesome-feature ). | Hack away, add tests. Not necessarily in that order. | Make sure everything still passes by running script/cibuild (see the tests section below) | Push the branch up ( git push origin my-awesome-feature ). | Create a pull request by visiting https://github.com/&lt;your-username&gt;/jekyll and following the instructions at the top of the screen. | . ",
    "url": "/docs/contributing/#submitting-a-pull-request-via-git-command-line",
    "relUrl": "/docs/contributing/#submitting-a-pull-request-via-git-command-line"
  },"214": {
    "doc": "Contributing",
    "title": "Proposing updates to the documentation",
    "content": "We want the Jekyll documentation to be the best it can be. We’ve open-sourced our docs and we welcome any pull requests if you find it lacking. ",
    "url": "/docs/contributing/#proposing-updates-to-the-documentation",
    "relUrl": "/docs/contributing/#proposing-updates-to-the-documentation"
  },"215": {
    "doc": "Contributing",
    "title": "How to submit changes",
    "content": "You can find the documentation for jekyllrb.com in the docs directory. See the section above, submitting a pull request for information on how to propose a change. One gotcha, all pull requests should be directed at the master branch (the default branch). ",
    "url": "/docs/contributing/#how-to-submit-changes",
    "relUrl": "/docs/contributing/#how-to-submit-changes"
  },"216": {
    "doc": "Contributing",
    "title": "Updating FontAwesome iconset for jekyllrb.com",
    "content": "We use a custom version of FontAwesome which contains just the icons we use. If you ever need to update our documentation with an icon that is not already available in our custom iconset, you’ll have to regenerate the iconset using Icomoon’s Generator: . | Go to https://icomoon.io/app/. | Click Import Icons on the top-horizontal-bar and upload the existing &lt;jekyll&gt;/docs/icomoon-selection.json. | Click Add Icons from Library.. further down on the page, and add ‘Font Awesome’. | Select the required icon(s) from the Library (make sure its the ‘FontAwesome’ library instead of ‘IcoMoon-Free’ library). | Click Generate Font on the bottom-horizontal-bar. | Inspect the included icons and proceed by clicking Download. | Extract the font files and adapt the CSS to the paths we use in Jekyll: | . | Copy the entire fonts directory over and overwrite existing ones at &lt;jekyll&gt;/docs/. | Copy the contents of selection.json and overwrite existing content inside &lt;jekyll&gt;/docs/icomoon-selection.json. | Copy the entire @font-face {} declaration and only the new-icon(s)’ css declarations further below, to update the &lt;jekyll&gt;/docs/_sass/_font-awesome.scss sass partial. | Fix paths in the @font-face {} declaration by adding ../ before fonts/FontAwesome.* like so: ('../fonts/Fontawesome.woff?9h6hxj'). | . ",
    "url": "/docs/contributing/#updating-fontawesome-iconset-for-jekyllrbcom",
    "relUrl": "/docs/contributing/#updating-fontawesome-iconset-for-jekyllrbcom"
  },"217": {
    "doc": "Contributing",
    "title": "Adding plugins",
    "content": "If you want to add your plugin to the list of plugins, please submit a pull request modifying the plugins page source file by adding a link to your plugin under the proper subheading depending upon its type. ",
    "url": "/docs/contributing/#adding-plugins",
    "relUrl": "/docs/contributing/#adding-plugins"
  },"218": {
    "doc": "Contributing",
    "title": "Code Contributions",
    "content": "Interested in submitting a pull request? Awesome. Read on. There’s a few common gotchas that we’d love to help you avoid. ",
    "url": "/docs/contributing/#code-contributions",
    "relUrl": "/docs/contributing/#code-contributions"
  },"219": {
    "doc": "Contributing",
    "title": "Tests and documentation",
    "content": "Any time you propose a code change, you should also include updates to the documentation and tests within the same pull request. Documentation . If your contribution changes any Jekyll behavior, make sure to update the documentation. Documentation lives in the docs/_docs folder (spoiler alert: it’s a Jekyll site!). If the docs are missing information, please feel free to add it in. Great docs make a great project. Include changes to the documentation within your pull request, and once merged, jekyllrb.com will be updated. Tests . | If you’re creating a small fix or patch to an existing feature, a simple test is more than enough. You can usually copy/paste from an existing example in the tests folder, but if you need you can find out about our tests suites Shoulda and RSpec-Mocks. | If it’s a brand new feature, create a new Cucumber feature, reusing existing steps where appropriate. | . ",
    "url": "/docs/contributing/#tests-and-documentation",
    "relUrl": "/docs/contributing/#tests-and-documentation"
  },"220": {
    "doc": "Contributing",
    "title": "Code contributions generally",
    "content": ". | Jekyll uses the Rubocop static analyzer to ensure that contributions follow the GitHub Ruby Styleguide. Please check your code using script/fmt and resolve any errors before pushing your branch. | Don’t bump the Gem version in your pull request (if you don’t know what that means, you probably didn’t). | You can use the command script/console to start a REPL to explore the result of Jekyll’s methods. It also provides you with helpful methods to quickly create a site or configuration. Feel free to check it out! . | Previously, we’ve used the WIP Probot app to help contributors determine whether their pull request is ready for review. Please use a draft pull request instead. When you’re ready, mark the pull request as ready for review . | . ",
    "url": "/docs/contributing/#code-contributions-generally",
    "relUrl": "/docs/contributing/#code-contributions-generally"
  },"221": {
    "doc": "Contributing",
    "title": "Running tests locally",
    "content": " ",
    "url": "/docs/contributing/#running-tests-locally",
    "relUrl": "/docs/contributing/#running-tests-locally"
  },"222": {
    "doc": "Contributing",
    "title": "Test Dependencies",
    "content": "To run the test suite and build the gem you’ll need to install Jekyll’s dependencies by running the following command: . script/bootstrap . Before you make any changes, run the tests and make sure that they pass (to confirm your environment is configured properly): . script/cibuild . If you are only updating a file in test/, you can use the command: . script/test test/blah_test.rb . If you are only updating a .feature file, you can use the command: . script/cucumber features/blah.feature . Both script/test and script/cucumber can be run without arguments to run its entire respective suite. ",
    "url": "/docs/contributing/#test-dependencies",
    "relUrl": "/docs/contributing/#test-dependencies"
  },"223": {
    "doc": "Contributing",
    "title": "Visual Studio Code Development Container",
    "content": "If you’ve got Visual Studio Code with the Remote Development Extension Pack installed then simply opening this repository in Visual Studio Code and following the prompts to “Re-open In A Development Container” will get you setup and ready to go with a fresh environment with all the requirements installed. ",
    "url": "/docs/contributing/#visual-studio-code-development-container",
    "relUrl": "/docs/contributing/#visual-studio-code-development-container"
  },"224": {
    "doc": "Contributing",
    "title": "A thank you",
    "content": "Thanks! Hacking on Jekyll should be fun. If you find any of this hard to figure out, let us know so we can improve our process or documentation! . ",
    "url": "/docs/contributing/#a-thank-you",
    "relUrl": "/docs/contributing/#a-thank-you"
  },"225": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": "Hi there! Interested in contributing to Jekyll? We’d love your help. Jekyll is an open source project, built one contribution at a time by users like you. ",
    "url": "/docs/contributing/",
    "relUrl": "/docs/contributing/"
  },"226": {
    "doc": "Data Files",
    "title": "The Data Folder",
    "content": "The _data folder is where you can store additional data for Jekyll to use when generating your site. These files must be YAML, JSON, TSV or CSV files (using either the .yml, .yaml, .json, .tsv, or .csv extension), and they will be accessible via site.data. ",
    "url": "/docs/datafiles/#the-data-folder",
    "relUrl": "/docs/datafiles/#the-data-folder"
  },"227": {
    "doc": "Data Files",
    "title": "Example: List of members",
    "content": "Here is a basic example of using Data Files to avoid copy-pasting large chunks of code in your Jekyll templates: . In _data/members.yml: . - name: Eric Mill github: konklone - name: Parker Moore github: parkr - name: Liu Fengyun github: liufengyun . Or _data/members.csv: . name,github Eric Mill,konklone Parker Moore,parkr Liu Fengyun,liufengyun . This data can be accessed via site.data.members (notice that the file’s basename determines the variable name and therefore one should avoid having data files with the same basename but different extensions, in the same directory). You can now render the list of members in a template: . &lt;ul&gt; {% for member in site.data.members %} &lt;li&gt; &lt;a href=\"https://github.com/{{ member.github }}\"&gt; {{ member.name }} &lt;/a&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; . ",
    "url": "/docs/datafiles/#example-list-of-members",
    "relUrl": "/docs/datafiles/#example-list-of-members"
  },"228": {
    "doc": "Data Files",
    "title": "Subfolders",
    "content": "Data files can also be placed in sub-folders of the _data folder. Each folder level will be added to a variable’s namespace. The example below shows how GitHub organizations could be defined separately in a file under the orgs folder: . In _data/orgs/jekyll.yml: . username: jekyll name: Jekyll members: - name: Tom Preston-Werner github: mojombo - name: Parker Moore github: parkr . In _data/orgs/doeorg.yml: . username: doeorg name: Doe Org members: - name: John Doe github: jdoe . The organizations can then be accessed via site.data.orgs, followed by the file name: . &lt;ul&gt; {% for org_hash in site.data.orgs %} {% assign org = org_hash[1] %} &lt;li&gt; &lt;a href=\"https://github.com/{{ org.username }}\"&gt; {{ org.name }} &lt;/a&gt; ({{ org.members | size }} members) &lt;/li&gt; {% endfor %} &lt;/ul&gt; . ",
    "url": "/docs/datafiles/#subfolders",
    "relUrl": "/docs/datafiles/#subfolders"
  },"229": {
    "doc": "Data Files",
    "title": "Example: Accessing a specific author",
    "content": "Pages and posts can also access a specific data item. The example below shows how to access a specific item: . _data/people.yml: . dave: name: David Smith twitter: DavidSilvaSmith . The author can then be specified as a page variable in a post’s front matter: . --- title: sample post author: dave --- {% assign author = site.data.people[page.author] %} &lt;a rel=\"author\" href=\"https://twitter.com/{{ author.twitter }}\" title=\"{{ author.name }}\"&gt; {{ author.name }} &lt;/a&gt; . For information on how to build robust navigation for your site (especially if you have a documentation website or another type of Jekyll site with a lot of pages to organize), see Navigation. ",
    "url": "/docs/datafiles/#example-accessing-a-specific-author",
    "relUrl": "/docs/datafiles/#example-accessing-a-specific-author"
  },"230": {
    "doc": "Data Files",
    "title": "CSV/TSV Parse Options",
    "content": "The way Ruby parses CSV and TSV files can be customized with the csv_reader and tsv_reader configuration options. Each configuration key exposes the same options: . converters: What CSV converters should be used when parsing the file. Available options are integer, float, numeric, date, date_time and all. By default, this list is empty. encoding: What encoding the files are in. Defaults to the site encoding configuration option. headers: Boolean field for whether to parse the first line of the file as headers. When false, it treats the first row as data. Defaults to true. Examples: . csv_reader: converters: - numeric - datetime headers: true encoding: utf-8 tsv_reader: converters: - all headers: false . ",
    "url": "/docs/datafiles/#csvtsv-parse-options",
    "relUrl": "/docs/datafiles/#csvtsv-parse-options"
  },"231": {
    "doc": "Data Files",
    "title": "Data Files",
    "content": "In addition to the built-in variables available from Jekyll, you can specify your own custom data that can be accessed via the Liquid templating system. Jekyll supports loading data from YAML, JSON, CSV, and TSV files located in the _data directory. Note that CSV and TSV files must contain a header row. This powerful feature allows you to avoid repetition in your templates and to set site specific options without changing _config.yml. Plugins/themes can also leverage Data Files to set configuration variables. ",
    "url": "/docs/datafiles/",
    "relUrl": "/docs/datafiles/"
  },"232": {
    "doc": "Deployment",
    "title": "Deployment",
    "content": "Sites built using Jekyll can be deployed in a large number of ways due to the static nature of the generated output. Here’s some of the most common ways: . | Manually | Automated | Third Party | . ",
    "url": "/docs/deployment/",
    "relUrl": "/docs/deployment/"
  },"233": {
    "doc": "Automated Deployment",
    "title": "Continuous Integration Service",
    "content": "One of the easiest ways to set up an automated deployment flow is by using a CI. These services run a script when there’s a commit on your Git repository. You might want this script to build the site, run tests over the output then deploy it to the service of your choice. We have guides for the following providers: . | GitHub Actions | Travis CI | CircleCI | Buddy | Razorops CI/CD | . ",
    "url": "/docs/deployment/automated/#continuous-integration-service",
    "relUrl": "/docs/deployment/automated/#continuous-integration-service"
  },"234": {
    "doc": "Automated Deployment",
    "title": "Git post-receive hook",
    "content": "To have a remote server handle the deploy for you every time you push changes using Git, you can create a user account which has all the public keys that are authorized to deploy in its authorized_keys file. With that in place, setting up the post-receive hook is done as follows: . laptop$ ssh deployer@example.com server$ mkdir myrepo.git server$ cd myrepo.git server$ git --bare init server$ cp hooks/post-receive.sample hooks/post-receive server$ mkdir /var/www/myrepo . Next, add the following lines to hooks/post-receive and be sure Jekyll is installed on the server: . #!/bin/bash -l # Install Ruby Gems to ~/gems export GEM_HOME=$HOME/gems export PATH=$GEM_HOME/bin:$PATH TMP_GIT_CLONE=$HOME/tmp/myrepo GEMFILE=$TMP_GIT_CLONE/Gemfile PUBLIC_WWW=/var/www/myrepo git clone $GIT_DIR $TMP_GIT_CLONE BUNDLE_GEMFILE=$GEMFILE bundle install BUNDLE_GEMFILE=$GEMFILE bundle exec jekyll build -s $TMP_GIT_CLONE -d $PUBLIC_WWW rm -Rf $TMP_GIT_CLONE exit . Finally, run the following command on any users laptop that needs to be able to deploy using this hook: . laptops$ git remote add deploy deployer@example.com:~/myrepo.git . Deploying is now as easy as telling nginx or Apache to look at /var/www/myrepo and running the following: . laptops$ git push deploy master . ",
    "url": "/docs/deployment/automated/#git-post-receive-hook",
    "relUrl": "/docs/deployment/automated/#git-post-receive-hook"
  },"235": {
    "doc": "Automated Deployment",
    "title": "Automated Deployment",
    "content": "There are a number of ways to easily automate the deployment of a Jekyll site. ",
    "url": "/docs/deployment/automated/",
    "relUrl": "/docs/deployment/automated/"
  },"236": {
    "doc": "Manual Deployment",
    "title": "rsync",
    "content": "Rsync is similar to scp except it can be faster as it will only send changed parts of files as opposed to the entire file. You can learn more about using rsync in the Digital Ocean tutorial. ",
    "url": "/docs/deployment/manual/#rsync",
    "relUrl": "/docs/deployment/manual/#rsync"
  },"237": {
    "doc": "Manual Deployment",
    "title": "Amazon S3",
    "content": "If you want to host your site in Amazon S3, you can do so by using the s3_website application. It will push your site to Amazon S3 where it can be served like any web server, dynamically scaling to almost unlimited traffic. This approach has the benefit of being about the cheapest hosting option available for low-volume blogs as you only pay for what you use. ",
    "url": "/docs/deployment/manual/#amazon-s3",
    "relUrl": "/docs/deployment/manual/#amazon-s3"
  },"238": {
    "doc": "Manual Deployment",
    "title": "FTP",
    "content": "Most traditional web hosting providers let you upload files to their servers over FTP. To upload a Jekyll site to a web host using FTP, run the jekyll build command and copy the contents of the generated _site folder to the root folder of your hosting account. This is most likely to be the httpdocs or public_html folder on most hosting providers. ",
    "url": "/docs/deployment/manual/#ftp",
    "relUrl": "/docs/deployment/manual/#ftp"
  },"239": {
    "doc": "Manual Deployment",
    "title": "scp",
    "content": "If you have direct access to the deployment web server, the process is essentially the same, except you might have other methods available to you (such as scp, or even direct filesystem access) for transferring the files. Remember to make sure the contents of the generated _site folder get placed in the appropriate web root directory for your web server. ",
    "url": "/docs/deployment/manual/#scp",
    "relUrl": "/docs/deployment/manual/#scp"
  },"240": {
    "doc": "Manual Deployment",
    "title": "Rack-Jekyll",
    "content": "Rack-Jekyll allows you to deploy your site on any Rack server such as Amazon EC2, Slicehost, Heroku, and so forth. It also can run with shotgun, rackup, mongrel, unicorn, and others. ",
    "url": "/docs/deployment/manual/#rack-jekyll",
    "relUrl": "/docs/deployment/manual/#rack-jekyll"
  },"241": {
    "doc": "Manual Deployment",
    "title": "Manual Deployment",
    "content": "Jekyll generates your static site to the _site directory by default. You can transfer the contents of this directory to almost any hosting provider to get your site live. Here are some manual ways of achieving this: . ",
    "url": "/docs/deployment/manual/",
    "relUrl": "/docs/deployment/manual/"
  },"242": {
    "doc": "3rd Party",
    "title": "AWS Amplify",
    "content": "The AWS Amplify Console provides continuous deployment and hosting for modern web apps (single page apps and static site generators). Continuous deployment allows developers to deploy updates to their web app on every code commit to their Git repository. Hosting includes features such as globally available CDNs, 1-click custom domain setup + HTTPS, feature branch deployments, redirects, trailing slashes, and password protection. Read this step-by-step guide to deploy and host your Jekyll site on AWS Amplify. ",
    "url": "/docs/deployment/third-party/#aws-amplify",
    "relUrl": "/docs/deployment/third-party/#aws-amplify"
  },"243": {
    "doc": "3rd Party",
    "title": "Bip",
    "content": "Bip provides zero downtime deployment, a global CDN, SSL, unlimited bandwidth and more for Jekyll websites. Deploy in seconds from the command line. Visit the Bip website for more information - which is also built with Jekyll. ",
    "url": "/docs/deployment/third-party/#bip",
    "relUrl": "/docs/deployment/third-party/#bip"
  },"244": {
    "doc": "3rd Party",
    "title": "CloudCannon",
    "content": "CloudCannon has everything you need to build, host and update Jekyll websites. Take advantage of our global CDN, automated SSL, continuous deployment and more. ",
    "url": "/docs/deployment/third-party/#cloudcannon",
    "relUrl": "/docs/deployment/third-party/#cloudcannon"
  },"245": {
    "doc": "3rd Party",
    "title": "GitHub Pages",
    "content": "Sites on GitHub Pages are powered by Jekyll behind the scenes, so if you’re looking for a zero-hassle, zero-cost solution, GitHub Pages are a great way to host your Jekyll-powered website for free. ",
    "url": "/docs/deployment/third-party/#github-pages",
    "relUrl": "/docs/deployment/third-party/#github-pages"
  },"246": {
    "doc": "3rd Party",
    "title": "GitLab Pages",
    "content": "GitLab Pages offers free hosting with custom domains. Get started with Jekyll and a fully customizable pipeline. ",
    "url": "/docs/deployment/third-party/#gitlab-pages",
    "relUrl": "/docs/deployment/third-party/#gitlab-pages"
  },"247": {
    "doc": "3rd Party",
    "title": "KeyCDN",
    "content": "KeyCDN accelerates Jekyll-powered websites with a wide range of other features such as real time image processing including WebP transformation. The Jekyll hosting tutorial provides various options to supercharge Jekyll sites with just a few steps. It combines best flexibility and excellent performance. ",
    "url": "/docs/deployment/third-party/#keycdn",
    "relUrl": "/docs/deployment/third-party/#keycdn"
  },"248": {
    "doc": "3rd Party",
    "title": "Kickster",
    "content": "Use Kickster for automated deploys to GitHub Pages when using unsupported plugins on GitHub Pages. Kickster provides a basic Jekyll project setup packed with web best practices and useful optimization tools increasing your overall project quality. Kickster ships with automated and worry-free deployment scripts for GitHub Pages. Install the Kickster gem and you are good to go. More documentation can here found here. If you do not want to use the gem or start a new project you can just copy paste the deployment scripts for Travis CI or Circle CI. ",
    "url": "/docs/deployment/third-party/#kickster",
    "relUrl": "/docs/deployment/third-party/#kickster"
  },"249": {
    "doc": "3rd Party",
    "title": "Netlify",
    "content": "Netlify provides Global CDN, Continuous Deployment, one click HTTPS and much more, providing developers a robust toolset for modern web projects, without added complexity. Netlify supports custom plugins for Jekyll and has a free plan for open source projects. Read this Jekyll step-by-step guide to setup your Jekyll site on Netlify. ",
    "url": "/docs/deployment/third-party/#netlify",
    "relUrl": "/docs/deployment/third-party/#netlify"
  },"250": {
    "doc": "3rd Party",
    "title": "Render",
    "content": "Render provides zero config continuous deployment for static sites. The service is free under 100GB monthly bandwidth. ",
    "url": "/docs/deployment/third-party/#render",
    "relUrl": "/docs/deployment/third-party/#render"
  },"251": {
    "doc": "3rd Party",
    "title": "Hostman",
    "content": "Hostman allows you to host websites for free with no configurations. Read this guide to deploy your Jekyll site on Hostman. ",
    "url": "/docs/deployment/third-party/#hostman",
    "relUrl": "/docs/deployment/third-party/#hostman"
  },"252": {
    "doc": "3rd Party",
    "title": "Static Publisher",
    "content": "Static Publisher is another automated deployment option with a server listening for webhook posts, though it’s not tied to GitHub specifically. It has a one-click deploy to Heroku, it can watch multiple projects from one server, it has an easy to user admin interface and can publish to either S3 or to a git repository (e.g. gh-pages). ",
    "url": "/docs/deployment/third-party/#static-publisher",
    "relUrl": "/docs/deployment/third-party/#static-publisher"
  },"253": {
    "doc": "3rd Party",
    "title": "Vercel",
    "content": "Vercel provides zero config continuous deployment, HTTPS Custom domains, high performance smart CDN, you get instant static deploy for free. ",
    "url": "/docs/deployment/third-party/#vercel",
    "relUrl": "/docs/deployment/third-party/#vercel"
  },"254": {
    "doc": "3rd Party",
    "title": "21YunBox",
    "content": "21YunBox provides blazing fast Chinese CDN, Continuous Deployment, one click HTTPS and much more, providing developers a hassle-free solution to launch their web projects in China. Read this Jekyll step-by-step guide to deploy your Jekyll site on 21YunBox. ",
    "url": "/docs/deployment/third-party/#21yunbox",
    "relUrl": "/docs/deployment/third-party/#21yunbox"
  },"255": {
    "doc": "3rd Party",
    "title": "Layer0",
    "content": "Layer0 is an all-in-one platform to develop, deploy, preview, experiment on, monitor, and run your headless frontend. It is focused on large, dynamic websites and best-in-class performance through EdgeJS (a JavaScript-based Content Delivery Network), predictive prefetching, and performance monitoring. Layer0 offers a free tier. Get started in just a few minutes by following Layer0’s guide to deploying Jekyll. ",
    "url": "/docs/deployment/third-party/#layer0",
    "relUrl": "/docs/deployment/third-party/#layer0"
  },"256": {
    "doc": "3rd Party",
    "title": "3rd Party",
    "content": " ",
    "url": "/docs/deployment/third-party/",
    "relUrl": "/docs/deployment/third-party/"
  },"257": {
    "doc": "Front Matter",
    "title": "Predefined Global Variables",
    "content": "There are a number of predefined global variables that you can set in the front matter of a page or post. | Variable | Description | . | layout . | If set, this specifies the layout file to use. Use the layout file name without the file extension. Layout files must be placed in the _layouts directory. | Using null will produce a file without using a layout file. This is overridden if the file is a post/document and has a layout defined in the front matter defaults. | Starting from version 3.5.0, using none in a post/document will produce a file without using a layout file regardless of front matter defaults. Using none in a page will cause Jekyll to attempt to use a layout named \"none\". | . | . | permalink . | If you need your processed blog post URLs to be something other than the site-wide style (default /year/month/day/title.html), then you can set this variable and it will be used as the final URL. | . | published . | Set to false if you don’t want a specific post to show up when the site is generated. | . Render Posts Marked As Unpublished . To preview unpublished pages, run `jekyll serve` or `jekyll build` with the `--unpublished` switch. Jekyll also has a handy drafts feature tailored specifically for blog posts. ",
    "url": "/docs/front-matter/#predefined-global-variables",
    "relUrl": "/docs/front-matter/#predefined-global-variables"
  },"258": {
    "doc": "Front Matter",
    "title": "Custom Variables",
    "content": "You can also set your own front matter variables you can access in Liquid. For instance, if you set a variable called food, you can use that in your page: . --- food: Pizza --- &lt;h1&gt;{{ page.food }}&lt;/h1&gt; . ",
    "url": "/docs/front-matter/#custom-variables",
    "relUrl": "/docs/front-matter/#custom-variables"
  },"259": {
    "doc": "Front Matter",
    "title": "Predefined Variables for Posts",
    "content": "These are available out-of-the-box to be used in the front matter for a post. | Variable | Description | . | date . | A date here overrides the date from the name of the post. This can be used to ensure correct sorting of posts. A date is specified in the format YYYY-MM-DD HH:MM:SS +/-TTTT; hours, minutes, seconds, and timezone offset are optional. | . | category . categories . | Instead of placing posts inside of folders, you can specify one or more categories that the post belongs to. When the site is generated the post will act as though it had been set with these categories normally. Categories (plural key) can be specified as a YAML list or a space-separated string. | . | tags . | Similar to categories, one or multiple tags can be added to a post. Also like categories, tags can be specified as a YAML list or a space-separated string. | . Don't repeat yourself . If you don't want to repeat your frequently used front matter variables over and over, define defaults for them and only override them where necessary (or not at all). This works both for predefined and custom variables. ",
    "url": "/docs/front-matter/#predefined-variables-for-posts",
    "relUrl": "/docs/front-matter/#predefined-variables-for-posts"
  },"260": {
    "doc": "Front Matter",
    "title": "Front Matter",
    "content": "Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example: . --- layout: post title: Blogging Like a Hacker --- . Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available for you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on. UTF-8 Character Encoding Warning . If you use UTF-8 encoding, make sure that no BOM header characters exist in your files or very, very bad things will happen to Jekyll. This is especially relevant if you’re running Jekyll on Windows. Front Matter Variables Are Optional . If you want to use Liquid tags and variables but don’t need anything in your front matter, just leave it empty! The set of triple-dashed lines with nothing in between will still get Jekyll to process your file. (This is useful for things like CSS and RSS feeds!) . ",
    "url": "/docs/front-matter/",
    "relUrl": "/docs/front-matter/"
  },"261": {
    "doc": "GitHub Pages",
    "title": "Project Page URL Structure",
    "content": "Sometimes it’s nice to preview your Jekyll site before you push your gh-pages branch to GitHub. The subdirectory-like URL structure GitHub uses for Project Pages complicates the proper resolution of URLs. In order to assure your site builds properly, use the handy URL filters: . &lt;!-- For styles with static names... --&gt; &lt;link href=\"{{ 'assets/css/style.css' | relative_url }}\" rel=\"stylesheet\"&gt; &lt;!-- For documents/pages whose URLs can change... --&gt; [{{ page.title }}](\"{{ page.url | relative_url }}\") . This way you can preview your site locally from the site root on localhost, but when GitHub generates your pages from the gh-pages branch all the URLs will resolve properly. ",
    "url": "/docs/github-pages/#project-page-url-structure",
    "relUrl": "/docs/github-pages/#project-page-url-structure"
  },"262": {
    "doc": "GitHub Pages",
    "title": "Deploying Jekyll to GitHub Pages",
    "content": "GitHub Pages work by looking at certain branches of repositories on GitHub. There are two basic types available: user/organization and project pages. The way to deploy these two types of sites are nearly identical, except for a few minor details. ",
    "url": "/docs/github-pages/#deploying-jekyll-to-github-pages",
    "relUrl": "/docs/github-pages/#deploying-jekyll-to-github-pages"
  },"263": {
    "doc": "GitHub Pages",
    "title": "User and Organization Pages",
    "content": "User and organization pages live in a special GitHub repository dedicated to only the GitHub Pages files. This repository must be named after the account name. For example, @mojombo’s user page repository has the name mojombo.github.io. Content from the master branch of your repository will be used to build and publish the GitHub Pages site, so make sure your Jekyll site is stored there. Custom domains do not affect repository names . GitHub Pages are initially configured to live under the username.github.io subdomain, which is why repositories must be named this way even if a custom domain is being used. ",
    "url": "/docs/github-pages/#user-and-organization-pages",
    "relUrl": "/docs/github-pages/#user-and-organization-pages"
  },"264": {
    "doc": "GitHub Pages",
    "title": "Project Pages",
    "content": "Unlike user and organization Pages, Project Pages are kept in the same repository as the project they are for, except that the website content is stored in a specially named gh-pages branch or in a docs folder on the master branch. The content will be rendered using Jekyll, and the output will become available under a subpath of your user pages subdomain, such as username.github.io/project (unless a custom domain is specified). The Jekyll project repository itself is a perfect example of this branch structure—the master branch contains the actual software project for Jekyll, and the Jekyll website that you’re looking at right now is contained in the docs folder of the same repository. Please refer to GitHub official documentation on user, organization and project pages to see more detailed examples. Source files must be in the root directory . GitHub Pages overrides the “Site Source” configuration value, so if you locate your files anywhere other than the root directory, your site may not build correctly. Installing the github-pages gem on Windows . While Windows is not officially supported, it is possible to install the github-pages gem on Windows. Special instructions can be found on our Windows-specific docs page. ",
    "url": "/docs/github-pages/#project-pages",
    "relUrl": "/docs/github-pages/#project-pages"
  },"265": {
    "doc": "GitHub Pages",
    "title": "Running and Testing Locally",
    "content": "Once the project is configured with the github-pages environment, it’s quite hard to switch back and forth with the local settings and the production-level settings. For that we can use certain CLI options to make the workflow hassle-free. bundle exec jekyll serve --baseurl=\"\" . This will run the jekyll server on your local machine i.e. on http://localhost:4000. Refer server options for available options. ",
    "url": "/docs/github-pages/#running-and-testing-locally",
    "relUrl": "/docs/github-pages/#running-and-testing-locally"
  },"266": {
    "doc": "GitHub Pages",
    "title": "GitHub Pages",
    "content": "GitHub Pages are public web pages for users, organizations, and repositories, that are freely hosted on GitHub’s github.io domain or on a custom domain name of your choice. GitHub Pages are powered by Jekyll behind the scenes, so they’re a great way to host your Jekyll-powered website for free. Your site is automatically generated by GitHub Pages when you push your source files. Note that GitHub Pages works equally well for regular HTML content, simply because Jekyll treats files without front matter as static assets. So if you only need to push generated HTML, you’re good to go without any further setup. The GitHub Pages Documentation is comprehensive and includes a a guide to setting up a GitHub Pages site using Jekyll. We recommend following this guide. This page contains some additional information which may be useful when working on GitHub Pages sites with Jekyll. GitHub Pages Documentation, Help, and Support . For more information about what you can do with GitHub Pages, as well as for troubleshooting guides, you should check out GitHub’s Pages Help section. If all else fails, you should contact GitHub Support. ",
    "url": "/docs/github-pages/",
    "relUrl": "/docs/github-pages/"
  },"267": {
    "doc": "History",
    "title": "4.2.2 / 2022-03-03",
    "content": " ",
    "url": "/docs/history/#v4-2-2",
    "relUrl": "/docs/history/#v4-2-2"
  },"268": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Lock http_parser.rb gem to v0.6.x on JRuby. | . ",
    "url": "/docs/history/#bug-fixes-v4-2-2",
    "relUrl": "/docs/history/#bug-fixes-v4-2-2"
  },"269": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Backport #8830 for v4.2.x: Add a workflow to build gems consistently (#8869) | Lock rubocop-performance to v1.11.x. | . ",
    "url": "/docs/history/#development-fixes-v4-2-2",
    "relUrl": "/docs/history/#development-fixes-v4-2-2"
  },"270": {
    "doc": "History",
    "title": "4.2.1 / 2021-09-27",
    "content": " ",
    "url": "/docs/history/#v4-2-1",
    "relUrl": "/docs/history/#v4-2-1"
  },"271": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Backport #8620 for v4.2.x: Revert #7253: “Don’t reset site.url to localhost:4000 by default” (#8808) | Backport #8756 for v4.2.x: Respect collections_dir config within include tag (#8794) | Backport #8786 for v4.2.x: Fix regression in Convertible module from v4.2.0 (#8793) | . ",
    "url": "/docs/history/#bug-fixes-v4-2-1",
    "relUrl": "/docs/history/#bug-fixes-v4-2-1"
  },"272": {
    "doc": "History",
    "title": "4.2.0 / 2020-12-14",
    "content": " ",
    "url": "/docs/history/#v4-2-0",
    "relUrl": "/docs/history/#v4-2-0"
  },"273": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Warn on command-line with permalink conflict (#8342) | Suppress warning issued for redirect pages (#8347) | Enhance detection of conflicting destination URLs (#8459) | Add :post_convert hook to modify HTML content before layout (#8368) | Allow triggering :post_convert events atomically (#8465) | Debug reading Page and Layout objects (#8100) | Do not reset site.url to http://localhost:4000 by default (#7253) | Add custom debug strings for Jekyll objects (#8473) | Debug reading data files in a site (#8481) | . ",
    "url": "/docs/history/#minor-enhancements-v4-2-0",
    "relUrl": "/docs/history/#minor-enhancements-v4-2-0"
  },"274": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Replace nested conditional with guard clauses (#8294) | Fix: security bump (#8349) | Fix path matching regex in post_url Liquid tag (#8375) | Enable Performance/ChainArrayAllocation cop (#8404) | Enable Lint/NoReturnInBeginEndBlocks Cop (#8457) | Generate items from site.include list only once (#8463) | Explicitly return nil after site process phase (#8472) | . ",
    "url": "/docs/history/#bug-fixes-v4-2-0",
    "relUrl": "/docs/history/#bug-fixes-v4-2-0"
  },"275": {
    "doc": "History",
    "title": "Optimization Fixes",
    "content": ". | Implement custom delegators for drop methods (#8183) | Handle nil argument to Jekyll.sanitized_path (#8415) | Cache Jekyll.sanitized_path (#8424) | Memoize array of drop getter method names (#8421) | Reduce string allocations from the link tag (#8387) | Optimize parsing of parameters in include tag (#8192) | Stash documents write? attribute in a variable (#8389) | Reduce string allocations from generating doc URLs (#8392) | Check if site is in incremental mode optimally (#8401) | Utilize flexibility of Site#in_dest_dir (#8403) | Reduce allocations from rendering item as liquid (#8406) | Compute relative_path of pages using PathManager (#8408) | Reduce allocation from normalize_whitespace filter (#8400) | Use Regexp#match? when MatchData is not required (#8427) | Check default front matter scope against symbols (#8393) | Stash frequently used Drop setter keys for reuse (#8394) | Memoize defaults computed for Convertibles (#8451) | Reduce array allocations from merging categories (#8453) | Memoize destination of pages, documents and staticfiles (#8458) | Reduce allocations from computing item property (#8485) | Optimize Page#dir with a private method (#8489) | Stash attribute hash for Liquid computed for pages (#8497) | . ",
    "url": "/docs/history/#optimization-fixes-v4-2-0",
    "relUrl": "/docs/history/#optimization-fixes-v4-2-0"
  },"276": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Update cucumber gem to version 4.1 (#8278) | Move permalink styles data to constant (#8282) | Update rubocop gem to 0.87.1 (#8287) | Update RuboCop to-do file (#8296) | Fix rake console generating LoadError (#8312) | Configure Performance cops (#8369) | Update rubocop gem to 0.90.0 (#8313) | Refactor Jekyll::Utils::Platforms (#7236) | Bump RuboCop to v0.91.x (#8391) | Add workflow to build and profile third-party repo (#8398) | Bump RuboCop to v0.92.x | Update cucumber gem version to 5.1.2 (#8413) | Fix test suite compatibility with JRuby (#8418) | chore(deps): bump Rubocop to 0.93.0 (#8430) | Use Ruby 2.7.1 in GitHub Actions (#8444) | Test that Liquid expressions are not deeply evaled (#8292) | Test rendering arbitrary Liquid variables by default (#7414) | Migrate TravisCI jobs to GitHub Actions (#8492) | . ",
    "url": "/docs/history/#development-fixes-v4-2-0",
    "relUrl": "/docs/history/#development-fixes-v4-2-0"
  },"277": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Update pointer to special permalink variables for collections (#8274) | Fix special treatment for 'page 1' in docs of pagination (#8230) | Add Formcake to forms section (#8283) | Add a note on the rendering process in the docs (#8291) | Add refactoring type to PULL_REQUEST_TEMPLATE (#8297) | Update resources.md (#7864) | Extra apostrophes in an URL (#8319) | Clarify target of subordinate clause (#8320) | Cherry-pick commits from conflicting branch docs-40 | Update documentation on third party site (#8352) | Update default.md with info requested in #8314 (#8353) | Clarify description of safe option (#8354) | Simplifying the Git post-receive hook-example (#8358) | Add missing doc for build and serve commands (#8365) | Docs Review: Getting Started (#8372) | Add note about rebooting system after installation (#8359) | Use data file to render table at /docs/configuration/options/#global-configuration (#8377) | Use data file(s) to render table(s) at /docs/configuration/options/ (#8380) | Improve maintainability of config option data (#8383) | Remove CircleCI v1 docs (#8410) | Remove NOKOGIRI_USE_SYSTEM_LIBRARIES from Travis CI docs (#8409) | Add links to all Jekyll themes on GitHub tagged with #jekyll-theme (#8447) | Document initializing project Gemfile from scratch (#8450) | Document installation of additional dependencies for installing Jekyll on Fedora (#8456) | Improve documentation on Hooks in Jekyll (#8467) | Build docs site with GitHub Actions (#8201) | Add link to Assets page from _sass section in _docs/structure.md (#8486) | . ",
    "url": "/docs/history/#documentation",
    "relUrl": "/docs/history/#documentation"
  },"278": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Fix rendering of showcase images (#8504) | . ",
    "url": "/docs/history/#site-enhancements-v4-2-0",
    "relUrl": "/docs/history/#site-enhancements-v4-2-0"
  },"279": {
    "doc": "History",
    "title": "4.1.1 / 2020-06-24",
    "content": " ",
    "url": "/docs/history/#v4-1-1",
    "relUrl": "/docs/history/#v4-1-1"
  },"280": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Disable page excerpts by default (#8222) | Revert introduction of PageDrop (#8221) | Don't generate excerpts for non-html pages (#8234) | Make page excerpts consistent with doc excerpts (#8236) | . ",
    "url": "/docs/history/#bug-fixes-v4-1-1",
    "relUrl": "/docs/history/#bug-fixes-v4-1-1"
  },"281": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Replace deprecated 'show' command with 'info' (#8235) | Change name to ▲Vercel (#8247) | Add language and examples to describe how to use the configuration op… (#8249) | Fix missing yaml front matter colon and adjust/add clarifying language. (#8250) | correct typo (#8261) | Allow hyperlinks to specific filter documentation (#8231) | Update link to Netlify step-by-step guide (#8264) | Fix grammar in documentation section (#8265) | . ",
    "url": "/docs/history/#documentation-1",
    "relUrl": "/docs/history/#documentation-1"
  },"282": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Including correct Sketch website (#8241) | Release post for v4.1.1 (#8243) | . ",
    "url": "/docs/history/#site-enhancements-v4-1-1",
    "relUrl": "/docs/history/#site-enhancements-v4-1-1"
  },"283": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Bump RuboCop to v0.85.x (#8223) | Expect drive letter only on vanilla windows (#8227) | . ",
    "url": "/docs/history/#development-fixes-v4-1-1",
    "relUrl": "/docs/history/#development-fixes-v4-1-1"
  },"284": {
    "doc": "History",
    "title": "4.1.0 / 2020-05-27",
    "content": " ",
    "url": "/docs/history/#v4-1-0",
    "relUrl": "/docs/history/#v4-1-0"
  },"285": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Memoize absolute_url and relative_url filters (#7793) | Fix documentation comment for Jekyll::Converters::Identity (#7883) | Optimize Jekyll::Filters#item_property (#7696) | Allow multiple binary operators in where_exp filter (#8047) | Fix documents custom-ordering logic (#8028) | Use layout.path when rendering the Liquid layout (#8069) | Reduce array allocations from StaticFile#path (#8083) | Simplify Jekyll::Renderer#validate_layout (#8064) | Add static file’s basename to its url_placeholder (#7908) | Clear cached Liquid template scope before render (#7967) | Cache URLFilter results of string inputs per site (#7990) | Use platforms instead of install_if in Gemfile (#8140) | Config include trailing slash (#8113) | Improve path normalization in liquid_renderer (#8075) | Switch slugify regex to support more Unicode character groups (#8167) | Check if entry is a directory once per enumerator (#8177) | Filter out exclusively excluded entries sooner (#7482) | Return relative_url if site.url is an empty string (#7988) | Configure kramdown toc_levels as array by default (#8015) | Reduce Pathname objects from front matter defaults (#8067) | Simplify Jekyll::Hooks.trigger logic (#8044) | Quicker categories for documents without superdirs (#7987) | Reduce Jekyll::Renderer instances during a build (#7570) | Escape regex characters in paths to match (#8138) | Provide invokables for common drop query keys (#8165) | Optimize path sanitization of default front matter (#8154) | Initialize static files’ data hash only if needed (#8188) | Initialize include-files as Jekyll objects (#8158) | . ",
    "url": "/docs/history/#bug-fixes-v4-1-0",
    "relUrl": "/docs/history/#bug-fixes-v4-1-0"
  },"286": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | serve: add support for ECC certificates (#7768) | Update item_property to recognize integers (#7878) | Include _config.yml in a new theme’s gemspec (#7865) | Add an option to easily disable disk-cache (#7928) | Optimize markdown parsing with Kramdown by reusing the options and parser objects (#8013) | Add PageDrop to provide Liquid templates with data (#7992) | Optimize Kramdown::JekyllDocument#to_html calls (#8041) | Configure default language for syntax-highlighting (#8035) | Remove dev dependencies from new theme-gem gemspec (#8042) | Allow disabling import of theme configuration (#8131) | Allow excerpts to be generated for Page objects (#7642) | Profile various stages of a site’s build process (#6760) | Add find filters to optimize where-first chains (#8171) | Make number_of_words filter respect CJK characters (#7813) | Allow extensionless document in a strict site (#7950) | Add :slugified_categories URL placeholder (#8094) | . ",
    "url": "/docs/history/#minor-enhancements-v4-1-0",
    "relUrl": "/docs/history/#minor-enhancements-v4-1-0"
  },"287": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Add dropped ‘title: Staff’ to the code (#7805) | Clarify docs for static files in collection (#7812) | Rephrase the CircleCI v2 section (#7815) | Update old GitHub wiki URL with new one (#7823) | Update JekyllConf page with 2019 talks (#7826) | link for memberships (#7825) | Doc: minor fix, should be greater or equal to min version (#7856) | Update third-party.md - Fix broken link (#7857) | clarify _config.yml/collections type (#7873) | Replace backticks with HTML tags in data file (#7879) | add new theme source (#7875) | fixed grammatical error (it's –&gt; its) (#7887) | Docs: Clarify organizing pages into subfolders (#7896) | Disambiguate the placeholder of permalink (#7906) | docs: add short serve command for livereload (#7919) | docs: add options for watch and force polling (#7918) | add install instructions for ArchLinux and openSUSE (#7920) | Improve index page of Jekyll documentation (#7926) | Include path in jekyll new commands (Usage docs) (#7931) | Change affect to effect in the collections docs (#7937) | Changed deprecated command in themes documentation (#7941) | Adds some documentation for the :clean, :on_obsolete hook (#7954) | docs: fix broken link (#7955) | Corrected typo (#7975) | docs: remove watch option in config (#7940) | Correct a sentence in the documentation (#7978) | Fix YAML representation of group_by result (#7979) | Move --baseurl to build command options (#7985) | Correct documentation of filters (#7989) | Document sorting two documents by their date (#7870) | Fix English grammar error (#7994) | Update 03-front-matter.md (#7996) | Add Kentico Kontent CMS integration to resources (#8000) | Update 07-assets.md (#7413) | Fix file references in Step by Step Tutorial’s Assets step (#8007) | docs: improve highlighting of code blocks (#8017) | remove leading slash from Sass file location (#8021) | [Docs] Fix asset link ref in step-by-step tutorial (#8026) | Corrected command to modify PATH (#8029) | Corrected command to modify PATH (#8030) | Docs: Render full contents of just the latest post (#8032) | docs: improvements for note boxes (#8037) | Non-deprecated vendor/bundle path configuration (#8048) | Update 09-collections.md (#8060) | Remove extra paragraph tags (#8063) | Add default front matter for tutorials collection (#8081) | Create CSV to table tutorial (#8090) | Add version badge for Custom Sorting of Documents (#8098) | Docs: Fix grammar in _docs/front-matter.md (#8097) | Update variables.md (#8106) | Add help about Gentoo/Linux (#8002) | Update documentation on third party site (#8122) | Added Clear Linux (#8132) | Added note about OS specific installation instructions. (#8135) | Fix broken URL in the Resources Page on the Documentation Site (#8136) | Docs: Deploy Jekyll site with GitHub Actions (#8119) | Clarify bundle config in Bundler tutorial (#8150) | docs: update your-first-plugin.md (#8147) | Fix typo in documentation on GitHub Actions (#8162) | Ease discovery of CLI commands (in their entirety) (#8178) | Remove sudo from Travis CI tutorial (#8187) | Add GitLab Pages to 3rd party list (#8191) | docs: add 21yunbox for deployment (#8193) | Improve documentation on tags and categories (#8196) | . ",
    "url": "/docs/history/#documentation-2",
    "relUrl": "/docs/history/#documentation-2"
  },"288": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Ci/GitHub actions (#7822) | Rubocop version upgrade (#7846) | Split action steps to avoid using &amp;&amp; on Windows (#7885) | Upgrade rake to use version 13 (#7910) | Update dependency constraint to allow RuboCop v0.76 (#7893) | Use bash executable consistently (#7909) | Test with JRuby 9.2.9.0 (#7779) | Bump RuboCop to v0.79.x (#7970) | Remove post-install message from gemspec (#7974) | Attain Ruby 3.0 compatibility (#7948) | Test where filter handling numeric property values (#7821) | chore(deps): rubocop 0.80.0 (#8012) | Update unit tests for Kramdown-based converter (#8014) | Add Visual Studio Code Development Container (#8016) | chore: simplify require for Jekyll::VERSION (#8057) | Remove version-constraint relaxation for i18n gem (#8055) | Mirror spec.homepage as metadata[\"homepage_uri\"] (#8056) | Bump Ruby versions on Travis builds (#8088) | chore(ci): cache dependencies (#8168) | . ",
    "url": "/docs/history/#development-fixes-v4-1-0",
    "relUrl": "/docs/history/#development-fixes-v4-1-0"
  },"289": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Optimize rendering of the documentation site (#8020) | Utilize relative_url filter in documentation site (#8089) | Render tutorial metadata in documentation site (#8092) | Improve syntax-highlighting in documentation site (#8079) | Site: Filter through just the docs collection (#8170) | . ",
    "url": "/docs/history/#site-enhancements-v4-1-0",
    "relUrl": "/docs/history/#site-enhancements-v4-1-0"
  },"290": {
    "doc": "History",
    "title": "4.0.1 / 2020-05-08",
    "content": " ",
    "url": "/docs/history/#v4-0-1",
    "relUrl": "/docs/history/#v4-0-1"
  },"291": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Prevent console warning with Ruby 2.7 (#8124) | Clear cached Liquid template scope before render (#8141) | Add static file’s basename to its url_placeholder (#8142) | Update item_property to recognize integers (#8160) | . ",
    "url": "/docs/history/#bug-fixes-v4-0-1",
    "relUrl": "/docs/history/#bug-fixes-v4-0-1"
  },"292": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Fix Kramdown converter based tests for v4.0.x (#8143) | . ",
    "url": "/docs/history/#development-fixes-v4-0-1",
    "relUrl": "/docs/history/#development-fixes-v4-0-1"
  },"293": {
    "doc": "History",
    "title": "3.9.2 / 2022-03-27",
    "content": " ",
    "url": "/docs/history/#v3-9-2",
    "relUrl": "/docs/history/#v3-9-2"
  },"294": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Lock http_parser.rb gem to v0.6.x on JRuby (#8943) | Backport #8756 for v3.9.x: Respect collections_dir config within include tag (#8795) | Backport #8965 for v3.9.x: Fix response header for content served via jekyll serve (#8976) | . ",
    "url": "/docs/history/#bug-fixes-v3-9-2",
    "relUrl": "/docs/history/#bug-fixes-v3-9-2"
  },"295": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Update and fix CI for 3.9-stable on Ruby 3.x (#8942) | Fix CI for commits to 3.9-stable branch (#8788) | . ",
    "url": "/docs/history/#development-fixes-v3-9-2",
    "relUrl": "/docs/history/#development-fixes-v3-9-2"
  },"296": {
    "doc": "History",
    "title": "3.9.1 / 2021-04-08",
    "content": " ",
    "url": "/docs/history/#v3-9-1",
    "relUrl": "/docs/history/#v3-9-1"
  },"297": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Backport #8618 for v3.9.x: Update include tag to be more permissive (#8629) | . ",
    "url": "/docs/history/#bug-fixes-v3-9-1",
    "relUrl": "/docs/history/#bug-fixes-v3-9-1"
  },"298": {
    "doc": "History",
    "title": "3.9.0 / 2020-08-05",
    "content": " ",
    "url": "/docs/history/#v3-9-0",
    "relUrl": "/docs/history/#v3-9-0"
  },"299": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Allow use of kramdown v2 (#8322) | Add default language for kramdown syntax highlighting (#8325) | . ",
    "url": "/docs/history/#minor-enhancements-v3-9-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-9-0"
  },"300": {
    "doc": "History",
    "title": "3.8.7 / 2020-05-08",
    "content": " ",
    "url": "/docs/history/#v3-8-7",
    "relUrl": "/docs/history/#v3-8-7"
  },"301": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Prevent console warnings with Ruby 2.7 (#8125) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-7",
    "relUrl": "/docs/history/#bug-fixes-v3-8-7"
  },"302": {
    "doc": "History",
    "title": "4.0.0 / 2019-08-19",
    "content": " ",
    "url": "/docs/history/#v4-0-0",
    "relUrl": "/docs/history/#v4-0-0"
  },"303": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Drop ruby 2.3 (#7454) | Drop support for Ruby 2.1 and 2.2 (#6560) | Drop support for older versions of Rouge (#6978) | Drop support for pygments as syntax-highlighter (#7118) | Drop support for Redcarpet (#6987) | Drop support for rdiscount (#6988) | Drop support for jekyll-watch-1.4.0 and older (#7287) | Incorporate relative_url filter in link tag (#6727) | Upgrade kramdown dependency to v2.x (#7492) | Upgrade jekyll-sass-converter to v2.x - Sassc + sourcemaps (#7778) | Upgrade i18n to v1.x (#6931) | Add Jekyll::Cache class to handle caching on disk (#7169) | Cache converted markdown (#7159) | Cache: Do not dump undumpable objects (#7190) | Cache matched defaults sets for given parameters (#6888) | Ignore cache directory (#7184) | Add Site#in_cache_dir helper method (#7160) | Remove 'cache_dir' during jekyll clean (#7158) | Cache parsed Liquid templates in memory (#7136) | Only read layouts from source_dir or theme_dir (#6788) | Allow custom sorting of collection documents (#7427) | Always exclude certain paths from being processed (#7188) | Remove Jekyll::Utils#strip_heredoc in favor of a Ruby &gt; 2.3 built in (#7584) | Incorporate relative_url within post_url tag (#7589) | Remove patch to modify config for kramdown (#7699) | . ",
    "url": "/docs/history/#major-enhancements-v4-0-0",
    "relUrl": "/docs/history/#major-enhancements-v4-0-0"
  },"304": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Enhance --blank scaffolding (#7310) | Use jekyll-compose if installed (#6932) | Disable Liquid via front matter (#6824) | Configure cache_dir (#7232) | ISO week date drops (#5981) | Fix custom 404 page for GitHub pages (#7132) | Load config file from within current theme-gem (#7304) | Suggest re-running command with --trace on fail (#6551) | Support for binary operators in where_exp filter (#6998) | Automatically load _config.toml (#7299) | Add vendor folder to a newly installed site's .gitignore (#6968) | Output Jekyll Version while debugging (#7173) | Memoize computing excerpt's relative_path (#6951) | Skip processing posts that can not be read (#7302) | Memoize the return value of Site#documents (#7273) | Cache globbed paths in front matter defaults (#7345) | Cache computed item property (#7301) | Cleanup Markdown converter (#7519) | Do not process Liquid in post excerpt when disabled in front matter (#7146) | Liquefied link tag (#6269) | Update item_property to return numbers as numbers instead of strings (#6608) | Use .markdown extension for page templates (#7126) | Add support for *.xhtml files (#6854) | Allow i18n v0.9.5 and higher (#7044) | Ignore permission error of /proc/version (#7267) | Strip extra slashes via Jekyll.sanitized_path (#7182) | Site template: remove default config for markdown (#7285) | Add a custom inspect string for StaticFile objects (#7422) | Remind user to include gem in the Gemfile on error (#7476) | Search Front matter defaults for Page objects with relative_path (#7261) | Lock use of tzinfo gem to v1.x (#7521, #7562) | Utilize absolute paths of user-provided file paths (#7450) | Detect nil and empty values in objects with where filter (#7580) | Initialize mutations for Drops only if necessary (#7657) | Reduce Array allocations via Jekyll::Cleaner (#7659) | Encode and unencode urls only as required (#7654) | Reduce string allocations with better alternatives (#7643) | Reduce allocations from Jekyll::Document instances (#7625) | Add type attribute to Document instances (#7406) | Reduce allocations from where-filter (#7653) | Memoize SiteDrop#documents to reduce allocations (#7697) | Add PathManager class to cache interim paths (#7732) | Remove warnings and fixes for deprecated config (#7440) | Delegate –profile tabulation to terminal-table (#7627) | . ",
    "url": "/docs/history/#minor-enhancements-v4-0-0",
    "relUrl": "/docs/history/#minor-enhancements-v4-0-0"
  },"305": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Security: fix include bypass of EntryFilter#filter symlink check (#7226) | Theme gems: ensure directories aren't symlinks (#7419) | Add call to unused method validate_options in commands/serve.rb (#7122) | Check if scope applies to type before given path (#7263) | Document two methods, simplify one of the methods (#7270) | Check key in collections only if it isn't \"posts\" (#7277) | Interpolate Jekyll::Page subclass on inspection (#7203) | Measure the no. of times a template gets rendered (#7316) | Reduce array traversal in Jekyll::Reader (#7157) | Re-implement handling Liquid blocks in excerpts (#7250) | Documents should be able to render their date (#7404) | Fix Interpreter warning from Jekyll::Renderer (#7448) | Loggers should accept both numbers and symbols (#6967) | Replace regex arg to :gsub with a string arg (#7189) | Dont write static files from unrendered collection (#7410) | Excerpt handling of custom and intermediate tags (#7382) | Change future post loglevel to warn to help user narrow down issues (#7527) | Handle files with trailing dots in their basename (#7315) | Fix unnecessary allocations via StaticFileReader (#7572) | Don't check if site URL is absolute if it is nil (#7498) | Avoid unnecessary duplication of pages array (#7272) | Memoize Site#post_attr_hash (#7276) | Memoize Document#excerpt_separator (#7569) | Optimize Document::DATE_FILENAME_MATCHER to match valid filenames (#7292) | Escape valid special chars in a site's path name (#7568) | Replace name in Page#inspect with relative_path (#7434) | Log a warning when the slug is empty (#7357) | Push Markdown link refs to excerpt only as required (#7577) | Fix broken include_relative usage in excerpt (#7633) | Initialize and reset glob_cache only as necessary (#7658) | Revert memoizing Site#docs_to_write and #documents (#7684) | Backport #7684 for v3.8.x: Revert memoizing Site#docs_to_write and refactor #documents (#7689) | Backport #7213 and #7633 for v3.8.x: Fix broken include_relative usage in excerpt (#7690) | Don't read symlinks in site.include in safe mode (#7711) | Replace String#=~ with String#match? (#7723) | Update log output for an invalid theme directory (#7679) | Remove configuration of theme sass files from Core (#7290) | Actually conditionally include liquid-c (#7792) | Test number_like regex on stringified property (#7788) | . ",
    "url": "/docs/history/#bug-fixes-v4-0-0",
    "relUrl": "/docs/history/#bug-fixes-v4-0-0"
  },"306": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Upgrade liquid-c to v4.0 (#7375) | Bump RuboCop to v0.71.0 (#7687) | Target Ruby 2.4 syntax (#7583) | Fix: RuboCop offenses (#7769) | Use communicative method parameters (#7566) | Scan assert_equal methods and rectify any offenses with a custom RuboCop cop (#7130) | CI: Test with Ruby 2.6 (#7438) | CI: Test with Ruby 2.6 on AppVeyor (#7518) | CI: Update RuboCop config (#7050) | CI: Add a script to profile docs (#7540) | CI(Appveyor): shallow clone with 5 last commits (#7312) | CI: Test with oldest and latest Ruby only (#7412) | CI: Update excludes for CodeClimate Analyses (#7365) | CI: Lock Travis to Bundler-1.16.2 (#7144) | CI: Bump tested version of JRuby to 9.2.7.0 (#7612) | CI: Do not install docs on updating gems on Travis (#7706) | Update gemspec (#7425) | deps: relax version constraint on classifier-reborn gem (#7471) | deps: update yajl-ruby (#7278) | deps: bump yajl-ruby to v1.4.0 (#6976) | Create symlink only if target is accessible (#7429) | Switch to :install_if for wdm gem (#7372) | Add cucumber feature to test include_relative tag (#7213) | Small benchmark refactoring (#7211) | Fix incorrectly passed arguments to assert_equal (#7134) | fix up refute_equal call (#7133) | Fix RuboCop offences in test files (#7128) | Use assert_include (#7093) | Remember to release docs gem (#7066) | Useless privates removed (#6768) | Load Rouge for TestKramdown (#7007) | Update instructions for releasing docs Gem (#6975) | We are not using Ruby 2.2 anymore (#6977) | Remove unnecessary Jekyll::Page constant (#6770) | Remove unused error class (#6511) | Add a Cucumber feature for post_url tag (#7586) | Generate a \"TOTAL\" row for build-profile table (#7614) | Refactor Jekyll::Cache (#7532) | Store list of expected extnames in a constant (#7638) | Profile allocations from a build session (#7646) | Update small typo in contributing.md (#7671) | Remove override to Jekyll::Document#respond_to? (#7695) | Update TestTags in sync with Rouge v3.4 (#7709) | Use regexp to filter special entries (#7702) | Reduce Array objects generated from utility method (#7749) | Update mime.types (#7756) | Replace redundant Array#map with Array#each (#7761) | Reduce allocations by using #each_with_object (#7758) | Memoize fallback_data for Drop (#7728) | Use String#end_with? to check if entry is a backup (#7701) | . ",
    "url": "/docs/history/#development-fixes-v4-0-0",
    "relUrl": "/docs/history/#development-fixes-v4-0-0"
  },"307": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Refactor docs (#7205) | Add a link to Giraffe Academy's tutorial (#7325) | Do not advise users to install Jekyll outside of Bundler (#6927) | Remove documentation for using Redcarpet (#6990) | Install Docs that Work on MacOS 10.14 (#7561) | Add Installation Instructions for Ubuntu (#6925) | Don't prompt for sudo when installing with Ubuntu WSL (#6781) | Installation instructions for Fedora (#7198) | Update Windows install docs (#6926) | List all standard liquid filters (#7333) | List all static files variables (#7002) | Improve how to include Rouge stylesheets (#7752) | Mention CommonMark plugins (#7418) | Add TSV to list of supported _data files. (#7168) | How to deploy using pre-push git hook (#7179) | Hosting with AWS Amplify (#7510) | CircleCI deployment through CircleCI v2 (#7024) | GitHub Pages: use themes from other repos (#7112) | Document page.dir and page.name (#7373) | Document custom tag blocks (#7359) | Document converter methods (#7289) | Document {{ page.collection }} (#7430) | Document Jekyll Filters with YAML data (#7335) | Document where Jekyll looks for layouts in a site (#7564) | plugin: liquid tag jekyll-flickr (#6946) | plugin: jekyll-target-blank (#7046) | plugin: json-get. (#7086) | plugin: jekyll-info (#7091) | plugin: jekyll-xml-source (#7114) | plugin: jekyll-firstimage filter (#7127) | plugin: CAT (#7011) | Resources: Statictastic (#7593) | Resources: Bonsai Search (#7543) | Resources: Formspark (#7601) | Resources: Jekpack(#7598) | Resources: formX (#7536) | Resources: 99inbound's Jekyll post (#7348) | Resources: CloudSh (#7497) | Community: DEV Community's Jekyll tag (#7139) | Showcase: developer.spotify.com (#7217) | Showcase: Isomer (#7300) | Add version number for group_by_exp doc (#6956) | Updated nginx configuration for custom-404-page documentation (#6994) | Clarify definition of 'draft' (#7037) | _drafts need to be contained within the custom collection directory (#6985) | Updated to supported version (#7031) | Add Hints for some Improved Travis Config in Doc (#7049) | Update travis-ci.md to point out \"this is an example Gemfile\" (#7089) | Instructions to view theme’s files under Linux (#7095) | Use a real theme in the example (#7125) | Update docs about post creation (#7138) | Initialize upgrading doc for v4.0 (#7140) | Add version badge for date filters with ordinal (#7162) | Corrected sample usage of postfiles (#7181) | Resolve \"Unable to locate package ruby2.4\" error (#7196) | Correct stylesheet url in tutorial step 7 (#7210) | Removes quotes from markdown for assets (#7223) | Clarified front matter requirement (#7234) | Explicit location of where to create blog.html (#7241) | Reference the build command options that allows multiple config files (#7266) | Add more issue template(s) and pull request template (#7269) | Suggest sites use OpenSSL instead of GnuTLS for their site's CI (#7010) | Fix broken Contributors link in README.markdown (#7200) | Add title tag to item in RSS template (#7282) | Add link tag to item in RSS template (#7291) | Remove redundant instruction comment (#7342) | Textile is only supported through a converter plugin (#7003) | Add recursive navigation tutorial (#7720) | Remove installation instructions with Homebrew (#7381) | Fix dead link and misleading prose (#7383) | Fix content management section (#7385) | Apply ruby official guide documents (#7393) | Fix group_by_exp filter example (#7394) | Remove alt attribute from a tags (#7407) | Fix BASH code-block in ubuntu.md (#7420) | zlib is missing (#7428) | Fixed unnecessary articles and pronouns (#7466) | Store SSL key and cert in site source (#7473) | Fix typo in tutorial for converting existing site (#7524) | Check if var exists before include tag (#7530) | Clarify docs on collections regarding the need for front matter (#7538) | Fix incorrect Windows path in themes.md (#7525) | Addresses bundle not found. (#7351) | Update the contribution docs for draft pull requests (#7619) | Data file section adds TSV (#7640) | Indicate where the _sass folder is by default (#7644) | Docs: add version tags to new placeholders (#5981) for permalinks (#7647) | Solve \"GitHub Page build failure\" in 10-deployment.md (#7648) | fix link to Site Source config (#7708) | Introduce frontmatter in step 2 (#7704) | Add @ashmaroli to Core Team listing (#7398) | Link to Tidelift in site's footer (#7377) | Link to OpenCollective backing (#7378 | Link to sponsor listing in README (#7405) | Adjust team page listings (#7395) | Updates to CODE OF CONDUCT (v1.4.0) (#7105) | More inclusive writing (#7283) | Update Ruby version used in Travis-CI example (#7783) | Documentation for binary operators in where_exp (#7786) | Adding SmartForms as Forms service (#7794) | . ",
    "url": "/docs/history/#documentation-3",
    "relUrl": "/docs/history/#documentation-3"
  },"308": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Better Performance (#7388) | Add some minor improvements to image loading in Showcase page (#7214) | Simplify assigning classname to docs' aside-links (#7609) | Simplify couple of includes in the docs site (#7607) | Avoid generating empty classnames (#7610) | Minimize rendering count (#7343) | . ",
    "url": "/docs/history/#site-enhancements-v4-0-0",
    "relUrl": "/docs/history/#site-enhancements-v4-0-0"
  },"309": {
    "doc": "History",
    "title": "Release",
    "content": ". | Jekyll v4.0 release (#7782) | Release post for v4.0.0 beta1 (#7716) | Release post for v4.0.0.pre.alpha1 (#7574) | Release post for v3.8.0 (#6849) | Release post for v3.6.3, v3.7.4 and v3.8.4 (#7259) | Post: v4.0 development (#6934) | . ",
    "url": "/docs/history/#release",
    "relUrl": "/docs/history/#release"
  },"310": {
    "doc": "History",
    "title": "3.8.6 / 2019-07-02",
    "content": " ",
    "url": "/docs/history/#v3-8-6",
    "relUrl": "/docs/history/#v3-8-6"
  },"311": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Update log output for an invalid theme directory (#7734) | Memoize SiteDrop#documents to reduce allocations (#7722) | Excerpt handling of custom and intermediate tags (#7467) | Escape valid special chars in a site’s path name (#7573) | Revert memoizing Site#docs_to_write and refactor #documents (#7689) | Fix broken include_relative usage in excerpt (#7690) | Install platform-specific gems as required (3c06609406) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-6",
    "relUrl": "/docs/history/#bug-fixes-v3-8-6"
  },"312": {
    "doc": "History",
    "title": "Security Fixes",
    "content": ". | Theme gems: ensure directories aren’t symlinks (#7424) | . ",
    "url": "/docs/history/#security-fixes-v3-8-6",
    "relUrl": "/docs/history/#security-fixes-v3-8-6"
  },"313": {
    "doc": "History",
    "title": "3.8.5 / 2018-11-04",
    "content": " ",
    "url": "/docs/history/#v3-8-5",
    "relUrl": "/docs/history/#v3-8-5"
  },"314": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Re-implement handling Liquid blocks in excerpts (#7250) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-5",
    "relUrl": "/docs/history/#bug-fixes-v3-8-5"
  },"315": {
    "doc": "History",
    "title": "3.8.4 / 2018-09-18",
    "content": " ",
    "url": "/docs/history/#v3-8-4",
    "relUrl": "/docs/history/#v3-8-4"
  },"316": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | 3.8.x: security: fix include bypass of EntryFilter#filter symlink check (#7228) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-4",
    "relUrl": "/docs/history/#bug-fixes-v3-8-4"
  },"317": {
    "doc": "History",
    "title": "3.8.3 / 2018-06-05",
    "content": " ",
    "url": "/docs/history/#v3-8-3",
    "relUrl": "/docs/history/#v3-8-3"
  },"318": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix –unpublished not affecting collection documents (#7027) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-3",
    "relUrl": "/docs/history/#bug-fixes-v3-8-3"
  },"319": {
    "doc": "History",
    "title": "3.8.2 / 2018-05-18",
    "content": " ",
    "url": "/docs/history/#v3-8-2",
    "relUrl": "/docs/history/#v3-8-2"
  },"320": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Update rubocop version (#7016) | . ",
    "url": "/docs/history/#development-fixes-v3-8-2",
    "relUrl": "/docs/history/#development-fixes-v3-8-2"
  },"321": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Add whitespace control to LIQUID_TAG_REGEX (#7015) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-2",
    "relUrl": "/docs/history/#bug-fixes-v3-8-2"
  },"322": {
    "doc": "History",
    "title": "3.8.1 / 2018-05-01",
    "content": " ",
    "url": "/docs/history/#v3-8-1",
    "relUrl": "/docs/history/#v3-8-1"
  },"323": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix rendering Liquid constructs in excerpts (#6945) | Liquify documents unless published == false (#6959) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-1",
    "relUrl": "/docs/history/#bug-fixes-v3-8-1"
  },"324": {
    "doc": "History",
    "title": "3.8.0 / 2018-04-19",
    "content": " ",
    "url": "/docs/history/#v3-8-0",
    "relUrl": "/docs/history/#v3-8-0"
  },"325": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | move duplicate code to a single private method (#6593) | Test against Ruby 2.5 on AppVeyor (#6668) | Replace simple regex with a native Ruby method (#6732) | Codeclimate: exclude livereload.js (#6776) | Add a cucumber feature to test link tag (#6777) | Fix theme gem feature (#6784) | Replace simple regex with equivalent Ruby methods (#6736) | Rewrite script/rubyprof as a Ruby script (#6813) | Add debug output to theme rendering (#5195) | fix minitest deprecation warning in test (#6839) | Memoize Site#site_data (#6809) | Memoize document output extension (#6814) | Access document permalink attribute efficiently (#6740) | Minimize array allocations in the where filter (#6860) | Bump JRuby (#6878) | Assert existence of &lt;collection&gt;.files (#6907) | Bump RuboCop to 0.54.x (#6915) | Regenerate unconditionally unless its an incremental build (#6917) | Centralize require statements (#6910) | Bump to RuboCop 0.55 (#6929) | Refactor private method HighlightBlock#parse_options (#6822) | . ",
    "url": "/docs/history/#development-fixes-v3-8-0",
    "relUrl": "/docs/history/#development-fixes-v3-8-0"
  },"326": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Two massive performance improvements for large sites (#6730) | Cache the list of documents to be written (#6741) | Allow Jekyll Doctor to detect stray posts dir (#6681) | Excerpt relative-path should match its path (#6597) | Remind user to resolve conflict in jekyll new with --force (#6801) | Memoize helper methods in site-cleaner (#6808) | Compute document's relative_path faster (#6767) | Create a single instance of PostReader per site (#6759) | Allow date filters to output ordinal days (#6773) | Change regex to sanitize and normalize filenames passed to LiquidRenderer (#6610) | Allow passing :strict_variables and :strict_filters options to Liquid's renderer (#6726) | Debug writing files during the build process (#6696) | Improve regex usage in Tags::IncludeTag (#6848) | Improve comment included in the starter index.md (#6916) | Store and retrieve converter instances for Jekyll::Filters via a hash (#6856) | Implement a cache within the where filter (#6868) | Store regexp in a constant (#6887) | Optimize computing filename in LiquidRenderer (#6841) | . ",
    "url": "/docs/history/#minor-enhancements-v3-8-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-8-0"
  },"327": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Adding the jekyll-algolia plugin to the list of plugins (#6737) | Added Premonition plugin to list of plugins (#6750) | Add document on releasing a new version (#6745) | Mention Talkyard, a new commenting system for Jekyll and others. (#6752) | Add 'jekyll-fontello' to plugins (#6757) | Install dh-autoreconf on Windows (#6765) | Fix common typos (#6764) | Fix documentation for {{ page.excerpt }} (#6779) | Update docs on permalink configuration (#6775) | Propose fix some typos (#6785) | Say hello to Jekyll's New Lead Developer (#6790) | Add reference to Liquid to plugin docs (#6794) | Draft a release post for v3.7.3 (#6803) | add missing step for gem-based theme conversion (#6802) | Update windows.md to explain an issue with jekyll new. (#6838) | Add Bundler Installation Instructions (#6828) | Docs: describe difference between tags and categories (#6882) | Add jekyll-random plugin to docs (#6833) | Fixed typo in description of categories and tags (#6896) | Add missing ul-tag (#6897) | doc: add liquid tag plugin jekyll-onebox for html previews (#6898) | Add jekyll-w2m to plugins (#6855) | Fix tutorials navigation HTML (#6919) | add Arch Linux installation troubleshoot (#6782) | Docs: Install Jekyll on macOS (#6881) | Fix CodeClimate badges [ci skip] (#6930) | Update index.md (#6933) | . ",
    "url": "/docs/history/#documentation-4",
    "relUrl": "/docs/history/#documentation-4"
  },"328": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Remove links to Gists (#6751) | Always load Google Fonts over HTTPS (#6792) | always load analytics.js over HTTPS (#6807) | . ",
    "url": "/docs/history/#site-enhancements-v3-8-0",
    "relUrl": "/docs/history/#site-enhancements-v3-8-0"
  },"329": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Append appropriate closing tag to Liquid block in an excerpt ### -minor (#6724) | Bypass rendering via Liquid unless required (#6735) | Delegated methods after private keyword are meant to be private (#6819) | Improve handling non-default collection documents rendering and writing (#6795) | Fix passing multiline params to include tag when using the variable syntax (#6858) | include_relative tag should find related documents in collections gathered within custom collections_dir (#6818) | Handle liquid tags in excerpts robustly (#6891) | Allow front matter defaults to be applied properly to documents gathered under custom collections_dir (#6885) | . ",
    "url": "/docs/history/#bug-fixes-v3-8-0",
    "relUrl": "/docs/history/#bug-fixes-v3-8-0"
  },"330": {
    "doc": "History",
    "title": "3.7.4 / 2018-09-07",
    "content": " ",
    "url": "/docs/history/#v3-7-4",
    "relUrl": "/docs/history/#v3-7-4"
  },"331": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Security: fix include bypass of EntryFilter#filter symlink check (#7224) | . ",
    "url": "/docs/history/#bug-fixes-v3-7-4",
    "relUrl": "/docs/history/#bug-fixes-v3-7-4"
  },"332": {
    "doc": "History",
    "title": "3.7.3 / 2018-02-25",
    "content": " ",
    "url": "/docs/history/#v3-7-3",
    "relUrl": "/docs/history/#v3-7-3"
  },"333": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Do not hardcode locale unless certainly necessary (#6791) | . ",
    "url": "/docs/history/#bug-fixes-v3-7-3",
    "relUrl": "/docs/history/#bug-fixes-v3-7-3"
  },"334": {
    "doc": "History",
    "title": "3.7.2 / 2018-01-25",
    "content": " ",
    "url": "/docs/history/#v3-7-2",
    "relUrl": "/docs/history/#v3-7-2"
  },"335": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | CI: Test against Ruby 2.5.0 (#6664) | Bump rdoc to 6.0 (#6600) | Lint file and bump theme dependencies (#6698) | Write a Rubocop Cop to ensure no #p or #puts calls get committed to master. (#6615) | Remove redgreen gem (#6720) | . ",
    "url": "/docs/history/#development-fixes-v3-7-2",
    "relUrl": "/docs/history/#development-fixes-v3-7-2"
  },"336": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Display latest version in header (#6676) | Update version in config.yml via YAML load / dump (#6677) | . ",
    "url": "/docs/history/#site-enhancements-v3-7-2",
    "relUrl": "/docs/history/#site-enhancements-v3-7-2"
  },"337": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Fix: Add note about posts in context of collections_dir (#6680) | Update deploy-script in documentation (#6666) | Add note about naming of collections_dir (#6703) | Update installation.md (#6694) | Add jekyll-html to plugins. (#6654) | Update plugins.md (#6716) | Release v3.7.1 (#6695) | . ",
    "url": "/docs/history/#documentation-5",
    "relUrl": "/docs/history/#documentation-5"
  },"338": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | inform that symlinks are not allowed in safe mode (#6670) | Glob scope path only if configured with a pattern (#6692) | Add gem \"wdm\" to all newly generated Gemfiles (#6711) | Fix timezone inconsistencies between different ruby version (#6697) | Refactor collections_dir feature for consistency (#6685) | . ",
    "url": "/docs/history/#bug-fixes-v3-7-2",
    "relUrl": "/docs/history/#bug-fixes-v3-7-2"
  },"339": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Require external library only if necessary (#6596) | . ",
    "url": "/docs/history/#minor-enhancements-v3-7-2",
    "relUrl": "/docs/history/#minor-enhancements-v3-7-2"
  },"340": {
    "doc": "History",
    "title": "3.7.0 / 2018-01-02",
    "content": " ",
    "url": "/docs/history/#v3-7-0",
    "relUrl": "/docs/history/#v3-7-0"
  },"341": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add LiveReload functionality to Jekyll. (#5142) | Add Utils::Internet.connected? to determine whether host machine has internet connection. (#5870) | Disable default layouts for Pages with a layout: none declaration (#6182) | Scope path glob (#6268) | Allow the user to set collections_dir to put all collections under one subdirectory (#6331) | Upgrade to Rouge 3 (#6381) | Allow URL filters to work directly with documents (#6478) | filter relative_url should keep absolute urls with scheme/authority (#6490) | .sass-cache doesn't always land in options[&amp;#39;source&amp;#39;] (#6500) | Allow plugins to modify the obsolete files. (#6502) | Add latin mode to slugify (#6509) | Log Kramdown warnings if log level is WARN (#6522) | Add an option to configure kramdown warning output (#6554) | Add json extension to list of directory indices (#6550) | Dependency: Bump jekyll-watch to 2.0 (#6589) | Remove paginate check (#6606) | update classifier-reborn to 2.2.0 (#6631) | Switch to an actively-maintained TOML parser. (#6652) | Do not coerce layout paths in theme-gem to the source directory (#6603) | . ",
    "url": "/docs/history/#minor-enhancements-v3-7-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-7-0"
  },"342": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Raise when theme root directory is not available (#6455) | Avoid block parser warning in SmartyPants (#6565) | Fail gracefully if \"sass\" gem cannot be loaded (#6573) | return correct file in dir if dir has same name as file (#6569) | Register reload hooks in Server#process (#6605) | Memoize path to metadata file (#6602) | Use require_relative to load Jekyll classes (#6609) | . ",
    "url": "/docs/history/#bug-fixes-v3-7-0",
    "relUrl": "/docs/history/#bug-fixes-v3-7-0"
  },"343": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Added direct collection access to future collection item feature test(#6151) | add failing test for non-utf8 encoding (#6339) | Upgrade to Cucumber 3.0 (#6395) | Provide a better default hash for tracking liquid stats (#6417) | Add configuration for first-timers bot (#6431) | Do not linkify escaped characters as PRs in History (#6468) | Rely on jekyll-mentions for linking usernames (#6469) | Update first-timers-issue-template.md (#6472) | Enable Lint/RescueWithoutErrorClass Cop (#6482) | Clean up Rubocop config (#6495) | Use Gem to discover the location of bundler (#6499) | Remove unnecessary encoding comment (#6513) | Suggest using Rubocop to automatically fix errors (#6514) | Assert raising Psych::SyntaxError when&amp;#34;strict_front_matter&amp;#34;=&amp;gt;true (#6520) | Use Kernel#Array instead of explicit Array check (#6525) | RuboCop: Enable Style/UnneededCapitalW cop (#6526) | Refactor method to reduce ABC Metric size (#6529) | Remove parentheses around arguments to raise (#6532) | Use double-quotes around gem name (#6535) | Dependencies: upgrade to toml 0.2.0 (#6541) | Lock to cucumber 3.0.1 on Ruby 2.1 (#6546) | Bump JRuby version in Travis config (#6561) | Rescue from Psych::SyntaxError instead of SyntaxError after parsing YAML(#5828) | Drop forwarding to private methods by exposing those methods as public(#6577) | Upgrade pygments to v1.x (#5937) | Bump yajl-ruby (#6582) | Cleanup test_redcarpet.rb (#6584) | Add PageWithoutAFile class from jekyll plugins (#6556) | Cleanup LiveReloadReactor (#6607) | . ",
    "url": "/docs/history/#development-fixes-v3-7-0",
    "relUrl": "/docs/history/#development-fixes-v3-7-0"
  },"344": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Add formester to the list of saas form backend (#6059) | GitHub Pages instructions (#6384) | Improve documentation for theme-gem installation (#6387) | Fix diff syntax-highlighting (#6388) | Update instructions (#6396) | Fix code-block highlighting in docs (#6398) | Filtering Posts with categories, tags, or other variables (#6399) | Fixes formatting on pre-formatted text. (#6405) | Added new tutorial to tutorials section on docs (#6406) | Updates (#6407) | Fix collections_dir example (#6408) | Renaming duplicate of \"Scenario 6\" to \"Scenario 7\" (#6411) | Mark collection_dir as unreleased (#6412) | Fix link to SUPPORT (#6415) | Fix list appearance by adding missing ol tag (#6421) | Explain how to override output collection index page (#6424) | Added github-cards to the list of plugins (#6425) | CoC violation correspondents (#6429) | Add a note about Liquid and syntax highlighting (#6466) | Remove sudo from macOS troubleshooting instructions (#6486) | Add a note on :jekyll_plugins group in the docs (#6488) | Updated custom-404-page.md (#6489) | Fix a few minor issues in the docs (#6494) | Add jekyll-pwa-plugin (#6533) | Remove Jekyll-Smartify from plugins directory (#6548) | Updated Jekyll-Pug listing to include official website (#6555) | Remove link to severely outdated asset plugin (#6613) | Default time zone depends upon server (#6617) | Add disqus-for-jekyll to plugins. (#6618) | Update \"Requirements\" for Ruby version (#6623) | Fix: Update link to i18n_filter plugin (#6638) | Correct WordPress capitalization (#6645) | Add Tweetsert, Stickyposts, Paginate::Content (#6651) | Post: Jekyll 3.7.0 released (#6634) | . ",
    "url": "/docs/history/#documentation-6",
    "relUrl": "/docs/history/#documentation-6"
  },"345": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add special styling for code-blocks run in shell (#6389) | Add post about diversity (#6447) | Update list of files excluded from Docs site (#6457) | Update site History (#6460) | Add default twitter card image (#6476) | Update normalize.css to v7.0.0 (#6491) | Optimize images (#6519) | Back to original main navigation (#6544) | Styles: mobile-docs select element (#6545) | Search with DocSearch by @Algolia (#6557) | Site header redesign (#6567) | Move logo above site navigation on small screens (#6570) | Docs: Include version badge for latest features (#6574) | Use version-badge on an existing feature intro (#6575) | Add jekyll-category-pages plugin (#6632) | Improve docs styling for code to be run in shell (#6641) | Fix permalink icon markup in news-item layout (#6639) | . ",
    "url": "/docs/history/#site-enhancements-v3-7-0",
    "relUrl": "/docs/history/#site-enhancements-v3-7-0"
  },"346": {
    "doc": "History",
    "title": "3.6.3 / 2018-09-18",
    "content": " ",
    "url": "/docs/history/#v3-6-3",
    "relUrl": "/docs/history/#v3-6-3"
  },"347": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | 3.6.x: security: fix include bypass of EntryFilter#filter symlink check (#7229) | . ",
    "url": "/docs/history/#bug-fixes-v3-6-3",
    "relUrl": "/docs/history/#bug-fixes-v3-6-3"
  },"348": {
    "doc": "History",
    "title": "3.6.2 / 2017-10-21",
    "content": " ",
    "url": "/docs/history/#v3-6-2",
    "relUrl": "/docs/history/#v3-6-2"
  },"349": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Update Rubocop to 0.51.0 (#6444) | Add test for layout as string (#6445) | . ",
    "url": "/docs/history/#development-fixes-v3-6-2",
    "relUrl": "/docs/history/#development-fixes-v3-6-2"
  },"350": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Problematic UTF+bom files (#6322) | Always treat data.layout as a string (#6442) | . ",
    "url": "/docs/history/#bug-fixes-v3-6-2",
    "relUrl": "/docs/history/#bug-fixes-v3-6-2"
  },"351": {
    "doc": "History",
    "title": "3.6.1 / 2017-10-20",
    "content": " ",
    "url": "/docs/history/#v3-6-1",
    "relUrl": "/docs/history/#v3-6-1"
  },"352": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Doc y_day in docs/permalinks (#6244) | Update frontmatter.md (#6371) | Elaborate on excluding items from processing (#6136) | Style lists in tables (#6379) | Remove duplicate \"available\" (#6380) | . ",
    "url": "/docs/history/#documentation-7",
    "relUrl": "/docs/history/#documentation-7"
  },"353": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Bump rubocop to use v0.50.x (#6368) | . ",
    "url": "/docs/history/#development-fixes-v3-6-1",
    "relUrl": "/docs/history/#development-fixes-v3-6-1"
  },"354": {
    "doc": "History",
    "title": "3.6.0 / 2017-09-21",
    "content": " ",
    "url": "/docs/history/#v3-6-0",
    "relUrl": "/docs/history/#v3-6-0"
  },"355": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Ignore final newline in folded YAML string (#6054) | Add URL checks to Doctor (#5760) | Fix serving files that clash with directories (#6222) (#6231) | Bump supported Ruby version to &gt;= 2.1.0 (#6220) | set LiquidError#template_name for errors in included file (#6206) | Access custom config array throughout session (#6200) | Add support for Rouge 2, in addition to Rouge 1 (#5919) | Allow yield to logger methods &amp; bail early on no-op messages (#6315) | Update mime-types. (#6336) | Use a Schwartzian transform with custom sorting (#6342) | Alias Drop#invoke_drop to Drop#[] (#6338) | . ",
    "url": "/docs/history/#minor-enhancements-v3-6-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-6-0"
  },"356": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Deprecator: fix typo for --serve command (#6229) | Reader#read_directories: guard against an entry not being a directory (#6226) | kramdown: symbolize keys in-place (#6247) | Call to_s on site.url before attempting to concatenate strings (#6253) | Enforce Style/FrozenStringLiteralComment (#6265) | Update theme-template README to note 'assets' directory (#6257) | Memoize the return value of Document#url (#6266) | delegate StaticFile#to_json to StaticFile#to_liquid (#6273) | Fix Drop#key? so it can handle a nil argument (#6281) | Guard against type error in absolute url (#6280) | Mutable drops should fallback to their own methods when a mutation isn't present (#6350) | Skip adding binary files as posts (#6344) | Don't break if bundler is not installed (#6377) | . ",
    "url": "/docs/history/#bug-fixes-v3-6-0",
    "relUrl": "/docs/history/#bug-fixes-v3-6-0"
  },"357": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Fix a typo in custom-404-page.md (#6218) | Docs: fix links to issues in History.markdown (#6255) | Update deprecated gems key to plugins. (#6262) | Fixes minor typo in post text (#6283) | Execute build command using bundle. (#6274) | name unification - buddy details (#6317) | name unification - application index (#6318) | trim and relocate plugin info across docs (#6311) | update Jekyll's README (#6321) | add SUPPORT file for GitHub (#6324) | Rename CODE_OF_CONDUCT to show in banner (#6325) | Docs : illustrate page.id for a collection's document (#6329) | Docs: post's date can be overridden in front matter (#6334) | Docs: site.url behavior on development and production environments (#6270) | Fix typo in site.url section of variables.md :-[ (#6337) | Docs: updates (#6343) | Fix precedence docs (#6346) | add note to contributing docs about script/console (#6349) | Docs: Fix permalink example (#6375) | . ",
    "url": "/docs/history/#documentation-8",
    "relUrl": "/docs/history/#documentation-8"
  },"358": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Adding DevKit helpers (#6225) | Customizing url in collection elements clarified (#6264) | Plugins is the new gems (#6326) | . ",
    "url": "/docs/history/#site-enhancements-v3-6-0",
    "relUrl": "/docs/history/#site-enhancements-v3-6-0"
  },"359": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Strip unnecessary leading whitespace in template (#6228) | Users should be installing patch versions. (#6198) | Fix tests (#6240) | Define path with __dir__ (#6087) | exit site.process sooner (#6239) | make flakey test more robust (#6277) | Add a quick test for DataReader (#6284) | script/backport-pr: commit message no longer includes the # (#6289) | Add Add CODEOWNERS file to help automate reviews. (#6320) | Fix builds on codeclimate (#6333) | Bump rubies on Travis (#6366) | . ",
    "url": "/docs/history/#development-fixes-v3-6-0",
    "relUrl": "/docs/history/#development-fixes-v3-6-0"
  },"360": {
    "doc": "History",
    "title": "3.5.2 / 2017-08-12",
    "content": " ",
    "url": "/docs/history/#v3-5-2",
    "relUrl": "/docs/history/#v3-5-2"
  },"361": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Backport #6281 for v3.5.x: Fix Drop#key? so it can handle a nil argument (#6288) | Backport #6280 for v3.5.x: Guard against type error in absolute_url (#6287) | Backport #6266 for v3.5.x: Memoize the return value of Document#url (#6301) | Backport #6273 for v3.5.x: delegate StaticFile#to_json to StaticFile#to_liquid (#6302) | Backport #6226 for v3.5.x: Reader#read_directories: guard against an entry not being a directory (#6304) | Backport #6247 for v3.5.x: kramdown: symbolize keys in-place (#6303) | . ",
    "url": "/docs/history/#bug-fixes-v3-5-2",
    "relUrl": "/docs/history/#bug-fixes-v3-5-2"
  },"362": {
    "doc": "History",
    "title": "3.5.1 / 2017-07-17",
    "content": " ",
    "url": "/docs/history/#v3-5-1",
    "relUrl": "/docs/history/#v3-5-1"
  },"363": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Use Warn for deprecation messages (#6192) | site template: Use plugins key instead of gems (#6045) | . ",
    "url": "/docs/history/#minor-enhancements-v3-5-1",
    "relUrl": "/docs/history/#minor-enhancements-v3-5-1"
  },"364": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Backward compatibilize URLFilters module (#6163) | Static files contain front matter default keys when to_liquid‘d (#6162) | Always normalize the result of the relative_url filter (#6185) | . ",
    "url": "/docs/history/#bug-fixes-v3-5-1",
    "relUrl": "/docs/history/#bug-fixes-v3-5-1"
  },"365": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Update reference to trouble with OS X/macOS (#6139) | added BibSonomy plugin (#6143) | add plugins for multiple page pagination (#6055) | Update minimum Ruby version in installation.md (#6164) | Add information about finding a collection in site.collections (#6165) | Add {% raw %} to Liquid example on site (#6179) | Added improved Pug plugin - removed 404 Jade plugin (#6174) | Linking the link (#6210) | Small correction in documentation for includes (#6193) | Fix docs site page margin (#6214) | . ",
    "url": "/docs/history/#documentation-9",
    "relUrl": "/docs/history/#documentation-9"
  },"366": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Add jekyll doctor to GitHub Issue Template (#6169) | Test with Ruby 2.4.1-1 on AppVeyor (#6176) | set minimum requirement for jekyll-feed (#6184) | . ",
    "url": "/docs/history/#development-fixes-v3-5-1",
    "relUrl": "/docs/history/#development-fixes-v3-5-1"
  },"367": {
    "doc": "History",
    "title": "3.5.0 / 2017-06-18",
    "content": " ",
    "url": "/docs/history/#v3-5-0",
    "relUrl": "/docs/history/#v3-5-0"
  },"368": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Upgrade to Liquid v4 (#4362) | Convert StaticFile liquid representation to a Drop &amp; add front matter defaults support to StaticFiles (#5871) | Add support for Tab-Separated Values data files (*.tsv) (#5985) | Specify version constraint in subcommand error message. (#5974) | Add a template for custom 404 page (#5945) | Require runtime_dependencies of a Gem-based theme from its .gemspec file (#5914) | Don’t raise an error if URL contains a colon (#5889) | Date filters should never raise an exception (#5722) | add plugins config key as replacement for gems (#5130) | create configuration from options only once in the boot process (#5487) | Add option to fail a build with front matter syntax errors (#5832) | Disable default layouts for documents with a layout: none declaration (#5933) | In jekyll new, make copied site template user-writable (#6072) | Add top-level layout liquid variable to Documents (#6073) | Address reading non-binary static files in themes (#5918) | Allow filters to sort &amp; select based on subvalues (#5622) | Add strip_index filter (#6075) | . ",
    "url": "/docs/history/#minor-enhancements-v3-5-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-5-0"
  },"369": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Install troubleshooting on Ubuntu (#5817) | Add Termux section on troubleshooting (#5837) | fix ial css classes in theme doc (#5876) | Update installation.md (#5880) | Update Aerobatic docs (#5883) | Add note to collections doc on hard-coded collections. (#5882) | Makes uri_escape template docs more specific. (#5887) | Remove duplicate footnote_nr from default config (#5891) | Fixed tutorial for publishing gem to include repo. (#5900) | update broken links (#5905) | Fix typo in contribution information (#5910) | update plugin repo URL to reflect repo move (#5916) | Update exclude array in configuration.md (#5947) | Fixed path in “Improve this page” link in Tutorials section (#5951) | Corrected permalink (#5949) | Included more details about adding defaults to static files (#5971) | Create buddyworks (#5962) | added (buddyworks) to ci list (#5965) | Add a tutorial on serving custom Error 404 page (#5946) | add custom 404 to tutorial navigation (#5978) | Add link to order of interpretation tutorial in Tutorials nav (#5952) | Document Jekyll’s Philosophy (#5792) | Require Ruby &gt; 2.1.0 (#5983) | Fix broken link (#5994) | Default options for script/proof (#5995) | Mention Bash on Ubuntu on Windows (#5960) | Document --unpublished flag introduced in 91e9ecf (#5959) | Update upgrading.md to mention usage of bundle update (#5604) | Fix missing quotation mark (#6002) | New tutorial: Convert an HTML site to Jekyll (#5881) | Revamp Permalink section (#5912) | Fixup tutorial on creating theme from existing HTML templates (#6006) | Standardise on “URLs” without apostrophe in docs (#6018) | Added txtpen in tutorial (#6021) | fix typo using past participle (#6026) | changed formatting to fit the style of the documentation (#6027) | doc fix typo word usage (#6028) | corrected reference to layout in index.md (#6032) | (Minor) Update MathJax CDN (#6013) | Add MvvmCross to samples (#6035) | Update travis-ci.md to correct procedure (#6043) | fix sentence in documentation (#6048) | rephrase a sentence in posts.md to be more direct (#6049) | Compress Website Sass output (#6009) | doc correct spelling error (#6050) | adjusted date-format in sitemap (#6053) | Typo fix (welcomed change -&gt; welcome change). (#6070) | Fixed documentation inconsistency (#6068) | Add own plugin -&gt; Jekyll Brand Social Wall (#6064) | Added plugin jekyll-analytics (#6042) | Use more precise language when explaining links (#6078) | Update plugins.md (#6088) | windows 10 tutorial (#6100) | Explain how to override theme styles (#6107) | updated Bash on Ubuntu on Windows link in tutorial (#6111) | Fix wording in _docs/templates.md links section (#6114) | Update windows.md (#6115) | Added windows to docs.yml (#6109) | Be more specific on what to upload (#6119) | Remove Blank Newlines from “Jekyll on Windows” Page (#6126) | Link the troubleshooting page in the quickstart page (#6134) | add documentation about the \"pinned\" label (#6147) | docs(JekyllOnWindows): Add a new Installation way (#6141) | corrected windows.md (#6149) | Refine documentation for Windows (#6153) | . ",
    "url": "/docs/history/#documentation-10",
    "relUrl": "/docs/history/#documentation-10"
  },"370": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Rubocop: add missing comma (#5835) | Appease classifier-reborn (#5934) | Allow releases &amp; development on *-stable branches (#5926) | Add script/backport-pr (#5925) | Prefer .yaml over .toml (#5966) | Fix Appveyor with DST-aware cucumber steps (#5961) | Use Rubocop v0.47.1 till we’re ready for v0.48 (#5989) | Test against Ruby 2.4.0 (#5687) | rubocop: lib/jekyll/renderer.rb complexity fixes (#5052) | Use yajl-ruby 1.2.2 (now with 2.4 support) (#6007) | Bump Rubocop to v0.48 (#5997) | doc use example.com (#6031) | fix typo (#6040) | Fix CI (#6044) | Remove ruby RUBY_VERSION from generated Gemfile (#5803) | Test if hidden collections output a document with a future date (#6103) | Add test for uri_escape on reserved characters (#6086) | Allow you to specify the rouge version via an environment variable for testing (#6138) | Bump Rubocop to 0.49.1 (#6093) | Lock nokogiri to 1.7.x for Ruby 2.1 (#6140) | . ",
    "url": "/docs/history/#development-fixes-v3-5-0",
    "relUrl": "/docs/history/#development-fixes-v3-5-0"
  },"371": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Corrected date for version 3.4.0 (#5842) | Add the correct year to the 3.4.0 release date (#5858) | Add documentation about order of interpretation (#5834) | Documentation on how to build navigation (#5698) | Navigation has been moved out from docs (#5927) | Make links in sidebar for current page more prominent (#5820) | Update normalize.css to v6.0.0 (#6008) | Docs: rename gems to plugins (#6082) | plugins -&gt; gems (#6110) | Document difference between cgi_escape and uri_escape #5970 (#6081) | . ",
    "url": "/docs/history/#site-enhancements-v3-5-0",
    "relUrl": "/docs/history/#site-enhancements-v3-5-0"
  },"372": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Exclude Gemfile by default (#5860) | Convertible#validate_permalink!: ensure the return value of data[\"permalink\"] is a string before asking if it is empty (#5878) | Allow abbreviated post dates (#5920) | Remove dependency on include from default about.md (#5903) | Allow colons in uri_escape filter (#5957) | Re-surface missing public methods in Jekyll::Document (#5975) | absolute_url should not mangle URL if called more than once (#5789) | patch URLFilters to prevent // (#6058) | add test to ensure variables work in where_exp condition (#5315) | Read explicitly included dot-files in collections. (#6092) | Default baseurl to nil instead of empty string (#6137) | Filters#time helper: Duplicate time before calling #localtime. (#5996) | . ",
    "url": "/docs/history/#bug-fixes-v3-5-0",
    "relUrl": "/docs/history/#bug-fixes-v3-5-0"
  },"373": {
    "doc": "History",
    "title": "3.4.5 / 2017-06-30",
    "content": ". | Backport #6185 for v3.4.x: Always normalize the result of the relative_url filter (#6186) | . ",
    "url": "/docs/history/#v3-4-5",
    "relUrl": "/docs/history/#v3-4-5"
  },"374": {
    "doc": "History",
    "title": "3.4.4 / 2017-06-17",
    "content": ". | Backport #6137 for v3.4.x: Default baseurl to nil instead of empty string (#6146) | . ",
    "url": "/docs/history/#v3-4-4",
    "relUrl": "/docs/history/#v3-4-4"
  },"375": {
    "doc": "History",
    "title": "3.4.3 / 2017-03-21",
    "content": ". | Backport #5957 for v3.4.x: Allow colons in uri_escape filter (#5968) | . ",
    "url": "/docs/history/#v3-4-3",
    "relUrl": "/docs/history/#v3-4-3"
  },"376": {
    "doc": "History",
    "title": "3.4.2 / 2017-03-09",
    "content": ". | Backport #5871 for v3.4.x: Convert StaticFile liquid representation to a Drop &amp; add front matter defaults support to StaticFiles (#5940) | . ",
    "url": "/docs/history/#v3-4-2",
    "relUrl": "/docs/history/#v3-4-2"
  },"377": {
    "doc": "History",
    "title": "3.4.1 / 2017-03-02",
    "content": ". | Backport #5920 for v3.4.x: Allow abbreviated post dates (#5924) | . ",
    "url": "/docs/history/#v3-4-1",
    "relUrl": "/docs/history/#v3-4-1"
  },"378": {
    "doc": "History",
    "title": "3.4.0 / 2017-01-27",
    "content": " ",
    "url": "/docs/history/#v3-4-0",
    "relUrl": "/docs/history/#v3-4-0"
  },"379": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add connector param to array_to_sentence_string filter (#5597) | Adds group_by_exp filter (#5513) | Use Addressable instead of URI to decode (#5726) | throw IncludeTagError if error occurs in included file (#5767) | Write Jekyll::Utils::Exec.run for running shell commands. (#5640) | Use the current year for the LICENSE of theme (#5712) | Update License (#5713) | . ",
    "url": "/docs/history/#minor-enhancements-v3-4-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-4-0"
  },"380": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Escaped regular expressions when using post_url. (#5605) | fix date parsing in file names to be stricter (#5609) | Add a module to re-define ENV[\"TZ\"] in Windows (#5612) | Use each instead of map to actually return nothing (#5668) | include: fix ‘no implicit conversion of nil to String’ (#5750) | Don’t include the theme’s includes_path if it is nil. (#5780) | test double slash when input = ‘/’ (#5542) | use logger.info for related posts (#5822) | . ",
    "url": "/docs/history/#bug-fixes-v3-4-0",
    "relUrl": "/docs/history/#bug-fixes-v3-4-0"
  },"381": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Use only the used Font Awesome icons. (#5530) | Switch to https when possible. (#5611) | Update _font-awesome.scss to move .woff file before .ttf (#5614) | Update documentation on updating FontAwesome Iconset (#5655) | Use defaults for docs and news-items (#5744) | Sort gems in docs/_config.yml (#5746) | Add missing class (#5791) | Improve template docs (#5694) | . ",
    "url": "/docs/history/#site-enhancements-v3-4-0",
    "relUrl": "/docs/history/#site-enhancements-v3-4-0"
  },"382": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | clean unit-test names in test/test_tags.rb (#5608) | Add cucumber feature to test for bonafide theme gems (#5384) | Use assert_nil instead of assert_equal nil (#5652) | Rubocop -a on lib/jekyll (#5666) | Bump to rake 12.0 (#5670) | Rubocop Gemfile (#5671) | update Classifier-Reborn to 2.1.0 (#5711) | Rubocop: fix Rakefile and gemspec (#5745) | Use assert_nil (#5725) | Sort gems in jekyll.gemspec (#5746) | Rubocop: Require consistent comma in multiline literals (#5761) | Bump rubocop (#5765) | New rubocop security checks (#5768) | test/helper: fix flaky plugin path test by removing calls to Dir.chdir without a block (#5779) | Use latest jemoji gem (#5782) | Bump htmlproofer (#5781) | Bump rubies we test against (#5784) | Bump rdoc to v5.0 (#5797) | Bump codeclimate-test-reporter to v1.0.5 (#5798) | . ",
    "url": "/docs/history/#development-fixes-v3-4-0",
    "relUrl": "/docs/history/#development-fixes-v3-4-0"
  },"383": {
    "doc": "History",
    "title": "Documentation",
    "content": ". | Improve quickstart docs (#5689) | Add Jekyll-Post to list of plugins (#5705) | Add jekyll-numbered-headings (#5688) | Docs: move permalinks from documents into config (#5544) | Improve collections docs (#5691) | Fix #5730: add gcc and make to the list of requirements (#5731) | Remove instructions to install Jekyll 2 on Windows (#5582) | Fix example URL inconsistency (#5592) | Replace backticks within HTML blocks with HTML tags (#5435) | Add jekyll-migrate-permalink (#5600) | Fix bad config YAML in collections example (#5587) | Bring documentation on ‘Directory Structure’ up-to-date (#5573) | Fixed typo (#5632) | use backticks for Gemfile for consistency since in the next sentence … (#5641) | Update Core team list in the README file (#5643) | Improve Permalinks documentation. (#5653) | Fix typo in Variables doc page (#5657) | Fix a couple of typos in the docs (#5658) | Update windows.md (#5683) | Improve permalinks docs (#5693) | Document –unpublished build option (#5720) | Improve pages docs (#5692) | Added new includes.md topic to docs (#5696) | Replace a dead link with a web-archived one (#5738) | Remove duplicate paragraph. (#5740) | Addition of a sample “typical post” (#5473) | Fix a minor grammatical mistake on themes’ document ### -dev (#5748) | Correct comments in data_reader.rb (#5621) | Add jekyll-pre-commit to plugins list (#5752) | Update quickstart.md (#5758) | Correct minor typo (#5764) | Fix a markdown link to look properly on the web (#5769) | Info about the help command usage (#5312) | Add missing merge labels for jekyllbot (#5753) | Fix broken links in documentation (#5736) | Docs: add match_regex and replace_regex filters (#5799) | Got that diaper money? (#5810) | Sort content by popularity using Google Analytics (#5812) | Rework CI doc to include multiple providers. (#5815) | Improve theme docs (#5690) | Add mention of classifier-reborn for LSI (#5811) | Added note about –blank flag (#5802) | Fixed inaccuracy in “Built-in permalink styles” docs (#5819) | . ",
    "url": "/docs/history/#documentation-11",
    "relUrl": "/docs/history/#documentation-11"
  },"384": {
    "doc": "History",
    "title": "3.3.1 / 2016-11-14",
    "content": " ",
    "url": "/docs/history/#v3-3-1",
    "relUrl": "/docs/history/#v3-3-1"
  },"385": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Collapse gsub for performance (#5494) | URL: warn if key doesn’t exist in url drop (#5524) | . ",
    "url": "/docs/history/#minor-enhancements-v3-3-1",
    "relUrl": "/docs/history/#minor-enhancements-v3-3-1"
  },"386": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix typo in theme_template README (#5472) | Do not swallow all exceptions on render (#5495) | Site template: fixed _config.yml comment typo (#5511) | jekyll new-theme should specify Jekyll as a runtime dependency for the theme (#5457) | Be much more specific about ignoring specific vendored directories. (#5564) | Only warn about auto-regeneration bug on Bash On Windows. (#5464) | Allow permalink template to have underscores (#5572) | . ",
    "url": "/docs/history/#bug-fixes-v3-3-1",
    "relUrl": "/docs/history/#bug-fixes-v3-3-1"
  },"387": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Documentation: link Liquid tag (#5449) | Updating install instruction link for Jekyll 3 on Windows (#5475) | Update normalize.css to v5.0.0 (#5471) | Add jekyll-data to the list of plugins (#5491) | Add info about checking version + updating (#5497) | Add jekyll-include-absolute-plugin to list of third-party plugins (#5492) | Remove jekyll-hook from deployment methods (#5502) | Update deployment-methods.md (#5504) | Ubuntu users should install ruby2.3-dev (#5512) | Remove Glynn as deployment option (#5519) | Fix broken forum link (#5466) | Move documentation to docs folder (#5459) | Fix broken links in CONTRIBUTING (#5533) | Update documentation on jekyllrb.com (#5540) | Fix HTML rendering (#5536) | Remove outdated deployment information (#5557) | no more invalid US-ASCII on lines 30 and 97 (#5520) | Add permalinks to docs in ‘/maintaining/’ (#5532) | Add jekyll-pinboard to list of third-party plugins (#5514) | Fix formatting in 2-to-3.md (#5507) | Add two plugins to the plugins page (#5493) | Use site.baseurl before link and post_url tags (#5559) | Fix link to jekyll-pinboard plugin (#5570) | mention docs folder as a way to deploy on GitHub Pages (#5571) | . ",
    "url": "/docs/history/#site-enhancements-v3-3-1",
    "relUrl": "/docs/history/#site-enhancements-v3-3-1"
  },"388": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | fix rubocop errors on testing with Rubocop 0.44 (#5489) | script/test: add missing whitespace (#5479) | Restrict Rubocop version (#5496) | include a hashbang for all benchmark scripts &amp; make them executable (#5505) | Update source in script/proof (#5538) | Collections.feature: conditional steps to have it pass on Windows (#5546) | Fix tests to get script/test to pass on Windows (#5526) | . ",
    "url": "/docs/history/#development-fixes-v3-3-1",
    "relUrl": "/docs/history/#development-fixes-v3-3-1"
  },"389": {
    "doc": "History",
    "title": "3.3.0 / 2016-10-06",
    "content": " ",
    "url": "/docs/history/#v3-3-0",
    "relUrl": "/docs/history/#v3-3-0"
  },"390": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Colorize interpolated output in logger.info (#5239) | Site template: exclude Gemfile and Gemfile.lock in site config (#5293) | Fix #5233: Increase our ability to detect Windows. (#5235) | update gitignore template to ignore theme gems built by user (#5326) | Adds ability to link to all files (#5199) | Exclude vendor by default (#5361) | Add ThemeAssetsReader which reads assets from a theme (#5364) | Add bundle install to jekyll new command (#5237) | Add absolute_url and relative_url filters. (#5399) | Site template: remove css/ from new site scaffolding (#5402) | Site template: Move contents of the index.html page to the ‘home’ layout (#5420) | Exclude node_modules by default (#5210) | Run hooks in priority order. (#5157) | Add static_file.name and .basename Liquid attributes (#5264) | set site.url in dev environment to http://localhost:4000 (#5431) | Add support for indented link references on excerpt (#5212) | . ",
    "url": "/docs/history/#minor-enhancements-v3-3-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-3-0"
  },"391": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Use jekyll-feed to generate the default site’s RSS feed (#5196) | Site#configure_theme: do not set theme unless it’s a string (#5189) | Convertible: set self.output in #render_all_layouts and #do_layout (#5337) | Only complain about kramdown.coderay if it is actually in the config (#5380) | Clarify documentation in theme gem’s README template (#5376) | Allow underscore in highlighter language (#5375) | Site template: set empty url in config file by default (#5338) | Site template config: prepend ‘jekyll serve’ with ‘bundle exec’ (#5430) | Don’t call File.utime for StaticFiles if it’s a symlink (#5427) | Fix handling of non-ASCII characters in new *_url filters (#5410) | Remove autoload of Draft which no longer exists. (#5441) | Fix issue where Windows drive name is stripped from Jekyll.sanitized_path incorrectly (#5256) | Fix bug where post_url tag matched incorrect post with subdirectory (#4873) | Fix loading data from subdir with a period in name (#5433) | Revert Commands::Serve#server_address signature change. (#5456) | . ",
    "url": "/docs/history/#bug-fixes-v3-3-0",
    "relUrl": "/docs/history/#bug-fixes-v3-3-0"
  },"392": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Document to_integer and inspect filters (#5185) | Fix path in the prompt (#5194) | need subcommand build (#5190) | Add the Jekyll Cloudinary plugin (#5183) | Documentation : new-theme command (#5205) | Document link Liquid tag (#5182) | Remove mention of page for link tag in release post (#5214) | fixed typo (#5226) | Add missing comma (#5222) | Maintain aspect ratio with height: auto; (#5254) | Fix a link in deployment-methods.md (#5244) | Documentation: improve highlight in Creating a theme (#5249) | Bundler isn’t installed by default (#5258) | Update troubleshooting documentation to include fix for issue with vendored gems (#5271) | Link --lsi option’s description to Wikipedia docs on LSI (#5274) | Document --profile option on the configuration page (#5279) | Update homepage to sync with merge of #5258 (#5287) | Add post about Jekyll Admin initial release (#5291) | Replace liquid highlight tag with backticks (#5262) | Word update (#5294) | Site documentation section links always point to https://jekyllrb.com (#5281) | Missing :site, :post_render payload documentation on site (#5280) | Site: exclude README.md and .gitignore (#5304) | Add link to Staticman (#5224) | Update url for OpenShift (#5320) | Add help for missing static_file e.g. on heroku (#5334) | Add a line about updating theme-gems in the docs (#5318) | Explain how to copy a theme’s files (#5335) | .md as default extension in examples (#5316) | Fix small typo in docs (#5347) | Add missing period to sentence in first paragraph. (#5372) | added jekyll-spotify plugin (#5369) | Add jekyll-menus to the list of plugins. (#5397) | macOS and one grammar fix (#5403) | Add documentation for relative_url and absolute_url (#5405) | Bugfix on logo in JSON-LD (#5421) | Fix Travis.ci documentation (#5413) | Update documentation regarding bundle install after jekyll new (#5428) | Replace classic box-sizing reset with inheritance reset (#5411) | Update Wikipedia YAML list link (#5452) | Add Jekyll 3.3 release post (#5442) | . ",
    "url": "/docs/history/#site-enhancements-v3-3-0",
    "relUrl": "/docs/history/#site-enhancements-v3-3-0"
  },"393": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Update appveyor.yml and fix optional deps for Ruby x64 (#5180) | Improve tests for Jekyll::PluginManager (#5167) | Update Ruby versions in travis.yml (#5221) | Avoid installing unnecessary gems for site testing (#5272) | Proposal: Affinity teams and their captains (#5273) | Replace duplicate with positive local test in issue template (#5286) | Update AppVeyor config. (#5240) | Execute jekyll from clone instead of defined binary when running ‘script/default-site’ (#5295) | rubocop: lib/jekyll/document.rb complexity fixes (#5045) | Proxy a number of Convertible methods to Renderer (#5308) | Run executable for Cucumber via Ruby instead of Shell (#5383) | Appease Rubocop (#5381) | remove features’ directories on windows with proper access (#5389) | site_configuration.feature: use UTC format in timezone (#5416) | swallow bundle output from jekyll new while in CI (#5408) | Add .editorconfig (#5412) | . ",
    "url": "/docs/history/#development-fixes-v3-3-0",
    "relUrl": "/docs/history/#development-fixes-v3-3-0"
  },"394": {
    "doc": "History",
    "title": "3.2.1 / 2016-08-02",
    "content": " ",
    "url": "/docs/history/#v3-2-1",
    "relUrl": "/docs/history/#v3-2-1"
  },"395": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Include theme directories in default gemspec (#5152) | Fix for symlinked themes (#5156) | Layout: set relative_path without using Pathname (#5164) | . ",
    "url": "/docs/history/#bug-fixes-v3-2-1",
    "relUrl": "/docs/history/#bug-fixes-v3-2-1"
  },"396": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Add test to build the default site (#5154) | script/default-site: specify BUNDLE_GEMFILE for new site (#5178) | script/default-site: read Jekyll source from local clone (#5188) | . ",
    "url": "/docs/history/#development-fixes-v3-2-1",
    "relUrl": "/docs/history/#development-fixes-v3-2-1"
  },"397": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Enable site excerpts (#5150) | Initial 404 page (#5143) | Remove the “this feature is unreleased” warning from the theme docs (#5158) | Future True on GitHub Pages note (#5173) | Minor updates and corrections (#5177) | index.html: update instructions to require bundler (#5169) | docs/quickstart: update instructions to require bundler (#5168) | . ",
    "url": "/docs/history/#site-enhancements-v3-2-1",
    "relUrl": "/docs/history/#site-enhancements-v3-2-1"
  },"398": {
    "doc": "History",
    "title": "3.2.0 / 2016-07-26",
    "content": " ",
    "url": "/docs/history/#v3-2-0",
    "relUrl": "/docs/history/#v3-2-0"
  },"399": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Stop testing with Ruby 2.0.x EOL (#4381) | Allow collections to have documents that have no file extension (#4545) | Add size property to group_by result (#4557) | Site Template: Removed unnecessary nesting from _base.scss (#4637) | Adding a debug log statement for skipped future documents. (#4558) | Site Template: Changed main &lt;div&gt; to &lt;main&gt; and added accessibility info (#4636) | Add array support to where filter (#4555) | ‘jekyll clean’: also remove .sass-cache (#4652) | Clean up Tags::PostUrl a bit, including better errors and date parsing (#4670) | Use String#encode for xml_escape filter instead of CGI.escapeHTML (#4694) | Add show_dir_listing option for serve command and fix index file names (#4533) | Site Template: write a Gemfile which is educational to the new site (#4542) | Site template: add explanation of site variables in the example _config.yml (#4704) | Adds link Liquid tag to make generation of URLs easier (#4624) | Allow static files to be symlinked in unsafe mode or non-prod environments (#4640) | Add :after_init hook &amp; add Site#config= to make resetting config easy (#4703) | DocumentDrop: add #&lt;=&gt; which sorts by date (falling back to path) (#4741) | Add a where_exp filter for filtering by expression (#4478) | Globalize Jekyll’s Filters. (#4792) | Gem-based themes (#4595) | Allow symlinks if they point to stuff inside site.source (#4710) | Update colorator dependency to v1.x (#4855) | Move EntryFilter to use Pathutil &amp; fix glob_include? (#4859) | Add ‘jekyll new-theme’ command to help users get up and running creating a theme (#4848) | markdownify and smartify should convert input to string before conversion (#4958) | Run Site#generate for ‘jekyll doctor’ to catch plugin issues (#5005) | Add normalize_whitespace filter (#4917) | Move bin/jekyll to exe/jekyll to prevent collision with binstubs (#5014) | Cleaning up site template &amp; theme updates. (#4922) | Add fetch method to Drops (#5056) | Extract tag name to class method (#5063) | check if relative URL contains a colon (#5069) | Enable strict (or lax) liquid parsing via a config variable. (#5053) | Add filter: to_integer (#5101) | watcher: pass site instance to watch plugin (#5109) | Show liquid warnings. (#5129) | Add --baseurl to build subcommand (#5135) | . ",
    "url": "/docs/history/#minor-enhancements-v3-2-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-2-0"
  },"400": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Site Template: Added a default lang attribute (#4633) | Site template: Escape title and description where it is used in HTML (#4606) | Document#date: drafts which have no date should use source file mtime (#4611) | Filters#time: clone an input Time so as to be non-destructive (#4590) | Doctor: fix issue where --config wasn’t a recognized flag (#4598) | Ensures related_posts are only set for a post (#4620) | EntryFilter#special?: ignore filenames which begin with ~ (#4491) | Cleaner: keep_files should only apply to the beginning of paths, not substrings with index &gt; 0 (#3849) | Use SSLEnable instead of EnableSSL and make URL HTTPS. (#4693) | convertible: use Document::YAML_FRONT_MATTER_REGEXP to parse transformable files (#4786) | Example in the site template should be IANA-approved example.com (#4793) | 3.2.x/master: Fix defaults for Documents (posts/collection docs) (#4808) | Don’t rescue LoadError or bundler load errors for Bundler. (#4857) | Serve.process should receive same config as Build.process (#4953) | Prevent reset of page in Liquid payload right before rendering layouts (#5009) | Add missing fields to ExcerptDrop (#5067) | Stringify configuration overrides before first use (#5060) | hooks: move after_init hook call at the end of Site#initialize (#5106) | filters: raise error if no input given to date filters (#5127) | where_exp filter should filter posts (#4860) | . ",
    "url": "/docs/history/#bug-fixes-v3-2-0",
    "relUrl": "/docs/history/#bug-fixes-v3-2-0"
  },"401": {
    "doc": "History",
    "title": "Forward Ports",
    "content": ". | From v3.1.4: Add ExcerptDrop and remove excerpt’s ability to refer to itself in Liquid (#4941) | From v3.1.4: Configuration permalink fix and addition of Configuration.from and sorting site.collections by label (#4942) | From v3.1.4: Fix {{ layout }} oddities (proper inheritance &amp; fixing overflow of old data) (#4943) | From v3.1.5: Sort the results of the require_all glob (#4944) | From v3.1.6: Add ability to render drops as JSON (#4945) | . ",
    "url": "/docs/history/#forward-ports-v3-2-0",
    "relUrl": "/docs/history/#forward-ports-v3-2-0"
  },"402": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Add project maintainer profile links (#4591) | Fix state leakage in Kramdown test (#4618) | Unify method for copying special files from repo to site (#4601) | Refresh the contributing file (#4596) | change smartify doc from copy/paste of markdownify doc (#4653) | Update Rake &amp; disable warnings when running tests (#4720) | Fix many warnings (#4537) | Don’t blindly assume the last system when determining “open” cmd (#4717) | Fix “locally” typo in contributing documentation (#4756) | Update Rubocop rules (#4886) | Flesh out the issue template to be much more detailed (#4849) | Fixing rubocop offenses in lib/jekyll/cleaner.rb (#4892) | Update jekyll/commands* to pass rubocop rules (#4888) | Clean up many test files to pass Rubocop rules (#4902) | Rubocop cleanup for some utils and further test files (#4916) | Rubocop: Low hanging fruit (#4936) | Rubocop: Drop changes from v3.1 forward-ports (#4949) | Rubocop: cleanup for misc files (#4946) | Rubocop: Stevenson (#4951) | Rubocop: lib/jekyll/entry_filter.rb (#4950) | Rubocop: test/* (#4947) | Rubocop: features (#4934) | Rubocop: Liquid renderer (#4933) | Rubocop: converters (#4931) | Rubocop: Site Drop (#4948) | Rubocop: tags (#4938) | Rubocop: Readers (#4932) | rubocop: jekyll/lib/frontmatter_defaults.rb (#4974) | rubocop: features/step_definitions.rb (#4956) | Rubocop theme and url jekyll libs (#4959) | Rubocop jekyll.rb (#4966) | Rubocop: use %r for all regular expressions. (#4979) | Cleanup and make misc files compliant with Rubocop. (#4940) | Rubocop: jekyll/lib/site.rb (#4973) | Add timings for each scenario in cucumber &amp; print worst offenders (#4908) | rubocop: jekyll/lib/filters.rb (#4993) | Fix rubocop offenses in exe/jekyll (#5017) | Rubocop: lib/jekyll/command.rb (#5018) | rubocop: lib/jekyll/static_file.rb (#5019) | rubocop: lib/jekyll/utils.rb (#5026) | rubocop: lib/jekyll/regenerator.rb (#5025) | rubocop: lib/jekyll/configuration.rb (#5024) | rubocop: lib/jekyll/renderer.rb style fixes (#5032) | rubocop: lib/jekyll/convertible.rb style fixes (#5031) | rubocop: lib/jekyll/document.rb style fixes (#5030) | Remove ruby-head from Travis matrix &amp; fix jruby failures (#5015) | Remove useless statement from Configuration test (#5065) | Change baseurl to example.com for some test cases (#5068) | use activesupport &lt; 5 if we are on a Ruby &lt; 2.2.2 (#5100) | Internal documentation for working on Jekyll (#5011) | rubocop: lib/jekyll/collection.rb (#5022) | tests: Typo fixes. (#5114) | Normalize yml files. (#5116) | Whitespace cleanup. (#5113) | Add AppVeyor support. (#5115) | appveyor.yml: drop Ruby 2.0.0. (#5119) | Fix indentation in benchmark (#5124) | Style fixes for Rubocop 0.42.0 - var == 0 becomes var.zero? - when defining method_missing, also define respond_to_missing? (#5137) | . ",
    "url": "/docs/history/#development-fixes-v3-2-0",
    "relUrl": "/docs/history/#development-fixes-v3-2-0"
  },"403": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add jekyll-seo-tag, jekyll-avatar, and jekyll-sitemap to the site (#4553) | Add Google search query to /docs/help/ (#4589) | Upgrading, documentation (#4597) | Add ‘view source’ entry (#4602) | Add jekyll-video-embed to list of third-party plugins. (#4621) | Adding Aerobatic to list of deployment options (#4630) | Update documentation: HTMLProofer CLI command (#4641) | Document that subdirectories of _posts are no longer categories (#4639) | Update continuous-integration docs with sudo: false information (#4628) | Blog post on refreshed contributing file and new affinity teams (#4645) | Fixes typo on collections (#4647) | Documentation: future option also works for collections (#4682) | Additional package needed for Fedora 23 Workspace (#4685) | Fix typo on Chocolatey name in Windows documentation (#4686) | Use the correct URL, Fixes #4698 (#4699) | Add jekyll-paspagon plugin (#4700) | Bold-italicize note in assets documentation about needing front matter (#4706) | Highlight the script/ calls in the Contributing documentation (#4712) | Add Hawkins to the list of third-party plugins (#4755) | Fix a typo in pagination doc (#4763) | Switch second GitHub Pages link to HTTPS (#4760) | Explain data file format requirements more clearly in documentation (#4781) | Add jekyll-i18n_tags to list of third-party plugins (#4775) | Remove Leonard Lamprecht’s website from Sites page (#4771) | Updates documentation for collections to include date property (#4769) | Added an explicit rerun note to configuration.md, defaults section (#4734) | Update Rack-Jekyll Heroku deployment blog post url (#4789) | Added missing single quote on rsync client side command (#4813) | Organize Form Platforms-as-a-Service into unified list &amp; add FormSpree.io (#4754) | Fixed typo on Configuration page (#4804) | Update FormKeep URL on the Resources doc (#4844) | site: use liquid &amp; reduce some whitespace noise (#4854) | Add jekyll-breadcrumbs to list of third-party plugins (#4874) | Added Pug converter to list of third-party plugins (#4872) | Add jekyll-ideal-image-slider to list of third-party plugins (#4863) | Add Jekyll Tips and the Cheatsheet to the list of resources (#4887) | Removed extra &lt;/p&gt; from site/_docs/permalinks.md (#4890) | Add pubstorm deployment instructions to docs (#4881) | Corrected pagination docs for hidden: true feature (#4903) | Remove a Broken Link for Refheap Plugin (#4971) | Instructions on how to install github-gem on Windows (#4975) | Minor tweak to fix missing apostrophe (#4962) | Instructions on how to install github-gem on Windows (v2) (#4977) | Fix inaccurate HTTP response header field name (#4976) | Add post about GSoC project (#4980) | Link to the HTML page instead of Markdown (#4985) | Update normalize.css to v4.0.0. (#4989) | Add jekyll-tags-list-plugin to list of third-party plugins (#5000) | Windows docs: Command needs to be called from blog path (#5006) | Update text to be consistent with example (#5010) | Update template links to point to core Liquid site (#5012) | Add generator-jekyllized to third-party plugins (#5027) | Add Jekyll Art Gallery generator plugin to list of third-party plugins (#5043) | Add Formingo to the list of Jekyll form SaaS (#5054) | Highlight help nav item when navigated to. (#5058) | Update normalize.css to v4.2.0. (#5096) | Updates html-proofer code (#5098) | Jekyll Community (#5097) | Typo in documentation file templates.md (#5117) | Slightly, improve PNG compression. (#5112) | docs: add jekyll-maps plugin reference (#5123) | docs: fix link to plugins page source (#5122) | Update the configuration docs to match the code (#5131) | Removed confusing word repetition. (#5139) | Add a note about script/fmt (#5138) | . ",
    "url": "/docs/history/#site-enhancements-v3-2-0",
    "relUrl": "/docs/history/#site-enhancements-v3-2-0"
  },"404": {
    "doc": "History",
    "title": "3.1.6 / 2016-05-19",
    "content": " ",
    "url": "/docs/history/#v3-1-6",
    "relUrl": "/docs/history/#v3-1-6"
  },"405": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Add ability to jsonify Drops such that, e.g. site | jsonify, works. (#4914) | . ",
    "url": "/docs/history/#bug-fixes-v3-1-6",
    "relUrl": "/docs/history/#bug-fixes-v3-1-6"
  },"406": {
    "doc": "History",
    "title": "3.1.5 / 2016-05-18",
    "content": " ",
    "url": "/docs/history/#v3-1-5",
    "relUrl": "/docs/history/#v3-1-5"
  },"407": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Sort the results of the require_all glob (affects Linux only). (#4912) | . ",
    "url": "/docs/history/#bug-fixes-v3-1-5",
    "relUrl": "/docs/history/#bug-fixes-v3-1-5"
  },"408": {
    "doc": "History",
    "title": "3.1.4 / 2016-05-18",
    "content": " ",
    "url": "/docs/history/#v3-1-4",
    "relUrl": "/docs/history/#v3-1-4"
  },"409": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Add ExcerptDrop and remove excerpt’s ability to refer to itself in Liquid (#4907) | Configuration permalink fix where collections.posts.permalink inherits properly from permalink only when it doesn’t exist (#4910) | Add Configuration.from to make it easier to build configs from just a hash | Sorting site.collections in Liquid by label (#4910) | Fix bug where layout in Liquid would inherit from previously-rendered layouts’ metadatas (#4909) | Fix bug where layout in Liquid would override in the wrong direction (more-specific layouts’ data were overwritten by their parent layouts’ data; this has now been reversed) (#4909) | . ",
    "url": "/docs/history/#bug-fixes-v3-1-4",
    "relUrl": "/docs/history/#bug-fixes-v3-1-4"
  },"410": {
    "doc": "History",
    "title": "3.1.3 / 2016-04-18",
    "content": ". | Fix defaults for Documents to lookup defaults based on relative_path instead of url (#4807) | Use SSLEnable instead of EnableSSL and make URL HTTPS (WEBrick) (#4693) | . ",
    "url": "/docs/history/#v3-1-3",
    "relUrl": "/docs/history/#v3-1-3"
  },"411": {
    "doc": "History",
    "title": "3.1.2 / 2016-02-19",
    "content": " ",
    "url": "/docs/history/#v3-1-2",
    "relUrl": "/docs/history/#v3-1-2"
  },"412": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Include .rubocop.yml in Gem (#4437) | LiquidRenderer#parse: parse with line numbers. (#4452) | Add consistency to the no-subcommand deprecation message (#4505) | . ",
    "url": "/docs/history/#minor-enhancements-v3-1-2",
    "relUrl": "/docs/history/#minor-enhancements-v3-1-2"
  },"413": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix syntax highlighting in kramdown by making @config accessible in the Markdown converter. (#4428) | Jekyll.sanitized_path: sanitizing a questionable path should handle tildes (#4492) | Fix titleize so already capitalized words are not dropped (#4525) | Permalinks which end in a slash should always output HTML (#4546) | . ",
    "url": "/docs/history/#bug-fixes-v3-1-2",
    "relUrl": "/docs/history/#bug-fixes-v3-1-2"
  },"414": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Require at least cucumber version 2.1.0 (#4514) | . ",
    "url": "/docs/history/#development-fixes-v3-1-2",
    "relUrl": "/docs/history/#development-fixes-v3-1-2"
  },"415": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add jekyll-toc plugin (#4429) | Docs: Quickstart - added documentation about the --force option (#4410) | Fix broken links to the Code of Conduct (#4436) | Upgrade notes: mention trailing slash in permalink; fixes #4440 (#4455) | Add hooks to the plugin categories toc (#4463) | Jekyll 3 requires newer version of Ruby. (#4461) | Fix typo in upgrading docs (#4473) | Add note about upgrading documentation on jekyllrb.com/help/ (#4484) | Update Rake link (#4496) | Update &amp; prune the short list of example sites (#4374) | Added amp-jekyll plugin to plugins docs (#4517) | A few grammar fixes (#4512) | Correct a couple mistakes in structure.md (#4522) | . ",
    "url": "/docs/history/#site-enhancements-v3-1-2",
    "relUrl": "/docs/history/#site-enhancements-v3-1-2"
  },"416": {
    "doc": "History",
    "title": "3.1.1 / 2016-01-29",
    "content": " ",
    "url": "/docs/history/#v3-1-1",
    "relUrl": "/docs/history/#v3-1-1"
  },"417": {
    "doc": "History",
    "title": "Meta",
    "content": ". | Update the Code of Conduct to the latest version (#4402) | . ",
    "url": "/docs/history/#meta",
    "relUrl": "/docs/history/#meta"
  },"418": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Page#dir: ensure it ends in a slash (#4403) | Add Utils.merged_file_read_opts to unify reading &amp; strip the BOM (#4404) | Renderer#output_ext: honor folders when looking for ext (#4401) | . ",
    "url": "/docs/history/#bug-fixes-v3-1-1",
    "relUrl": "/docs/history/#bug-fixes-v3-1-1"
  },"419": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Suppress stdout in liquid profiling test (#4409) | . ",
    "url": "/docs/history/#development-fixes-v3-1-1",
    "relUrl": "/docs/history/#development-fixes-v3-1-1"
  },"420": {
    "doc": "History",
    "title": "3.1.0 / 2016-01-23",
    "content": " ",
    "url": "/docs/history/#v3-1-0",
    "relUrl": "/docs/history/#v3-1-0"
  },"421": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Use Liquid::Drops instead of Hashes in #to_liquid (#4277) | Add ‘sample’ Liquid filter Equivalent to Array#sample functionality (#4223) | Cache parsed include file to save liquid parsing time. (#4120) | Slightly speed up url sanitization and handle multiples of ///. (#4168) | Print debug message when a document is skipped from reading (#4180) | Include tag should accept multiple variables in the include name (#4183) | Add -o option to serve command which opens server URL (#4144) | Add CodeClimate platform for better code quality. (#4220) | General improvements for WEBrick via jekyll serve such as SSL &amp; custom headers (#4224, #4228) | Add a default charset to content-type on webrick. (#4231) | Switch PluginManager to use require_with_graceful_fail for better UX (#4233) | Allow quoted date in front matter defaults (#4184) | Add a Jekyll doctor warning for URLs that only differ by case (#3171) | drops: create one base Drop class which can be set as mutable or not (#4285) | drops: provide #to_h to allow for hash introspection (#4281) | Shim subcommands with indication of gem possibly required so users know how to use them (#4254) | Add smartify Liquid filter for SmartyPants (#4323) | Raise error on empty permalink (#4361) | Refactor Page#permalink method (#4389) | . ",
    "url": "/docs/history/#minor-enhancements-v3-1-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-1-0"
  },"422": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Pass build options into clean command (#4177) | Allow users to use .htm and .xhtml (XHTML5.) (#4160) | Prevent Shell Injection. (#4200) | Convertible should make layout data accessible via layout instead of page (#4205) | Avoid using Dir.glob with absolute path to allow special characters in the path (#4150) | Handle empty config files (#4052) | Rename @options so that it does not impact Liquid. (#4173) | utils/drops: update Drop to support Utils.deep_merge_hashes (#4289) | Make sure jekyll/drops/drop is loaded first. (#4292) | Convertible/Page/Renderer: use payload hash accessor &amp; setter syntax for backwards-compatibility (#4311) | Drop: fix hash setter precedence (#4312) | utils: has_yaml_header? should accept files with extraneous spaces (#4290) | Escape html from site.title and page.title in site template (#4307) | Allow custom file extensions if defined in permalink front matter (#4314) | Fix deep_merge_hashes! handling of drops and hashes (#4359) | Page should respect output extension of its permalink (#4373) | Disable auto-regeneration when running server detached (#4376) | Drop#: only use public_send for keys in the content_methods array (#4388) | Extract title from filename successfully when no date. (#4195) | . ",
    "url": "/docs/history/#bug-fixes-v3-1-0",
    "relUrl": "/docs/history/#bug-fixes-v3-1-0"
  },"423": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | jekyll-docs should be easily release-able (#4152) | Allow use of Cucumber 2.1 or greater (#4181) | Modernize Kramdown for Markdown converter. (#4109) | Change TestDoctorCommand to JekyllUnitTest… (#4263) | Create namespaced rake tasks in separate .rake files under lib/tasks (#4282) | markdown: refactor for greater readability &amp; efficiency (#3771) | Fix many Rubocop style errors (#4301) | Fix spelling of “GitHub” in docs and history (#4322) | Reorganize and cleanup the Gemfile, shorten required depends. (#4318) | Remove script/rebund. (#4341) | Implement codeclimate platform (#4340) | Remove ObjectSpace dumping and start using inherited, it’s faster. (#4342) | Add script/travis so all people can play with Travis-CI images. (#4338) | Move Cucumber to using RSpec-Expectations and furthering JRuby support. (#4343) | Rearrange Cucumber and add some flair. (#4347) | Remove old FIXME (#4349) | Clean up the Gemfile (and keep all the necessary dependencies) (#4350) | . ",
    "url": "/docs/history/#development-fixes-v3-1-0",
    "relUrl": "/docs/history/#development-fixes-v3-1-0"
  },"424": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add three plugins to directory (#4163) | Add upgrading docs from 2.x to 3.x (#4157) | Add protect_email to the plugins index. (#4169) | Add jekyll-deploy to list of third-party plugins (#4179) | Clarify plugin docs (#4154) | Add Kickster to deployment methods in documentation (#4190) | Add DavidBurela’s tutorial for Windows to Windows docs page (#4210) | Change GitHub code block to highlight tag to avoid it overlaps parent div (#4121) | Update FormKeep link to be something more specific to Jekyll (#4243) | Remove example Roger Chapman site, as the domain doesn’t exist (#4249) | Added configuration options for draft_posts to configuration docs (#4251) | Fix checklist in _assets.md (#4259) | Add Markdown examples to Pages docs (#4275) | Add jekyll-paginate-category to list of third-party plugins (#4273) | Add jekyll-responsive_image to list of third-party plugins (#4286) | Add jekyll-commonmark to list of third-party plugins (#4299) | Add documentation for incremental regeneration (#4293) | Add note about removal of relative permalink support in upgrading docs (#4303) | Add Pro Tip to use front matter variable to create clean URLs (#4296) | Fix grammar in the documentation for posts. (#4330) | Add documentation for smartify Liquid filter (#4333) | Fixed broken link to blog on using mathjax with jekyll (#4344) | Documentation: correct reference in Precedence section of Configuration docs (#4355) | Add @jmcglone’s guide to github-pages doc page (#4364) | Added the Wordpress2Jekyll Wordpress plugin (#4377) | Add Contentful Extension to list of third-party plugins (#4390) | Correct Minor spelling error (#4394) | . ",
    "url": "/docs/history/#site-enhancements-v3-1-0",
    "relUrl": "/docs/history/#site-enhancements-v3-1-0"
  },"425": {
    "doc": "History",
    "title": "3.0.5 / 2016-04-26",
    "content": ". | Remove call to #backwards_compatibilize in Configuration.from (#4846) | . ",
    "url": "/docs/history/#v3-0-5",
    "relUrl": "/docs/history/#v3-0-5"
  },"426": {
    "doc": "History",
    "title": "3.0.4 / 2016-04-18",
    "content": ". | Fix defaults for Documents to lookup defaults based on relative_path instead of url (#4806) | Configuration: allow users to specify a collections.posts.permalink directly without permalink clobbering it (#4753) | . ",
    "url": "/docs/history/#v3-0-4",
    "relUrl": "/docs/history/#v3-0-4"
  },"427": {
    "doc": "History",
    "title": "3.0.3 / 2016-02-08",
    "content": " ",
    "url": "/docs/history/#v3-0-3",
    "relUrl": "/docs/history/#v3-0-3"
  },"428": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix extension weirdness with folders (#4493) | EntryFilter: only include ‘excluded’ log on excluded files (#4479) | Jekyll.sanitized_path: escape tildes before sanitizing a questionable path (#4468) | LiquidRenderer#parse: parse with line numbers (#4453) | Document#&lt;=&gt;: protect against nil comparison in dates. (#4446) | . ",
    "url": "/docs/history/#bug-fixes-v3-0-3",
    "relUrl": "/docs/history/#bug-fixes-v3-0-3"
  },"429": {
    "doc": "History",
    "title": "3.0.2 / 2016-01-20",
    "content": " ",
    "url": "/docs/history/#v3-0-2",
    "relUrl": "/docs/history/#v3-0-2"
  },"430": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Document: throw a useful error when an invalid date is given (#4378) | . ",
    "url": "/docs/history/#bug-fixes-v3-0-2",
    "relUrl": "/docs/history/#bug-fixes-v3-0-2"
  },"431": {
    "doc": "History",
    "title": "3.0.1 / 2015-11-17",
    "content": " ",
    "url": "/docs/history/#v3-0-1",
    "relUrl": "/docs/history/#v3-0-1"
  },"432": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Document: only superdirectories of the collection are categories (#4110) | Convertible#render_liquid should use render! to cause failure on bad Liquid (#4077) | Don’t generate .jekyll-metadata in non-incremental build (#4079) | Set highlighter config val to kramdown.syntax_highlighter (#4090) | Align hooks implementation with documentation (#4104) | Fix the deprecation warning in the doctor command (#4114) | Fix case in :title and add :slug which is downcased (#4100) | . ",
    "url": "/docs/history/#bug-fixes-v3-0-1",
    "relUrl": "/docs/history/#bug-fixes-v3-0-1"
  },"433": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Fix test warnings when doing rake {test,spec} or script/test (#4078) | . ",
    "url": "/docs/history/#development-fixes-v3-0-1",
    "relUrl": "/docs/history/#development-fixes-v3-0-1"
  },"434": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Update normalize.css to v3.0.3. (#4085) | Update Font Awesome to v4.4.0. (#4086) | Adds a note about installing the jekyll-gist gem to make gist tag work (#4101) | Align hooks documentation with implementation (#4104) | Add Jekyll Flickr Plugin to the list of third party plugins (#4111) | Remove link to now-deleted blog post (#4125) | Update the liquid syntax in the pagination docs (#4130) | Add jekyll-language-plugin to plugins.md (#4134) | Updated to reflect feedback in #4129 (#4137) | Clarify assets.md based on feedback of #4129 (#4142) | Re-correct the liquid syntax in the pagination docs (#4140) | . ",
    "url": "/docs/history/#site-enhancements-v3-0-1",
    "relUrl": "/docs/history/#site-enhancements-v3-0-1"
  },"435": {
    "doc": "History",
    "title": "3.0.0 / 2015-10-26",
    "content": " ",
    "url": "/docs/history/#v3-0-0",
    "relUrl": "/docs/history/#v3-0-0"
  },"436": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Liquid profiler (i.e. know how fast or slow your templates render) (#3762) | Incremental regeneration (#3116) | Add Hooks: a new kind of plugin (#3553) | Upgrade to Liquid 3.0.0 (#3002) | site.posts is now a Collection instead of an Array (#4055) | Add basic support for JRuby (commit: 0f4477) | Drop support for Ruby 1.9.3. (#3235) | Support Ruby v2.2 (#3234) | Support RDiscount 2 (#2767) | Remove most runtime deps (#3323) | Move to Rouge as default highlighter (#3323) | Mimic GitHub Pages .html extension stripping behavior in WEBrick (#3452) | Always include file extension on output files (#3490) | Improved permalinks for pages and collections (#3538) | Sunset (i.e. remove) Maruku (#3655) | Remove support for relative permalinks (#3679) | Iterate over site.collections as an array instead of a hash. (#3670) | Adapt StaticFile for collections, config defaults (#3823) | Add a Code of Conduct for the Jekyll project (#3925) | Added permalink time variables (#3990) | Add --incremental flag to enable incremental regen (disabled by default) (#4059) | . ",
    "url": "/docs/history/#major-enhancements-v3-0-0",
    "relUrl": "/docs/history/#major-enhancements-v3-0-0"
  },"437": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Deprecate access to Document#data properties and Collection#docs methods (#4058) | Sort static files just once, and call site_payload once for all collections (#3204) | Separate jekyll docs and optimize external gem handling (#3241) | Improve Site#getConverterImpl and call it Site#find_converter_instance (#3240) | Use relative path for path Liquid variable in Documents for consistency (#2908) | Generalize Utils#slugify for any scripts (#3047) | Added basic microdata to post template in site template (#3189) | Store log messages in an array of messages. (#3244) | Allow collection documents to override output property in front matter (#3172) | Keep file modification times between builds for static files (#3220) | Only downcase mixed-case categories for the URL (#2571) | Added per post excerpt_separator functionality (#3274) | Allow collections YAML to end with three dots (#3134) | Add mode parameter to slugify Liquid filter (#2918) | Perf: Markdown#matches should avoid regexp (#3321) | Perf: Use frozen regular expressions for Utils#slugify (#3321) | Split off Textile support into jekyll-textile-converter (#3319) | Improve the navigation menu alignment in the site template on small screens (#3331) | Show the regeneration time after the initial generation (#3378) | Site template: Switch default font to Helvetica Neue (#3376) | Make the include tag a teensy bit faster. (#3391) | Add pkill -f jekyll to ways to kill. (#3397) | Site template: collapsed, variable-driven font declaration (#3360) | Site template: Don’t always show the scrollbar in code blocks (#3419) | Site template: Remove undefined text class from p element (#3440) | Site template: Optimize text rendering for legibility (#3382) | Add draft? method to identify if Post is a Draft &amp; expose to Liquid (#3456) | Write regeneration metadata even on full rebuild (#3464) | Perf: Use String#end_with?(\"/\") instead of regexp when checking paths (#3516) | Docs: document ‘ordinal’ built-in permalink style (#3532) | Upgrade liquid-c to 3.x (#3531) | Use consistent syntax for deprecation warning (#3535) | Added build –destination and –source flags (#3418) | Site template: remove unused page.meta attribute (#3537) | Improve the error message when sorting null objects (#3520) | Added liquid-md5 plugin (#3598) | Documentation: RR replaced with RSpec Mocks (#3600) | Documentation: Fix subpath. (#3599) | Create ‘tmp’ dir for test_tags if it doesn’t exist (#3609) | Extract reading of data from Site to reduce responsibilities. (#3545) | Removed the word ‘Jekyll’ a few times from the comments (#3617) | bin/jekyll: with no args, exit with exit code 1 (#3619) | Incremental build if destination file missing (#3614) | Static files mtime liquid should return a Time obj (#3596) | Use Jekyll::Posts for both LSI indexing and lookup. (#3629) | Add charset=utf-8 for HTML and XML pages in WEBrick (#3649) | Set log level to debug when verbose flag is set (#3665) | Added a mention on the Gemfile to complete the instructions (#3671) | Perf: Cache Document#to_liquid and invalidate where necessary (#3693) | Perf: Jekyll::Cleaner#existing_files: Call keep_file_regex and keep_dirs only once, not once per iteration (#3696) | Omit jekyll/jekyll-help from list of resources. (#3698) | Add basic jekyll doctor test to detect fsnotify (OSX) anomalies. (#3704) | Added talk.jekyllrb.com to “Have questions?” (#3694) | Performance: Sort files only once (#3707) | Performance: Marshal metadata (#3706) | Upgrade highlight wrapper from div to figure (#3779) | Upgrade mime-types to ~&gt; 2.6 (#3795) | Update windows.md with Ruby version info (#3818) | Make the directory for includes configurable (#3782) | Rename directory configurations to match *_dir convention for consistency (#3782) | Internal: trigger hooks by owner symbol (#3871) | Update MIME types from mime-db (#3933) | Add header to site template _config.yml for clarity &amp; direction (#3997) | Site template: add timezone offset to post date front matter (#4001) | Make a constant for the regex to find hidden files (#4032) | Site template: refactor github &amp; twitter icons into includes (#4049) | Site template: add background to Kramdown Rouge-ified backtick code blocks (#4053) | . ",
    "url": "/docs/history/#minor-enhancements-v3-0-0",
    "relUrl": "/docs/history/#minor-enhancements-v3-0-0"
  },"438": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | post_url: fix access deprecation warning &amp; fix deprecation msg (#4060) | Perform jekyll-paginate deprecation warning correctly. (#3580) | Make permalink parsing consistent with pages (#3014) | time()pre-filter method should accept a Date object (#3299) | Remove unneeded end tag for link in site template (#3236) | Kramdown: Use enable_coderay key instead of use_coderay (#3237) | Unescape Document output path (#2924) | Fix nav items alignment when on multiple rows (#3264) | Highlight: Only Strip Newlines/Carriage Returns, not Spaces (#3278) | Find variables in front matter defaults by searching with relative file path. (#2774) | Allow variables (e.g :categories) in front matter permalinks (#3320) | Handle nil URL placeholders in permalinks (#3325) | Template: Fix nav items alignment when in “burger” mode (#3329) | Template: Remove !important from nav SCSS introduced in #3329 (#3375) | The :title URL placeholder for collections should be the filename slug. (#3383) | Trim the generate time diff to just 3 places past the decimal place (#3415) | The highlight tag should only clip the newlines before and after the entire block, not in between (#3401) | highlight: fix problem with linenos and rouge. (#3436) | Site#read_data_file: read CSV’s with proper file encoding (#3455) | Ignore .jekyll-metadata in site template (#3496) | Template: Point documentation link to the documentation pages (#3502) | Removed the trailing slash from the example /blog baseurl comment (#3485) | Clear the regenerator cache every time we process (#3592) | Readd (bring back) minitest-profile (#3628) | Add WOFF2 font MIME type to Jekyll server MIME types (#3647) | Be smarter about extracting the extname in StaticFile (#3632) | Process metadata for all dependencies (#3608) | Show error message if the front matter on a page/post is invalid. (#3643) | Upgrade redcarpet to 3.2 (Security fix: OSVDB-120415) (#3652) | Create #mock_expects that goes directly to RSpec Mocks. (#3658) | Open .jekyll-metadata in binary mode to read binary Marshal data (#3713) | Incremental regeneration: handle deleted, renamed, and moved dependencies (#3717) | Fix typo on line 19 of pagination.md (#3760) | Fix it so that ‘blog.html’ matches ‘blog.html’ (#3732) | Remove occasionally-problematic ensure in LiquidRenderer (#3811) | Fixed an unclear code comment in site template SCSS (#3837) | Fix reading of binary metadata file (#3845) | Remove var collision with site template header menu iteration variable (#3838) | Change non-existent hl_linenos to hl_lines to allow passthrough in safe mode (#3787) | Add missing flag to disable the watcher (#3820) | Update CI guide to include more direct explanations of the flow (#3891) | Set future to false in the default config (#3892) | filters: where should compare stringified versions of input &amp; comparator (#3935) | Read build options for jekyll clean command (#3828) | Fix #3970: Use Gem::Version to compare versions, not &gt;. | Abort if no subcommand. Fixes confusing message. (#3992) | Whole-post excerpts should match the post content (#4004) | Change default font weight to 400 to fix bold/strong text issues (#4050) | Document: Only auto-generate the excerpt if it’s not overridden (#4062) | Utils: deep_merge_hashes should also merge default_proc (45f69bb) | Defaults: compare paths in applies_path? as Strings to avoid confusion (7b81f00) | . ",
    "url": "/docs/history/#bug-fixes-v3-0-0",
    "relUrl": "/docs/history/#bug-fixes-v3-0-0"
  },"439": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Remove loader.rb and “modernize” script/test. (#3574) | Improve the grammar in the documentation (#3233) | Update the LICENSE text to match the MIT license exactly (#3253) | Update rake task site:publish to fix minor bugs. (#3254) | Switch to shields.io for the README badges. (#3255) | Use FileList instead of Dir.glob in site:publish rake task (#3261) | Fix test script to be platform-independent (#3279) | Instead of symlinking /tmp, create and symlink a local tmp in the tests (#3258) | Fix some spacing (#3312) | Fix comment typo in lib/jekyll/frontmatter_defaults.rb (#3322) | Move all regenerate? checking to Regenerator (#3326) | Factor out a read_data_file call to keep things clean (#3380) | Proof the site with CircleCI. (#3427) | Update LICENSE to 2015. (#3477) | Upgrade tests to use Minitest (#3492) | Remove trailing whitespace (#3497) | Use fixture_site for Document tests (#3511) | Remove adapters deprecation warning (#3529) | Minor fixes to url.rb to follow GitHub style guide (#3544) | Minor changes to resolve deprecation warnings (#3547) | Convert remaining textile test documents to markdown (#3528) | Migrate the tests to use rspec-mocks (#3552) | Remove activesupport (#3612) | Added tests for Jekyll:StaticFile (#3633) | Force minitest version to 5.5.1 (#3657) | Update the way cucumber accesses Minitest assertions (#3678) | Add script/rubyprof to generate cachegrind callgraphs (#3692) | Upgrade cucumber to 2.x (#3795) | Update Kramdown. (#3853) | Updated the scripts shebang for portability (#3858) | Update JRuby testing to 9K (3ab386f) | Organize dependencies into dev and test groups. (#3852) | Contributing.md should refer to script/cucumber (#3894) | Update contributing documentation to reflect workflow updates (#3895) | Add script to vendor mime types (#3933) | Ignore .bundle dir in SimpleCov (#4033) | . ",
    "url": "/docs/history/#development-fixes-v3-0-0",
    "relUrl": "/docs/history/#development-fixes-v3-0-0"
  },"440": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add ‘info’ labels to certain notes in collections docs (#3601) | Remove extra spaces, make the last sentence less awkward in permalink docs (#3603) | Update the permalinks documentation to reflect the updates for 3.0 (#3556) | Add blog post announcing Jekyll Help (#3523) | Add Jekyll Talk to Help page on site (#3518) | Change Ajax pagination resource link to use HTTPS (#3570) | Fixing the default host on docs (#3229) | Add jekyll-thumbnail-filter to list of third-party plugins (#2790) | Add link to ‘Adding Ajax pagination to Jekyll’ to Resources page (#3186) | Add a Resources link to tutorial on building dynamic navbars (#3185) | Semantic structure improvements to the post and page layouts (#3251) | Add new AsciiDoc plugin to list of third-party plugins. (#3277) | Specify that all transformable collection documents must contain front matter (#3271) | Assorted accessibility fixes (#3256) | Update configuration docs to mention keep_files for destination (#3288, #3296) | Break when we successfully generate nav link to save CPU cycles. (#3291) | Update usage docs to mention keep_files and a warning about destination cleaning (#3295) | Add logic to automatically generate the next_section and prev_section navigation items (#3292) | Some small fixes for the Plugins TOC. (#3306) | Added versioning comment to configuration file (#3314) | Add jekyll-minifier to list of third-party plugins (#3333) | Add blog post about the Jekyll meet-up (#3332) | Use highlight Liquid tag instead of the four-space tabs for code (#3336) | 3.0.0.beta1 release post (#3346) | Add twa to the list of third-party plugins (#3384) | Remove extra spaces (#3388) | Fix small grammar errors on a couple pages (#3396) | Fix typo on Templates docs page (#3420) | s/three/four for plugin type list (#3424) | Release jekyllrb.com as a locally-compiled site. (#3426) | Add a jekyllrb.com/help page which elucidates places from which to get help (#3428) | Remove extraneous dash on Plugins doc page which caused a formatting error (#3431) | Fix broken link to Jordan Thornquest’s website. (#3438) | Change the link to an extension (#3457) | Fix Twitter link on the help page (#3466) | Fix wording in code snippet highlighting section (#3475) | Add a / to paginate_path in the Pagination documentation (#3479) | Add a link on all the docs pages to “Improve this page”. (#3510) | Add jekyll-auto-image generator to the list of third-party plugins (#3489) | Replace link to the proposed picture element spec (#3530) | Add front matter date formatting information (#3469) | Improve consistency and clarity of plugins options note (#3546) | Add permalink warning to pagination docs (#3551) | Fix grammar in Collections docs API stability warning (#3560) | Restructure excerpt_separator documentation for clarity (#3550) | Fix accidental line break in collections docs (#3585) | Add information about the .jekyll-metadata file (#3597) | Document addition of variable parameters to an include (#3581) | Add jekyll-files to the list of third-party plugins. (#3586) | Define the install step in the CI example .travis.yml (#3622) | Expand collections documentation. (#3638) | Add the “warning” note label to excluding vendor in the CI docs page (#3623) | Upgrade pieces of the Upgrading guide for Jekyll 3 (#3607) | Showing how to access specific data items (#3468) | Clarify pagination works from within HTML files (#3467) | Add note to excerpt_separator documentation that it can be set globally (#3667) | Fix some names on Troubleshooting page (#3683) | Add remote_file_content tag plugin to list of third-party plugins (#3691) | Update the Redcarpet version on the Configuration page. (#3743) | Update the link in the welcome post to point to Jekyll Talk (#3745) | Update link for navbars with data attributes tutorial (#3728) | Add jekyll-asciinema to list of third-party plugins (#3750) | Update pagination example to be agnostic to first pagination dir (#3763) | Detailed instructions for rsync deployment method (#3848) | Add Jekyll Portfolio Generator to list of plugins (#3883) | Add site.html_files to variables docs (#3880) | Add Static Publisher tool to list of deployment methods (#3865) | Fix a few typos. (#3897) | Add jekyll-youtube to the list of third-party plugins (#3931) | Add Views Router plugin (#3950) | Update install docs (Core dependencies, Windows reqs, etc) (#3769) | Use Jekyll Feed for jekyllrb.com (#3736) | Add jekyll-umlauts to plugins.md ($3966) | Troubleshooting: fix broken link, add other mac-specific info (#3968) | Add a new site for learning purposes (#3917) | Added documentation for Jekyll environment variables (#3989) | Fix broken configuration documentation page (#3994) | Add troubleshooting docs for installing on El Capitan (#3999) | Add Lazy Tweet Embedding to the list of third-party plugins (#4015) | Add installation instructions for 2 of 3 options for plugins (#4013) | Add alternative jekyll gem installation instructions (#4018) | Fix a few typos and formatting problems. (#4022) | Fix pretty permalink example (#4029) | Note that _config.yml is not reloaded during regeneration (#4034) | Apply code block figure syntax to blocks in CONTRIBUTING (#4046) | Add jekyll-smartify to the list of third-party plugins (#3572) | . ",
    "url": "/docs/history/#site-enhancements-v3-0-0",
    "relUrl": "/docs/history/#site-enhancements-v3-0-0"
  },"441": {
    "doc": "History",
    "title": "2.5.3 / 2014-12-22",
    "content": " ",
    "url": "/docs/history/#v2-5-3",
    "relUrl": "/docs/history/#v2-5-3"
  },"442": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | When checking a Markdown extname, include position of the . (#3147) | Fix jsonify Liquid filter handling of boolean values (#3154) | Add comma to value of viewport meta tag (#3170) | Set the link type for the RSS feed to application/rss+xml (#3176) | Refactor #as_liquid (#3158) | . ",
    "url": "/docs/history/#bug-fixes-v2-5-3",
    "relUrl": "/docs/history/#bug-fixes-v2-5-3"
  },"443": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Exclude built-in bundles from being added to coverage report (#3180) | . ",
    "url": "/docs/history/#development-fixes-v2-5-3",
    "relUrl": "/docs/history/#development-fixes-v2-5-3"
  },"444": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add @alfredxing to the @jekyll/core team. :tada: (#3218) | Document the -q option for the build and serve commands (#3149) | Fix some minor typos/flow fixes in documentation website content (#3165) | Add keep_files to configuration documentation (#3162) | Repeat warning about cleaning of the destination directory (#3161) | Add jekyll-500px-embed to list of third-party plugins (#3163) | Simplified platform detection in Gemfile example for Windows (#3177) | Add the jekyll-jalali plugin added to the list of third-party plugins. (#3198) | Add Table of Contents to Troubleshooting page (#3196) | Add inline_highlight plugin to list of third-party plugins (#3212) | Add jekyll-mermaid plugin to list of third-party plugins (#3222) | . ",
    "url": "/docs/history/#site-enhancements-v2-5-3",
    "relUrl": "/docs/history/#site-enhancements-v2-5-3"
  },"445": {
    "doc": "History",
    "title": "2.5.2 / 2014-11-17",
    "content": " ",
    "url": "/docs/history/#v2-5-2",
    "relUrl": "/docs/history/#v2-5-2"
  },"446": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | post_url should match post.name instead of slugs and dates (#3058) | . ",
    "url": "/docs/history/#minor-enhancements-v2-5-2",
    "relUrl": "/docs/history/#minor-enhancements-v2-5-2"
  },"447": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix bundle require for :jekyll_plugins (#3119) | Remove duplicate regexp phrase: ^\\A (#3089) | Remove duplicate Conversion error: message in Convertible (#3088) | Print full conversion error message in Renderer#convert (#3090) | . ",
    "url": "/docs/history/#bug-fixes-v2-5-2",
    "relUrl": "/docs/history/#bug-fixes-v2-5-2"
  },"448": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Change variable names in Google Analytics script (#3093) | Mention CSV files in the docs for data files (#3101) | Add trailing slash to paginate_path example. (#3091) | Get rid of noifniof (excerpt_separator) (#3094) | Sass improvements, around nesting mostly. (#3123) | Add webmentions.io plugin to the list of third-party plugins (#3127) | Add Sass mixins and use them. (#2904) | Slightly compress jekyll-sticker.jpg. (#3133) | Update gridism and separate out related but custom styles. (#3132) | Add remote-include plugin to list of third-party plugins (#3136) | . ",
    "url": "/docs/history/#site-enhancements-v2-5-2",
    "relUrl": "/docs/history/#site-enhancements-v2-5-2"
  },"449": {
    "doc": "History",
    "title": "2.5.1 / 2014-11-09",
    "content": " ",
    "url": "/docs/history/#v2-5-1",
    "relUrl": "/docs/history/#v2-5-1"
  },"450": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix path sanitation bug related to Windows drive names (#3077) | . ",
    "url": "/docs/history/#bug-fixes-v2-5-1",
    "relUrl": "/docs/history/#bug-fixes-v2-5-1"
  },"451": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Add development time dependencies on minitest and test-unit to gemspec for cygwin (#3064) | Use Travis’s built-in caching. (#3075) | . ",
    "url": "/docs/history/#development-fixes-v2-5-1",
    "relUrl": "/docs/history/#development-fixes-v2-5-1"
  },"452": {
    "doc": "History",
    "title": "2.5.0 / 2014-11-06",
    "content": " ",
    "url": "/docs/history/#v2-5-0",
    "relUrl": "/docs/history/#v2-5-0"
  },"453": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Require gems in :jekyll_plugins Gemfile group unless JEKYLL_NO_BUNDLER_REQUIRE is specified in the environment. (#2865) | Centralize path sanitation in the Site object (#2882) | Allow placeholders in permalinks (#3031) | Allow users to specify the log level via JEKYLL_LOG_LEVEL. (#3067) | Fancy Indexing with WEBrick (#3018) | Allow Enumerables to be used with where filter. (#2986) | Meta descriptions in the site template now use page.excerpt if it’s available (#2964) | Change indentation in head.html of site template to 2 spaces from 4 (#2973) | Use a $content-width variable instead of a fixed value in the site template CSS (#2972) | Strip newlines in site template &lt;meta&gt; description. (#2982) | Add link to atom feed in head of site template files (#2996) | Performance optimizations (#2994) | Use Hash#each_key instead of Hash#keys.each to speed up iteration over hash keys. (#3017) | Further minor performance enhancements. (#3022) | Add ‘b’ and ‘s’ aliases for build and serve, respectively (#3065) | . ",
    "url": "/docs/history/#minor-enhancements-v2-5-0",
    "relUrl": "/docs/history/#minor-enhancements-v2-5-0"
  },"454": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix Rouge’s RedCarpet plugin interface integration (#2951) | Remove --watch from the site template blog post since it defaults to watching in in 2.4.0 (#2922) | Fix code for media query mixin in site template (#2946) | Allow post URLs to have .htm extensions (#2925) | Utils.slugify: Don’t create new objects when gsubbing (#2997) | The jsonify filter should deep-convert to Liquid when given an Array. (#3032) | Apply jsonify filter to Hashes deeply and effectively (#3063) | Use 127.0.0.1 as default host instead of 0.0.0.0 (#3053) | In the case that a Gemfile does not exist, ensure Jekyll doesn’t fail on requiring the Gemfile group (#3066) | . ",
    "url": "/docs/history/#bug-fixes-v2-5-0",
    "relUrl": "/docs/history/#bug-fixes-v2-5-0"
  },"455": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Fix a typo in the doc block for Jekyll::URL.escape_path (#3052) | Add integration test for jekyll new --blank in TestUnit (#2913) | Add unit test for jekyll new --force logic (#2929) | Update outdated comment for Convertible#transform (#2957) | Add Hakiri badge to README. (#2953) | Add some simple benchmarking tools. (#2993) | . ",
    "url": "/docs/history/#development-fixes-v2-5-0",
    "relUrl": "/docs/history/#development-fixes-v2-5-0"
  },"456": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | NOKOGIRI_USE_SYSTEM_LIBRARIES=true decreases installation time. (#3040) | Add FormKeep to resources as Jekyll form backend (#3010) | Fixing a mistake in the name of the new Liquid tag (#2969) | Update Font Awesome to v4.2.0. (#2898) | Fix link to #2895 in 2.4.0 release post. (#2899) | Add Big Footnotes for Kramdown plugin to list of third-party plugins (#2916) | Remove warning regarding GHP use of singular types for front matter defaults (#2919) | Fix quote character typo in site documentation for templates (#2917) | Point Liquid links to Liquid’s GitHub wiki (#2887) | Add HTTP Basic Auth (.htaccess) plugin to list of third-party plugins (#2931) | (Minor) Grammar &amp; _config.yml filename fixes (#2911) | Added mathml.rb to the list of third-party plugins. (#2937) | Add --force_polling to the list of configuration options (#2943) | Escape unicode characters in site CSS (#2906) | Add note about using the github-pages gem via pages.github.com/versions.json (#2939) | Update usage documentation to reflect 2.4 auto-enabling of --watch. (#2954) | Add --skip-initial-build to configuration docs (#2949) | Fix a minor typo in Templates docs page (#2959) | Add a ditaa-ditaa plugin under Other section on the Plugins page (#2967) | Add build/serve -V option to configuration documentation (#2948) | Add ‘Jekyll Twitter Plugin’ to list of third-party plugins (#2979) | Docs: Update normalize.css to v3.0.2. (#2981) | Fix typo in Continuous Integration documentation (#2984) | Clarify behavior of :categories in permalinks (#3011) | . ",
    "url": "/docs/history/#site-enhancements-v2-5-0",
    "relUrl": "/docs/history/#site-enhancements-v2-5-0"
  },"457": {
    "doc": "History",
    "title": "2.4.0 / 2014-09-09",
    "content": " ",
    "url": "/docs/history/#v2-4-0",
    "relUrl": "/docs/history/#v2-4-0"
  },"458": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Support a new relative_include tag (#2870) | Auto-enable watch on ‘serve’ (#2858) | Render Liquid in CoffeeScript files (#2830) | Array Liquid filters: push, pop, unshift, shift (#2895) | Add :title to collection URL template fillers (#2864) | Add support for CSV files in the _data directory (#2761) | Add the name variable to collection permalinks (#2799) | Add inspect liquid filter. (#2867) | Add a slugify Liquid filter (#2880) | . ",
    "url": "/docs/history/#minor-enhancements-v2-4-0",
    "relUrl": "/docs/history/#minor-enhancements-v2-4-0"
  },"459": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Use Jekyll.sanitized_path when adding static files to Collections (#2849) | Fix encoding of main.scss in site template (#2771) | Fix orientation bugs in default site template (#2862) | . ",
    "url": "/docs/history/#bug-fixes-v2-4-0",
    "relUrl": "/docs/history/#bug-fixes-v2-4-0"
  },"460": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Update simplecov gem to 0.9 (#2748) | Remove docs/ dir (#2768) | add class &lt;&lt; self idiom to New command (#2817) | Allow Travis to ‘parallelize’ our tests (#2859) | Fix test for Liquid rendering in Sass (#2856) | Fixing “vertycal” typo in site template’s _base.scss (#2889) | . ",
    "url": "/docs/history/#development-fixes-v2-4-0",
    "relUrl": "/docs/history/#development-fixes-v2-4-0"
  },"461": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Document the name variable for collection permalinks (#2829) | Adds info about installing jekyll in current dir (#2839) | Remove deprecated jekyll-projectlist plugin from list of third-party plugins (#2742) | Remove tag plugins that are built in to Jekyll (#2751) | Add markdown-writer package for Atom Editor to list of third-party plugins (#2763) | Fix typo in site documentation for collections (#2764) | Fix minor typo on plugins docs page (#2765) | Replace markdown with HTML in sass_dir note on assets page (#2791) | Fixed “bellow” typo in datafiles docs (#2879) | Fix code/markdown issue in documentation for variables (#2877) | Remove Good Include third-party plugin from plugins page (#2881) | Add some more docs on include_relative (#2884) | . ",
    "url": "/docs/history/#site-enhancements-v2-4-0",
    "relUrl": "/docs/history/#site-enhancements-v2-4-0"
  },"462": {
    "doc": "History",
    "title": "2.3.0 / 2014-08-10",
    "content": " ",
    "url": "/docs/history/#v2-3-0",
    "relUrl": "/docs/history/#v2-3-0"
  },"463": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Allow Convertibles to be converted by &gt;= 1 converters (#2704) | Allow Sass files to be rendered in Liquid, but never place them in layouts. (#2733) | Add jekyll help command (#2707) | Use .scss for site_template styles. (#2667) | Don’t require the scope key in front matter defaults (#2659) | No longer set permalink: pretty in the _config.yml for the site template (#2680) | Rework site template to utilize Sass (#2687) | Notify the user when auto-regeneration is disabled. (#2696) | Allow partial variables in include tag filename argument (#2693) | Move instances of Time.parse into a Utils method (#2682) | Ignore subfolders in the _posts folder (#2705) REVERTS (#2633) | Front Matter default types should always be pluralized (#2732) | Read in static files into collection.files as StaticFiles (#2737) | Add sassify and scssify Liquid filters (#2739) | Replace classifier gem with classifier-reborn (#2721) | . ",
    "url": "/docs/history/#minor-enhancements-v2-3-0",
    "relUrl": "/docs/history/#minor-enhancements-v2-3-0"
  },"464": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Use only the last extname when multiple converters exist (#2722) | Call #to_liquid before calling #to_json in jsonify filter (#2729) | Use non padded config in strftime to avoid parse string twice (#2673) | Replace deprecated Ruby methods with undeprecated ones (#2664) | Catch errors when parsing Post date front matter value &amp; produce nice error message (#2649) | Allow static files in Collections (#2615) | Fixed typo in Deprecator#gracefully_require error message (#2694) | Remove preemptive loading of the ‘classifier’ gem. (#2697) | Use case-insensitive checking for the file extensions when loading config files (#2718) | When Reading Documents, Respect encoding Option (#2720) | Refactor based on jekyll-watch clean-up. (#2716) | Document#to_s should produce just the content of the document (#2731) | . ",
    "url": "/docs/history/#bug-fixes-v2-3-0",
    "relUrl": "/docs/history/#bug-fixes-v2-3-0"
  },"465": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Only include lib files in the gem (#2671) | Fix git diff command in proof script (#2672) | Make default rake task a multitask so tests run in parallel (#2735) | . ",
    "url": "/docs/history/#development-fixes-v2-3-0",
    "relUrl": "/docs/history/#development-fixes-v2-3-0"
  },"466": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Use Sass and a Docs Collection (#2651) | Add latest_version.txt file to the site (#2740) | Be more ambiguous about page.content. But more transparent. (#2522) | Streamlining front matter wording (instead of front-matter/frontmatter) (#2674) | Add note that source directory cannot be modified in GitHub Pages (#2669) | Fix links from #2669 to be actual HTML. Whoops. (#2679) | Add link to jekyll-slim in list of third-party plugins (#2689) | Add Barry Clark’s Smashing Magazine tutorial to resources page (#2688) | Reorganize and update default configuration settings (#2456) | Fixing indentation in the configuration docs about Redcarpet exts (#2717) | Use null in YAML instead of nil in default config list (#2719) | Fix typo in Continuous Integration docs (#2708) | . ",
    "url": "/docs/history/#site-enhancements-v2-3-0",
    "relUrl": "/docs/history/#site-enhancements-v2-3-0"
  },"467": {
    "doc": "History",
    "title": "2.2.0 / 2014-07-29",
    "content": " ",
    "url": "/docs/history/#v2-2-0",
    "relUrl": "/docs/history/#v2-2-0"
  },"468": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Throw a warning if the specified layout does not exist (#2620) | Whitelist Pygments options in safe mode (#2642) | . ",
    "url": "/docs/history/#minor-enhancements-v2-2-0",
    "relUrl": "/docs/history/#minor-enhancements-v2-2-0"
  },"469": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Remove unnecessary Jekyll::Tags::IncludeTag#blank? method (#2625) | Categories in the path are ignored (#2633) | . ",
    "url": "/docs/history/#bug-fixes-v2-2-0",
    "relUrl": "/docs/history/#bug-fixes-v2-2-0"
  },"470": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Refactoring Errors &amp; Requires of Third-Party stuff (#2591) | Add further tests for categories (#2584) | Proof site with html-proofer on change (#2605) | Fix up bug in #2605 which caused proofing the site not to function (#2608) | Use bundle exec in script/proof (#2610) | . ",
    "url": "/docs/history/#development-fixes-v2-2-0",
    "relUrl": "/docs/history/#development-fixes-v2-2-0"
  },"471": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Update Kramdown urls (#2588) | Add Jekyll::AutolinkEmail and Jekyll::GitMetadata to the list of third-party plugins (#2596) | Fix a bunch of broken links in the site (#2601) | Replace dead links with working links (#2611) | Add jekyll-hook to deployment methods (#2617) | Added kramdown-with-pygments plugin to the list of third-party plugins (#2623) | Update outdated “Extras” page and remove duplicate documentation (#2622) | Add co2 plugin to list of third-party plugins (#2639) | Attempt to clarify the way Sass imports happen (#2642) | . ",
    "url": "/docs/history/#site-enhancements-v2-2-0",
    "relUrl": "/docs/history/#site-enhancements-v2-2-0"
  },"472": {
    "doc": "History",
    "title": "2.1.1 / 2014-07-01",
    "content": " ",
    "url": "/docs/history/#v2-1-1",
    "relUrl": "/docs/history/#v2-1-1"
  },"473": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Patch read vulnerabilities for data &amp; confirm none for layouts (#2563) | Update Maruku dependency to allow use of the latest version (#2576) | Remove conditional assignment from document URL to prevent stale urls (#2575) | . ",
    "url": "/docs/history/#bug-fixes-v2-1-1",
    "relUrl": "/docs/history/#bug-fixes-v2-1-1"
  },"474": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add vertical margin to highlight to separate code blocks (#2558) | Add html_pages to Variables docs (#2567) | Fixed broken link to Permalinks page (#2572) | Update link to Windows installation guide (#2578) | . ",
    "url": "/docs/history/#site-enhancements-v2-1-1",
    "relUrl": "/docs/history/#site-enhancements-v2-1-1"
  },"475": {
    "doc": "History",
    "title": "2.1.0 / 2014-06-28",
    "content": " ",
    "url": "/docs/history/#v2-1-0",
    "relUrl": "/docs/history/#v2-1-0"
  },"476": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Bump to the latest Liquid version, 2.6.1 (#2495) | Add support for JSON files in the _data directory (#2369) | Allow subclasses to override EXCERPT_ATTRIBUTES_FOR_LIQUID (#2408) | Add Jekyll.env and jekyll.environment (the Liquid var) (#2417) | Use _config.yaml or _config.yml (.yml takes precedence) (#2406) | Override collection url template (#2418) | Allow subdirectories in _data (#2395) | Extract Pagination Generator into gem: jekyll-paginate (#2455) | Utilize date_to_rfc822 filter in site template (#2437) | Add categories, last build datetime, and generator to site template feed (#2438) | Configurable, replaceable Logger-compliant logger (#2444) | Extract gist tag into a separate gem (#2469) | Add collection attribute to Document#to_liquid to access the document’s collection label. (#2436) | Upgrade listen to 2.7.6 &lt;= x &lt; 3.0.0 (#2492) | Allow configuration of different Twitter and GitHub usernames in site template (#2485) | Bump Pygments to v0.6.0 (#2504) | Front matter defaults for documents in collections (#2419) | Include files with a url which ends in / in the site.html_pages list (#2524) | Make highlight tag use language- prefix in CSS class (#2511) | Lookup item property via item#to_liquid before #data or #[] in filters (#2493) | Skip initial build of site on serve with flag (#2477) | Add support for hl_lines in highlight tag (#2532) | Spike out --watch flag into a separate gem (#2550) | . ",
    "url": "/docs/history/#minor-enhancements-v2-1-0",
    "relUrl": "/docs/history/#minor-enhancements-v2-1-0"
  },"477": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Liquid sort filter should sort even if one of the values is nil (#2345) | Remove padding on pre code in the site template CSS (#2383) | Set log_level earlier to silence info level configuration output (#2393) | Only list pages which have title in site template (#2411) | Accept Numeric values for dates, not Number values (#2377) | Prevent code from overflowing container in site template (#2429) | Encode URLs in UTF-8 when escaping and unescaping (#2420) | No Layouts or Liquid for Asset Files (#2431) | Allow front matter defaults to set post categories (#2373) | Fix command in subcommand deprecation warning (#2457) | Keep all parent directories of files/dirs in keep_files (#2458) | When using RedCarpet and Rouge without Rouge installed, fixed erroneous error which stated that redcarpet was missing, not rouge. (#2464) | Ignore all directories and files that merit it on auto-generation (#2459) | Before copying file, explicitly remove the old one (#2535) | Merge file system categories with categories from YAML. (#2531) | Deep merge front matter defaults (#2490) | Ensure exclude and include arrays are arrays of strings (#2542) | Allow collections to have dots in their filenames (#2552) | Collections shouldn’t try to read in directories as files (#2552) | Be quiet very quickly. (#2520) | . ",
    "url": "/docs/history/#bug-fixes-v2-1-0",
    "relUrl": "/docs/history/#bug-fixes-v2-1-0"
  },"478": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Test Ruby 2.1.2 instead of 2.1.1 (#2374) | Add test for sorting UTF-8 characters (#2384) | Use https for GitHub links in documentation (#2470) | Remove coverage reporting with Coveralls (#2494) | Fix a bit of missing TomDoc to Jekyll::Commands::Build#build (#2554) | . ",
    "url": "/docs/history/#development-fixes-v2-1-0",
    "relUrl": "/docs/history/#development-fixes-v2-1-0"
  },"479": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Set timezone to America/Los_Angeles (#2394) | Improve JavaScript in anchor_links.html (#2368) | Remove note on Quickstart page about default markdown converter (#2387) | Remove broken link in extras.md to a Maruku fork (#2401) | Update Font Awesome to v4.1.0. (#2410) | Fix broken link on Installation page to Templates page (#2421) | Prevent table from extending parent width in permalink style table (#2424) | Add collections to info about pagination support (#2389) | Add jekyll_github_sample plugin to list of third-party plugins (#2463) | Clarify documentation around front matter defaults and add details about defaults for collections. (#2439) | Add Jekyll Project Version Tag to list of third-party plugins (#2468) | Use https for GitHub links across whole site (#2470) | Add StickerMule + Jekyll post (#2476) | Add Jekyll Asset Pipeline Reborn to list of third-party plugins (#2479) | Add link to jekyll-compress-html to list of third-party plugins (#2514) | Add Piwigo Gallery to list of third-party plugins (#2526) | Set show_drafts to false in default configuration listing (#2536) | Provide an updated link for Windows installation instructions (#2544) | Remove url from configuration docs (#2547) | Documentation for Continuous Integration for your Jekyll Site (#2432) | . ",
    "url": "/docs/history/#site-enhancements-v2-1-0",
    "relUrl": "/docs/history/#site-enhancements-v2-1-0"
  },"480": {
    "doc": "History",
    "title": "2.0.3 / 2014-05-08",
    "content": " ",
    "url": "/docs/history/#v2-0-3",
    "relUrl": "/docs/history/#v2-0-3"
  },"481": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Properly prefix links in site template with URL or baseurl depending upon need. (#2319) | Update gist tag comments and error message to require username (#2326) | Fix permalink setting in site template (#2331) | Don’t fail if any of the path objects are nil (#2325) | Instantiate all descendants for converters and generators, not just direct subclasses (#2334) | Replace all instances of site.name with site.title in site template (#2324) | Jekyll::Filters#time now accepts UNIX timestamps in string or number form (#2339) | Use item_property for where filter so it doesn’t break on collections (#2359) | Rescue errors thrown so --watch doesn’t fail (#2364) | . ",
    "url": "/docs/history/#bug-fixes-v2-0-3",
    "relUrl": "/docs/history/#bug-fixes-v2-0-3"
  },"482": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add missing “as” to assets docs page (#2337) | Update docs to reflect new baseurl default (#2341) | Add links to headers who have an ID. (#2342) | Use symbol instead of HTML number in upgrading.md (#2351) | Fix link to front matter defaults docs (#2353) | Fix for History.markdown in order to fix history page in docs (#2363) | . ",
    "url": "/docs/history/#site-enhancements-v2-0-3",
    "relUrl": "/docs/history/#site-enhancements-v2-0-3"
  },"483": {
    "doc": "History",
    "title": "2.0.2 / 2014-05-07",
    "content": " ",
    "url": "/docs/history/#v2-0-2",
    "relUrl": "/docs/history/#v2-0-2"
  },"484": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Correct use of url and baseurl in the site template. (#2317) | Default baseurl to \"\" (#2317) | . ",
    "url": "/docs/history/#bug-fixes-v2-0-2",
    "relUrl": "/docs/history/#bug-fixes-v2-0-2"
  },"485": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Correct docs for the gist plugin so it always includes the username. (#2314) | Clarify new (defaults, where filter) features in docs (#2316) | . ",
    "url": "/docs/history/#site-enhancements-v2-0-2",
    "relUrl": "/docs/history/#site-enhancements-v2-0-2"
  },"486": {
    "doc": "History",
    "title": "2.0.1 / 2014-05-06",
    "content": " ",
    "url": "/docs/history/#v2-0-1",
    "relUrl": "/docs/history/#v2-0-1"
  },"487": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Require kramdown gem instead of maruku gem | . ",
    "url": "/docs/history/#bug-fixes-v2-0-1",
    "relUrl": "/docs/history/#bug-fixes-v2-0-1"
  },"488": {
    "doc": "History",
    "title": "2.0.0 / 2014-05-06",
    "content": " ",
    "url": "/docs/history/#v2-0-0",
    "relUrl": "/docs/history/#v2-0-0"
  },"489": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Add “Collections” feature (#2199) | Add gem-based plugin whitelist to safe mode (#1657) | Replace the commander command line parser with a more robust solution for our needs called mercenary (#1706) | Remove support for Ruby 1.8.x (#1780) | Move to jekyll/jekyll from mojombo/jekyll (#1817) | Allow custom markdown processors (#1872) | Provide support for the Rouge syntax highlighter (#1859) | Provide support for Sass (#1932) | Provide a 300% improvement when generating sites that use Post#next or Post#previous (#1983) | Provide support for CoffeeScript (#1991) | Replace Maruku with Kramdown as Default Markdown Processor (#1988) | Expose site.static_files to Liquid (#2075) | Complete redesign of the template site generated by jekyll new (#2050) | Update Listen from 1.x to 2.x (#2097) | Front matter defaults (#2205) | Deprecate relative_permalinks configuration option (default to false) (#2307) | Exclude files based on prefix as well as fnmatch? (#2303) | . ",
    "url": "/docs/history/#major-enhancements-v2-0-0",
    "relUrl": "/docs/history/#major-enhancements-v2-0-0"
  },"490": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Move the EntryFilter class into the Jekyll module to avoid polluting the global namespace (#1800) | Add group_by Liquid filter create lists of items grouped by a common property’s value (#1788) | Add support for Maruku’s fenced_code_blocks option (#1799) | Update Redcarpet dependency to ~&gt; 3.0 (#1815) | Automatically sort all pages by name (#1848) | Better error message when time is not parseable (#1847) | Allow include tag variable arguments to use filters (#1841) | post_url tag should raise ArgumentError for invalid name (#1825) | Bump dependency mercenary to ~&gt; 0.2.0 (#1879) | Bump dependency safe_yaml to ~&gt; 1.0 (#1886) | Allow sorting of content by custom properties (#1849) | Add --quiet flag to silence output during build and serve (#1898) | Add a where filter to filter arrays based on a key/value pair (#1875) | Route 404 errors to a custom 404 page in development (#1899) | Excludes are now relative to the site source (#1916) | Bring MIME Types file for jekyll serve to complete parity with GH Pages servers (#1993) | Adding Breakpoint to make new site template more responsive (#2038) | Default to using the UTF-8 encoding when reading files. (#2031) | Update Redcarpet dependency to ~&gt; 3.1 (#2044) | Remove support for Ruby 1.9.2 (#2045) | Add .mkdown as valid Markdown extension (#2048) | Add index.xml to the list of WEBrick directory index files (#2041) | Make the layouts config key relative to CWD or to source (#2058) | Update Kramdown to ~&gt; 1.3 (#1894) | Remove unnecessary references to self (#2090) | Update to Mercenary v0.3.x (#2085) | Ship Sass support as a separate gem (#2098) | Extract core extensions into a Utils module (#2112) | Refactor CLI &amp; Commands For Greater Happiness (#2143) | Provide useful error when Pygments returns nil and error out (#2148) | Add support for unpublished drafts (#2164) | Add force_polling option to the serve command (#2165) | Clean up the &lt;head&gt; in the site template (#2186) | Permit YAML blocks to end with three dots to better conform with the YAML spec (#2110) | Use File.exist? instead of deprecated File.exists? (#2214) | Require newline after start of front matter header (#2211) | Add the ability for pages to be marked as published: false (#1492) | Add Jekyll::LiquidExtensions with .lookup_variable method for easy looking up of variable values in a Liquid context. (#2253) | Remove literal lang name from class (#2292) | Return utf-8 encoding in header for webrick error page response (#2289) | Make template site easier to customize (#2268) | Add two-digit year to permalink template option (#2301) | Add site.documents to Liquid payload (list of all docs) (#2295) | Take into account missing values in the Liquid sort filter (#2299) | . ",
    "url": "/docs/history/#minor-enhancements-v2-0-0",
    "relUrl": "/docs/history/#minor-enhancements-v2-0-0"
  },"491": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Don’t allow nil entries when loading posts (#1796) | Remove the scrollbar that’s always displayed in new sites generated from the site template (#1805) | Add #path to required methods in Jekyll::Convertible (#1866) | Default Maruku fenced code blocks to ON for 2.0.0-dev (#1831) | Change short opts for host and port for jekyll docs to be consistent with other subcommands (#1877) | Fix typos (#1910) | Lock Maruku at 0.7.0 to prevent bugs caused by Maruku 0.7.1 (#1958) | Fixes full path leak to source directory when using include tag (#1951) | Don’t generate pages that aren’t being published (#1931) | Use SafeYAML.load to avoid conflicts with other projects (#1982) | Relative posts should never fail to build (#1976) | Remove executable bits of non executable files (#2056) | #path for a draft is now _drafts instead of _posts (#2042) | Patch a couple show-stopping security vulnerabilities (#1946) | Sanitize paths uniformly, in a Windows-friendly way (#2065, #2109) | Update gem build steps to work correctly on Windows (#2118) | Remove obsolete normalize_options method call from bin/jekyll (#2121) | Remove + characters from Pygments lexer names when adding as a CSS class (#994) | Remove some code that caused Ruby interpreter warnings (#2178) | Only strip the drive name if it begins the string (#2175) | Remove default post with invalid date from site template (#2200) | Fix Post#url and Page#url escape (#1568) | Strip newlines from the {% highlight %} block content (#1823) | Load in rouge only when it’s been requested as the highlighter (#2189) | Convert input to string before XML escaping (xml_escape liquid filter) (#2244) | Modify configuration key for Collections and reset properly. (#2238) | Avoid duplicated output using highlight tag (#2264) | Only use Jekyll.logger for output (#2307) | Close the file descriptor in has_yaml_header? (#2310) | Add output to Document liquid output hash (#2309) | . ",
    "url": "/docs/history/#bug-fixes-v2-0-0",
    "relUrl": "/docs/history/#bug-fixes-v2-0-0"
  },"492": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Add a link to the site in the README.md file (#1795) | Add in History and site changes from v1-stable branch (#1836) | Testing additions on the Excerpt class (#1893) | Fix the highlight tag feature (#1859) | Test Jekyll under Ruby 2.1.0 (#1900) | Add script/cibuild for fun and profit (#1912) | Use Forwardable for delegation between Excerpt and Post (#1927) | Rename read_things to read_content (#1928) | Add script/branding script for ASCII art lovin’ (#1936) | Update the README to reflect the repo move (#1943) | Add the project vision to the README (#1935) | Speed up Travis CI builds by using Rebund (#1985) | Use Yarp as a Gem proxy for Travis CI (#1984) | Remove Yarp as a Gem proxy for Travis CI (#2004) | Move the reading of layouts into its own class (#2020) | Test Sass import (#2009) | Switch Maruku and Kramdown in lists of Runtime vs. Development dependencies (#2049) | Clean up the gemspec for the project (#2095) | Add Japanese translation of README and CONTRIBUTING docs. (#2081) | Re-align the tables in Cucumber (#2108) | Trim trailing spaces and convert tabs to spaces (#2122) | Fix the failing Travis scenarios due to Cucumber issues (#2155) | Wrap bundle install in travis_retry to retry when RubyGems fails (#2160) | Refactor tags and categories (#1639) | Extract plugin management into its own class (#2197) | Add missing tests for Command (#2216) | Update rr link in CONTRIBUTING doc (#2247) | Streamline Cucumber execution of jekyll subcommands (#2258) | Refactor Commands::Serve. (#2269) | Refactor highlight tag (#2154) | Update Util hash functions with latest from Rails (#2273) | Workaround for Travis bug (#2290) | . ",
    "url": "/docs/history/#development-fixes-v2-0-0",
    "relUrl": "/docs/history/#development-fixes-v2-0-0"
  },"493": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Document Kramdown’s GFM parser option (#1791) | Move CSS to includes &amp; update normalize.css to v2.1.3 (#1787) | Minify CSS only in production (#1803) | Fix broken link to installation of Ruby on Mountain Lion blog post on Troubleshooting docs page (#1797) | Fix issues with 1.4.1 release blog post (#1804) | Add note about deploying to OpenShift (#1812) | Collect all Windows-related docs onto one page (#1818) | Fixed typo in datafiles doc page (#1854) | Clarify how to access site in docs (#1864) | Add closing &lt;code&gt; tag to context.registers[:site] note (#1867) | Fix link to @mojombo’s site source (#1897) | Add paginate: nil to default configuration in docs (#1896) | Add link to our License in the site footer (#1889) | Add a charset note in “Writing Posts” doc page (#1902) | Disallow selection of path and prompt in bash examples | Add jekyll-compass to the plugin list (#1923) | Add note in Posts docs about stripping &lt;p&gt; tags from excerpt (#1933) | Add additional info about the new exclude behavior (#1938) | Linkify ‘awesome contributors’ to point to the contributors graph on GitHub (#1940) | Update docs/sites.md link to GitHub Training materials (#1949) | Update master with the release info from 1.4.3 (#1947) | Define docs nav in datafile (#1953) | Clarify the docs around the naming convention for posts (#1971) | Add missing next and previous docs for post layouts and templates (#1970) | Add note to Writing posts page about how to strip html from excerpt (#1962) | Add jekyll-humanize plugin to plugin list (#1998) | Add jekyll-font-awesome plugin to plugin list (#1999) | Add sublime-jekyll to list of Editor plugins (#2001) | Add vim-jekyll to the list of Editor plugins (#2005) | Fix non-semantic nesting of p tags in news_item layout (#2013) | Document destination folder cleaning (#2016) | Updated instructions for NearlyFreeSpeech.NET installation (#2015) | Update link to rack-jekyll on “Deployment Methods” page (#2047) | Fix typo in /docs/configuration (#2073) | Fix count in docs for site.static_files (#2077) | Update configuration docs to indicate utf-8 is the default for 2.0.0 and ASCII for 1.9.3 (#2074) | Add info about unreleased feature to the site (#2061) | Add whitespace to liquid example in GitHub Pages docs (#2084) | Clarify the way Sass and CoffeeScript files are read in and output (#2067) | Add lyche gallery tag plugin link to list of plugins (#2094) | Add Jekyll Pages Directory plugin to list of plugins (#2096) | Update Configuration docs page with new markdown extension (#2102) | Add jekyll-image-set to the list of third-party plugins (#2105) | Losslessly compress images (#2128) | Update normalize.css to 3.0.0 (#2126) | Update modernizr to v2.7.1 (#2129) | Add jekyll-ordinal to list of third-party plugins (#2150) | Add jekyll_figure to list of third-party plugins (#2158) | Clarify the documentation for safe mode (#2163) | Some HTML tidying (#2130) | Remove modernizr and use html5shiv.js directly for IE less than v9 (#2131) | Remove unused images (#2187) | Use array_to_sentence_string filter when outputting news item categories (#2191) | Add link to Help repo in primary navigation bar (#2177) | Switch to using an ico file for the shortcut icon (#2193) | Use numbers to specify font weights and only bring in font weights used (#2185) | Add a link to the list of all tz database time zones (#1824) | Clean-up and improve documentation feed.xml (#2192) | Remove duplicate entry in list of third-party plugins (#2206) | Reduce the whitespace in the favicon. (#2213) | Add jekyll-page-collections to list of third-party plugins (#2215) | Add a cross-reference about post_url (#2243) | Add jekyll-live-tiles to list of third-party plugins (#2250) | Fixed broken link to GitHub training material site source (#2257) | Update link to help repo, now called jekyll-help (#2277) | Fix capitalization of ‘Jekyll’ on Deployment Methods page (#2291) | Include plugins by sonnym in list of third-party plugins (#2297) | Add deprecated articles keeper filter to list of third-party plugins (#2300) | Simplify and improve our CSS. (#2127) | Use black text color for the mobile navbar (#2306) | Use the built in date filter and site.time for the copyright year. (#2305) | Update html5shiv to v3.7.2 (#2304) | Add 2.0.0 release post (#2298) | Add docs for custom markdown processors (#2298) | Add docs for where and group_by Liquid filters (#2298) | Remove notes in docs for unreleased features (#2309) | . ",
    "url": "/docs/history/#site-enhancements-v2-0-0",
    "relUrl": "/docs/history/#site-enhancements-v2-0-0"
  },"494": {
    "doc": "History",
    "title": "1.5.1 / 2014-03-27",
    "content": " ",
    "url": "/docs/history/#v1-5-1",
    "relUrl": "/docs/history/#v1-5-1"
  },"495": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Only strip the drive name if it begins the string (#2176) | . ",
    "url": "/docs/history/#bug-fixes-v1-5-1",
    "relUrl": "/docs/history/#bug-fixes-v1-5-1"
  },"496": {
    "doc": "History",
    "title": "1.5.0 / 2014-03-24",
    "content": " ",
    "url": "/docs/history/#v1-5-0",
    "relUrl": "/docs/history/#v1-5-0"
  },"497": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Loosen safe_yaml dependency to ~&gt; 1.0 (#2167) | Bump safe_yaml dependency to ~&gt; 1.0.0 (#1942) | . ",
    "url": "/docs/history/#minor-enhancements-v1-5-0",
    "relUrl": "/docs/history/#minor-enhancements-v1-5-0"
  },"498": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix issue where filesystem traversal restriction broke Windows (#2167) | Lock maruku at 0.7.0 (#2167) | . ",
    "url": "/docs/history/#bug-fixes-v1-5-0",
    "relUrl": "/docs/history/#bug-fixes-v1-5-0"
  },"499": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Lock cucumber at 1.3.11 (#2167) | . ",
    "url": "/docs/history/#development-fixes-v1-5-0",
    "relUrl": "/docs/history/#development-fixes-v1-5-0"
  },"500": {
    "doc": "History",
    "title": "1.4.3 / 2014-01-13",
    "content": " ",
    "url": "/docs/history/#v1-4-3",
    "relUrl": "/docs/history/#v1-4-3"
  },"501": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Patch show-stopping security vulnerabilities (#1944) | . ",
    "url": "/docs/history/#bug-fixes-v1-4-3",
    "relUrl": "/docs/history/#bug-fixes-v1-4-3"
  },"502": {
    "doc": "History",
    "title": "1.4.2 / 2013-12-16",
    "content": " ",
    "url": "/docs/history/#v1-4-2",
    "relUrl": "/docs/history/#v1-4-2"
  },"503": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Turn on Maruku fenced code blocks by default (#1830) | . ",
    "url": "/docs/history/#bug-fixes-v1-4-2",
    "relUrl": "/docs/history/#bug-fixes-v1-4-2"
  },"504": {
    "doc": "History",
    "title": "1.4.1 / 2013-12-09",
    "content": " ",
    "url": "/docs/history/#v1-4-1",
    "relUrl": "/docs/history/#v1-4-1"
  },"505": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Don’t allow nil entries when loading posts (#1796) | . ",
    "url": "/docs/history/#bug-fixes-v1-4-1",
    "relUrl": "/docs/history/#bug-fixes-v1-4-1"
  },"506": {
    "doc": "History",
    "title": "1.4.0 / 2013-12-07",
    "content": " ",
    "url": "/docs/history/#v1-4-0",
    "relUrl": "/docs/history/#v1-4-0"
  },"507": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Add support for TOML config files (#1765) | . ",
    "url": "/docs/history/#major-enhancements-v1-4-0",
    "relUrl": "/docs/history/#major-enhancements-v1-4-0"
  },"508": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Sort plugins as a way to establish a load order (#1682) | Update Maruku to 0.7.0 (#1775) | . ",
    "url": "/docs/history/#minor-enhancements-v1-4-0",
    "relUrl": "/docs/history/#minor-enhancements-v1-4-0"
  },"509": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Add a space between two words in a Pagination warning message (#1769) | Upgrade toml gem to v0.1.0 to maintain compat with Ruby 1.8.7 (#1778) | . ",
    "url": "/docs/history/#bug-fixes-v1-4-0",
    "relUrl": "/docs/history/#bug-fixes-v1-4-0"
  },"510": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Remove some whitespace in the code (#1755) | Remove some duplication in the reading of posts and drafts (#1779) | . ",
    "url": "/docs/history/#development-fixes-v1-4-0",
    "relUrl": "/docs/history/#development-fixes-v1-4-0"
  },"511": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Fixed case of a word in the Jekyll v1.3.0 release post (#1762) | Fixed the mime type for the favicon (#1772) | . ",
    "url": "/docs/history/#site-enhancements-v1-4-0",
    "relUrl": "/docs/history/#site-enhancements-v1-4-0"
  },"512": {
    "doc": "History",
    "title": "1.3.1 / 2013-11-26",
    "content": " ",
    "url": "/docs/history/#v1-3-1",
    "relUrl": "/docs/history/#v1-3-1"
  },"513": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add a --prefix option to passthrough for the importers (#1669) | Push the paginator plugin lower in the plugin priority order so other plugins run before it (#1759) | . ",
    "url": "/docs/history/#minor-enhancements-v1-3-1",
    "relUrl": "/docs/history/#minor-enhancements-v1-3-1"
  },"514": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix the include tag when ran in a loop (#1726) | Fix errors when using --watch on 1.8.7 (#1730) | Specify where the include is called from if an included file is missing (#1746) | . ",
    "url": "/docs/history/#bug-fixes-v1-3-1",
    "relUrl": "/docs/history/#bug-fixes-v1-3-1"
  },"515": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Extract Site#filter_entries into its own object (#1697) | Enable Travis’ bundle caching (#1734) | Remove trailing whitespace in some files (#1736) | Fix a duplicate test name (#1754) | . ",
    "url": "/docs/history/#development-fixes-v1-3-1",
    "relUrl": "/docs/history/#development-fixes-v1-3-1"
  },"516": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Update link to example Rakefile to point to specific commit (#1741) | Fix drafts docs to indicate that draft time is based on file modification time, not Time.now (#1695) | Add jekyll-monthly-archive-plugin and jekyll-category-archive-plugin to list of third-party plugins (#1693) | Add jekyll-asset-path-plugin to list of third-party plugins (#1670) | Add emoji-for-jekyll to list of third-part plugins (#1708) | Fix previous section link on plugins page to point to pagination page (#1707) | Add org-mode converter plugin to third-party plugins (#1711) | Point “Blog migrations” page to http://import.jekyllrb.com (#1732) | Add docs for post_url when posts are in subdirectories (#1718) | Update the docs to point to example.com (#1448) | . ",
    "url": "/docs/history/#site-enhancements-v1-3-1",
    "relUrl": "/docs/history/#site-enhancements-v1-3-1"
  },"517": {
    "doc": "History",
    "title": "1.3.0 / 2013-11-04",
    "content": " ",
    "url": "/docs/history/#v1-3-0",
    "relUrl": "/docs/history/#v1-3-0"
  },"518": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Add support for adding data as YAML files under a site’s _data directory (#1003) | Allow variables to be used with include tags (#1495) | Allow using gems for plugin management (#1557) | . ",
    "url": "/docs/history/#major-enhancements-v1-3-0",
    "relUrl": "/docs/history/#major-enhancements-v1-3-0"
  },"519": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Decrease the specificity in the site template CSS (#1574) | Add encoding configuration option (#1449) | Provide better error handling for Jekyll’s custom Liquid tags (#1514) | If an included file causes a Liquid error, add the path to the include file that caused the error to the error message (#1596) | If a layout causes a Liquid error, change the error message so that we know it comes from the layout (#1601) | Update Kramdown dependency to ~&gt; 1.2 (#1610) | Update safe_yaml dependency to ~&gt; 0.9.7 (#1602) | Allow layouts to be in subfolders like includes (#1622) | Switch to listen for site watching while serving (#1589) | Add a json liquid filter to be used in sites (#1651) | Point people to the migration docs when the jekyll-import gem is missing (#1662) | . ",
    "url": "/docs/history/#minor-enhancements-v1-3-0",
    "relUrl": "/docs/history/#minor-enhancements-v1-3-0"
  },"520": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix up matching against source and destination when the two locations are similar (#1556) | Fix the missing pathname require in certain cases (#1255) | Use + instead of Array#concat when building Post attribute list (#1571) | Print server address when launching a server (#1586) | Downgrade to Maruku ~&gt; 0.6.0 in order to avoid changes in rendering (#1598) | Fix error with failing include tag when variable was file name (#1613) | Downcase lexers before passing them to pygments (#1615) | Capitalize the short verbose switch because it conflicts with the built-in Commander switch (#1660) | Fix compatibility with 1.8.x (#1665) | Fix an error with the new file watching code due to library version incompatibilities (#1687) | . ",
    "url": "/docs/history/#bug-fixes-v1-3-0",
    "relUrl": "/docs/history/#bug-fixes-v1-3-0"
  },"521": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Add coverage reporting with Coveralls (#1539) | Refactor the Liquid include tag (#1490) | Update launchy dependency to ~&gt; 2.3 (#1608) | Update rr dependency to ~&gt; 1.1 (#1604) | Update cucumber dependency to ~&gt; 1.3 (#1607) | Update coveralls dependency to ~&gt; 0.7.0 (#1606) | Update rake dependency to ~&gt; 10.1 (#1603) | Clean up site.rb comments to be more concise/uniform (#1616) | Use the master branch for the build badge in the readme (#1636) | Refactor Site#render (#1638) | Remove duplication in command line options (#1637) | Add tests for all the coderay options (#1543) | Improve some of the Cucumber test code (#1493) | Improve comparisons of timestamps by ignoring the seconds (#1582) | . ",
    "url": "/docs/history/#development-fixes-v1-3-0",
    "relUrl": "/docs/history/#development-fixes-v1-3-0"
  },"522": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Fix params for JekyllImport::WordPress.process arguments (#1554) | Add jekyll-suggested-tweet to list of third-party plugins (#1555) | Link to Liquid’s docs for tags and filters (#1553) | Add note about installing Xcode on the Mac in the Installation docs (#1561) | Simplify/generalize pagination docs (#1577) | Add documentation for the new data sources feature (#1503) | Add more information on how to create generators (#1590, #1592) | Improve the instructions for mimicking GitHub Flavored Markdown (#1614) | Add jekyll-import warning note of missing dependencies (#1626) | Fix grammar in the Usage section (#1635) | Add documentation for the use of gems as plugins (#1656) | Document the existence of a few additional plugins (#1405) | Document that the date_to_string always returns a two digit day (#1663) | Fix navigation in the “Working with Drafts” page (#1667) | Fix an error with the data documentation (#1691) | . ",
    "url": "/docs/history/#site-enhancements-v1-3-0",
    "relUrl": "/docs/history/#site-enhancements-v1-3-0"
  },"523": {
    "doc": "History",
    "title": "1.2.1 / 2013-09-14",
    "content": " ",
    "url": "/docs/history/#v1-2-1",
    "relUrl": "/docs/history/#v1-2-1"
  },"524": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Print better messages for detached server. Mute output on detach. (#1518) | Disable reverse lookup when running jekyll serve (#1363) | Upgrade RedCarpet dependency to ~&gt; 2.3.0 (#1515) | Upgrade to Liquid &gt;= 2.5.2, &lt; 2.6 (#1536) | . ",
    "url": "/docs/history/#minor-enhancements-v1-2-1",
    "relUrl": "/docs/history/#minor-enhancements-v1-2-1"
  },"525": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix file discrepancy in gemspec (#1522) | Force rendering of Include tag (#1525) | . ",
    "url": "/docs/history/#bug-fixes-v1-2-1",
    "relUrl": "/docs/history/#bug-fixes-v1-2-1"
  },"526": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Add a rake task to generate a new release post (#1404) | Mute LSI output in tests (#1531) | Update contributor documentation (#1537) | . ",
    "url": "/docs/history/#development-fixes-v1-2-1",
    "relUrl": "/docs/history/#development-fixes-v1-2-1"
  },"527": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Fix a couple of validation errors on the site (#1511) | Make navigation menus reusable (#1507) | Fix link to History page from Release v1.2.0 notes post. | Fix markup in History file for command line options (#1512) | Expand 1.2 release post title to 1.2.0 (#1516) | . ",
    "url": "/docs/history/#site-enhancements-v1-2-1",
    "relUrl": "/docs/history/#site-enhancements-v1-2-1"
  },"528": {
    "doc": "History",
    "title": "1.2.0 / 2013-09-06",
    "content": " ",
    "url": "/docs/history/#v1-2-0",
    "relUrl": "/docs/history/#v1-2-0"
  },"529": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Disable automatically-generated excerpts when excerpt_separator is \"\". (#1386) | Add checking for URL conflicts when running jekyll doctor (#1389) | . ",
    "url": "/docs/history/#major-enhancements-v1-2-0",
    "relUrl": "/docs/history/#major-enhancements-v1-2-0"
  },"530": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Catch and fix invalid paginate values (#1390) | Remove superfluous div.container from the default html template for jekyll new (#1315) | Add -D short-form switch for the drafts option (#1394) | Update the links in the site template for Twitter and GitHub (#1400) | Update dummy email address to example.com domain (#1408) | Update normalize.css to v2.1.2 and minify; add rake task to update normalize.css with greater ease. (#1430) | Add the ability to detach the server ran by jekyll serve from it’s controlling terminal (#1443) | Improve permalink generation for URLs with special characters (#944) | Expose the current Jekyll version to posts and pages via a new jekyll.version variable (#1481) | . ",
    "url": "/docs/history/#minor-enhancements-v1-2-0",
    "relUrl": "/docs/history/#minor-enhancements-v1-2-0"
  },"531": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Markdown extension matching matches only exact matches (#1382) | Fixed NoMethodError when message passed to Stevenson#message is nil (#1388) | Use binary mode when writing file (#1364) | Fix ‘undefined method encoding for “mailto”’ errors w/ Ruby 1.8 and Kramdown &gt; 0.14.0 (#1397) | Do not force the permalink to be a dir if it ends on .html (#963) | When a Liquid Exception is caught, show the full path rel. to site source (#1415) | Properly read in the config options when serving the docs locally (#1444) | Fixed --layouts option for build and serve commands (#1458) | Remove kramdown as a runtime dependency since it’s optional (#1498) | Provide proper error handling for invalid file names in the include tag (#1494) | . ",
    "url": "/docs/history/#bug-fixes-v1-2-0",
    "relUrl": "/docs/history/#bug-fixes-v1-2-0"
  },"532": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Remove redundant argument to Jekyll::Commands::New#scaffold_post_content (#1356) | Add new dependencies to the README (#1360) | Fix link to contributing page in README (#1424) | Update TomDoc in Pager#initialize to match params (#1441) | Refactor Site#cleanup into Jekyll::Site::Cleaner class (#1429) | Several other small minor refactorings (#1341) | Ignore _site in jekyllrb.com deploy (#1480) | Add Gem version and dependency badge to README (#1497) | . ",
    "url": "/docs/history/#development-fixes-v1-2-0",
    "relUrl": "/docs/history/#development-fixes-v1-2-0"
  },"533": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add info about new releases (#1353) | Update plugin list with jekyll-rss plugin (#1354) | Update the site list page with Ruby’s official site (#1358) | Add jekyll-ditaa to list of third-party plugins (#1370) | Add postfiles to list of third-party plugins (#1373) | For internal links, use full path including trailing / (#1411) | Use curly apostrophes in the docs (#1419) | Update the docs for Redcarpet in Jekyll (#1418) | Add pluralize and reading_time filters to docs (#1439) | Fix markup for the Kramdown options (#1445) | Fix typos in the History file (#1454) | Add trailing slash to site’s post URL (#1462) | Clarify that --config will take multiple files (#1474) | Fix docs/templates.md private gist example (#1477) | Use site.repository for Jekyll’s GitHub URL (#1463) | Add jekyll-pageless-redirects to list of third-party plugins (#1486) | Clarify that date_to_xmlschema returns an ISO 8601 string (#1488) | Add jekyll-good-include to list of third-party plugins (#1491) | XML escape the blog post title in our feed (#1501) | Add jekyll-toc-generator to list of third-party plugins (#1506) | . ",
    "url": "/docs/history/#site-enhancements-v1-2-0",
    "relUrl": "/docs/history/#site-enhancements-v1-2-0"
  },"534": {
    "doc": "History",
    "title": "1.1.2 / 2013-07-25",
    "content": " ",
    "url": "/docs/history/#v1-1-2",
    "relUrl": "/docs/history/#v1-1-2"
  },"535": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Require Liquid 2.5.1 (#1349) | . ",
    "url": "/docs/history/#bug-fixes-v1-1-2",
    "relUrl": "/docs/history/#bug-fixes-v1-1-2"
  },"536": {
    "doc": "History",
    "title": "1.1.1 / 2013-07-24",
    "content": " ",
    "url": "/docs/history/#v1-1-1",
    "relUrl": "/docs/history/#v1-1-1"
  },"537": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Remove superfluous table selector from main.css in jekyll new template (#1328) | Abort with non-zero exit codes (#1338) | . ",
    "url": "/docs/history/#minor-enhancements-v1-1-1",
    "relUrl": "/docs/history/#minor-enhancements-v1-1-1"
  },"538": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix up the rendering of excerpts (#1339) | . ",
    "url": "/docs/history/#bug-fixes-v1-1-1",
    "relUrl": "/docs/history/#bug-fixes-v1-1-1"
  },"539": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add Jekyll Image Tag to the plugins list (#1306) | Remove erroneous statement that site.pages are sorted alphabetically. | Add info about the _drafts directory to the directory structure docs (#1320) | Improve the layout of the plugin listing by organizing it into categories (#1310) | Add generator-jekyllrb and grunt-jekyll to plugins page (#1330) | Mention Kramdown as option for markdown parser on Extras page (#1318) | Update Quick-Start page to include reminder that all requirements must be installed (#1327) | Change filename in include example to an HTML file so as not to indicate that Jekyll will automatically convert them. (#1303) | Add an RSS feed for commits to Jekyll (#1343) | . ",
    "url": "/docs/history/#site-enhancements-v1-1-1",
    "relUrl": "/docs/history/#site-enhancements-v1-1-1"
  },"540": {
    "doc": "History",
    "title": "1.1.0 / 2013-07-14",
    "content": " ",
    "url": "/docs/history/#v1-1-0",
    "relUrl": "/docs/history/#v1-1-0"
  },"541": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Add docs subcommand to read Jekyll’s docs when offline. (#1046) | Support passing parameters to templates in include tag (#1204) | Add support for Liquid tags to post excerpts (#1302) | . ",
    "url": "/docs/history/#major-enhancements-v1-1-0",
    "relUrl": "/docs/history/#major-enhancements-v1-1-0"
  },"542": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Search the hierarchy of pagination path up to site root to determine template page for pagination. (#1198) | Add the ability to generate a new Jekyll site without a template (#1171) | Use redcarpet as the default markdown engine in newly generated sites (#1245, #1247) | Add redcarpet as a runtime dependency so jekyll build works out-of-the-box for new sites. (#1247) | In the generated site, remove files that will be replaced by a directory (#1118) | Fail loudly if a user-specified configuration file doesn’t exist (#1098) | Allow for all options for Kramdown HTML Converter (#1201) | . ",
    "url": "/docs/history/#minor-enhancements-v1-1-0",
    "relUrl": "/docs/history/#minor-enhancements-v1-1-0"
  },"543": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix pagination in subdirectories. (#1198) | Fix an issue with directories and permalinks that have a plus sign (+) in them (#1215) | Provide better error reporting when generating sites (#1253) | Latest posts first in non-LSI related_posts (#1271) | . ",
    "url": "/docs/history/#bug-fixes-v1-1-0",
    "relUrl": "/docs/history/#bug-fixes-v1-1-0"
  },"544": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Merge the theme and layout Cucumber steps into one step (#1151) | Restrict activesupport dependency to pre-4.0.0 to maintain compatibility with &lt;= 1.9.2 | Include/exclude deprecation handling simplification (#1284) | Convert README to Markdown. (#1267) | Refactor Jekyll::Site (#1144) | . ",
    "url": "/docs/history/#development-fixes-v1-1-0",
    "relUrl": "/docs/history/#development-fixes-v1-1-0"
  },"545": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add “News” section for release notes, along with an RSS feed (#1093, #1285, #1286) | Add “History” page. | Restructured docs sections to include “Meta” section. | Add message to “Templates” page that specifies that Python must be installed in order to use Pygments. (#1182) | Update link to the official Maruku repo (#1175) | Add documentation about paginate_path to “Templates” page in docs (#1129) | Give the quick-start guide its own page (#1191) | Update ProTip on Installation page in docs to point to all the info about Pygments and the ‘highlight’ tag. (#1196) | Run site/img through ImageOptim (thanks @qrush!) (#1208) | Added Jade Converter to site/docs/plugins (#1210) | Fix location of docs pages in Contributing pages (#1214) | Add ReadInXMinutes plugin to the plugin list (#1222) | Remove plugins from the plugin list that have equivalents in Jekyll proper (#1223) | Add jekyll-assets to the plugin list (#1225) | Add jekyll-pandoc-multiple-formats to the plugin list (#1229) | Remove dead link to “Using Git to maintain your blog” (#1227) | Tidy up the third-party plugins listing (#1228) | Update contributor information (#1192) | Update URL of article about Blogger migration (#1242) | Specify that RedCarpet is the default for new Jekyll sites on Quickstart page (#1247) | Added site.pages to Variables page in docs (#1251) | Add Youku and Tudou Embed link on Plugins page. (#1250) | Add note that gist tag supports private gists. (#1248) | Add jekyll-timeago to list of third-party plugins. (#1260) | Add jekyll-swfobject to list of third-party plugins. (#1263) | Add jekyll-picture-tag to list of third-party plugins. (#1280) | Update the GitHub Pages documentation regarding relative URLs (#1291) | Update the S3 deployment documentation (#1294) | Add suggestion for Xcode CLT install to troubleshooting page in docs (#1296) | Add ‘Working with drafts’ page to docs (#1289) | Add information about time zones to the documentation for a page’s date (#1304) | . ",
    "url": "/docs/history/#site-enhancements-v1-1-0",
    "relUrl": "/docs/history/#site-enhancements-v1-1-0"
  },"546": {
    "doc": "History",
    "title": "1.0.3 / 2013-06-07",
    "content": " ",
    "url": "/docs/history/#v1-0-3",
    "relUrl": "/docs/history/#v1-0-3"
  },"547": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add support to gist tag for private gists. (#1189) | Fail loudly when Maruku errors out (#1190) | Move the building of related posts into their own class (#1057) | Removed trailing spaces in several places throughout the code (#1116) | Add a --force option to jekyll new (#1115) | Convert IDs in the site template to classes (#1170) | . ",
    "url": "/docs/history/#minor-enhancements-v1-0-3",
    "relUrl": "/docs/history/#minor-enhancements-v1-0-3"
  },"548": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix typo in Stevenson constant “ERROR”. (#1166) | Rename Jekyll::Logger to Jekyll::Stevenson to fix inheritance issue (#1106) | Exit with a non-zero exit code when dealing with a Liquid error (#1121) | Make the exclude and include options backwards compatible with versions of Jekyll prior to 1.0 (#1114) | Fix pagination on Windows (#1063) | Fix the application of Pygments’ Generic Output style to Go code (#1156) | . ",
    "url": "/docs/history/#bug-fixes-v1-0-3",
    "relUrl": "/docs/history/#bug-fixes-v1-0-3"
  },"549": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add a Pro Tip to docs about front matter variables being optional (#1147) | Add changelog to site as History page in /docs/ (#1065) | Add note to Upgrading page about new config options in 1.0.x (#1146) | Documentation for date_to_rfc822 and uri_escape (#1142) | Documentation highlight boxes shouldn’t show scrollbars if not necessary (#1123) | Add link to jekyll-minibundle in the doc’s plugins list (#1035) | Quick patch for importers documentation | Fix prefix for WordpressDotCom importer in docs (#1107) | Add jekyll-contentblocks plugin to docs (#1068) | Make code bits in notes look more natural, more readable (#1089) | Fix logic for relative_permalinks instructions on Upgrading page (#1101) | Add docs for post excerpt (#1072) | Add docs for gist tag (#1072) | Add docs indicating that Pygments does not need to be installed separately (#1099, #1119) | Update the migrator docs to be current (#1136) | Add the Jekyll Gallery Plugin to the plugin list (#1143) | . ",
    "url": "/docs/history/#site-enhancements-v1-0-3",
    "relUrl": "/docs/history/#site-enhancements-v1-0-3"
  },"550": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Use Jekyll.logger instead of Jekyll::Stevenson to log things (#1149) | Fix pesky Cucumber infinite loop (#1139) | Do not write posts with timezones in Cucumber tests (#1124) | Use ISO formatted dates in Cucumber features (#1150) | . ",
    "url": "/docs/history/#development-fixes-v1-0-3",
    "relUrl": "/docs/history/#development-fixes-v1-0-3"
  },"551": {
    "doc": "History",
    "title": "1.0.2 / 2013-05-12",
    "content": " ",
    "url": "/docs/history/#v1-0-2",
    "relUrl": "/docs/history/#v1-0-2"
  },"552": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Add jekyll doctor command to check site for any known compatibility problems (#1081) | Backwards-compatibilize relative permalinks (#1081) | . ",
    "url": "/docs/history/#major-enhancements-v1-0-2",
    "relUrl": "/docs/history/#major-enhancements-v1-0-2"
  },"553": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add a data-lang=\"&lt;lang&gt;\" attribute to Redcarpet code blocks (#1066) | Deprecate old config server_port, match to port if port isn’t set (#1084) | Update pygments.rb version to 0.5.0 (#1061) | Update Kramdown version to 1.0.2 (#1067) | . ",
    "url": "/docs/history/#minor-enhancements-v1-0-2",
    "relUrl": "/docs/history/#minor-enhancements-v1-0-2"
  },"554": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Fix issue when categories are numbers (#1078) | Catching that Redcarpet gem isn’t installed (#1059) | . ",
    "url": "/docs/history/#bug-fixes-v1-0-2",
    "relUrl": "/docs/history/#bug-fixes-v1-0-2"
  },"555": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Add documentation about relative_permalinks (#1081) | Remove pygments-installation instructions, as pygments.rb is bundled with it (#1079) | Move pages to be Pages for realz (#985) | Updated links to Liquid documentation (#1073) | . ",
    "url": "/docs/history/#site-enhancements-v1-0-2",
    "relUrl": "/docs/history/#site-enhancements-v1-0-2"
  },"556": {
    "doc": "History",
    "title": "1.0.1 / 2013-05-08",
    "content": " ",
    "url": "/docs/history/#v1-0-1",
    "relUrl": "/docs/history/#v1-0-1"
  },"557": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Do not force use of toc_token when using generate_tok in RDiscount (#1048) | Add newer language- class name prefix to code blocks (#1037) | Commander error message now preferred over process abort with incorrect args (#1040) | . ",
    "url": "/docs/history/#minor-enhancements-v1-0-1",
    "relUrl": "/docs/history/#minor-enhancements-v1-0-1"
  },"558": {
    "doc": "History",
    "title": "Bug Fixes",
    "content": ". | Make Redcarpet respect the pygments configuration option (#1053) | Fix the index build with LSI (#1045) | Don’t print deprecation warning when no arguments are specified. (#1041) | Add missing &lt;/div&gt; to site template used by new subcommand, fixed typos in code (#1032) | . ",
    "url": "/docs/history/#bug-fixes-v1-0-1",
    "relUrl": "/docs/history/#bug-fixes-v1-0-1"
  },"559": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Changed https to http in the GitHub Pages link (#1051) | Remove CSS cruft, fix typos, fix HTML errors (#1028) | Removing manual install of Pip and Distribute (#1025) | Updated URL for Markdown references plugin (#1022) | . ",
    "url": "/docs/history/#site-enhancements-v1-0-1",
    "relUrl": "/docs/history/#site-enhancements-v1-0-1"
  },"560": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Markdownify history file (#1027) | Update links on README to point to new jekyllrb.com (#1018) | . ",
    "url": "/docs/history/#development-fixes-v1-0-1",
    "relUrl": "/docs/history/#development-fixes-v1-0-1"
  },"561": {
    "doc": "History",
    "title": "1.0.0 / 2013-05-06",
    "content": " ",
    "url": "/docs/history/#v1-0-0",
    "relUrl": "/docs/history/#v1-0-0"
  },"562": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Add jekyll new subcommand: generate a Jekyll scaffold (#764) | Refactored Jekyll commands into subcommands: build, serve, and migrate. (#690) | Removed importers/migrators from main project, migrated to jekyll-import sub-gem (#793) | Added ability to render drafts in _drafts folder via command line (#833) | Add ordinal date permalink style (/:categories/:year/:y_day/:title.html) (#928) | . ",
    "url": "/docs/history/#major-enhancements-v1-0-0",
    "relUrl": "/docs/history/#major-enhancements-v1-0-0"
  },"563": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Site template HTML5-ified (#964) | Use post’s directory path when matching for the post_url tag (#998) | Loosen dependency on Pygments so it’s only required when it’s needed (#1015) | Parse strings into Time objects for date-related Liquid filters (#1014) | Tell the user if there is no subcommand specified (#1008) | Freak out if the destination of jekyll new exists and is non-empty (#981) | Add timezone configuration option for compilation (#957) | Add deprecation messages for pre-1.0 CLI options (#959) | Refactor and colorize logging (#959) | Refactor Markdown parsing (#955) | Added application/vnd.apple.pkpass to mime.types served by WEBrick (#907) | Move template site to default markdown renderer (#961) | Expose new attribute to Liquid via page: page.path (#951) | Accept multiple config files from command line (#945) | Add page variable to liquid custom tags and blocks (#413) | Add paginator.previous_page_path and paginator.next_page_path (#942) | Backwards compatibility for ‘auto’ (#821, #934) | Added date_to_rfc822 used on RSS feeds (#892) | Upgrade version of pygments.rb to 0.4.2 (#927) | Added short month (e.g. “Sep”) to permalink style options for posts (#890) | Expose site.baseurl to Liquid templates (#869) | Adds excerpt attribute to posts which contains first paragraph of content (#837) | Accept custom configuration file via CLI (#863) | Load in GitHub Pages MIME Types on jekyll serve (#847, #871) | Improve debuggability of error message for a malformed highlight tag (#785) | Allow symlinked files in unsafe mode (#824) | Add ‘gist’ Liquid tag to core (#822, #861) | New format of Jekyll output (#795) | Reinstate --limit_posts and --future switches (#788) | Remove ambiguity from command descriptions (#815) | Fix SafeYAML Warnings (#807) | Relaxed Kramdown version to 0.14 (#808) | Aliased jekyll server to jekyll serve. (#792) | Updated gem versions for Kramdown, Rake, Shoulda, Cucumber, and RedCarpet. (#744) | Refactored Jekyll subcommands into Jekyll::Commands submodule, which now contains them (#768) | Rescue from import errors in Wordpress.com migrator (#671) | Massively accelerate LSI performance (#664) | Truncate post slugs when importing from Tumblr (#496) | Add glob support to include, exclude option (#743) | Layout of Page or Post defaults to ‘page’ or ‘post’, respectively (#580) REPEALED by (#977) | “Keep files” feature (#685) | Output full path &amp; name for files that don’t parse (#745) | Add source and destination directory protection (#535) | Better YAML error message (#718) | Bug Fixes | Paginate in subdirectories properly (#1016) | Ensure post and page URLs have a leading slash (#992) | Catch all exceptions, not just StandardError descendents (#1007) | Bullet-proof limit_posts option (#1004) | Read in YAML as UTF-8 to accept non-ASCII chars (#836) | Fix the CLI option --plugins to actually accept dirs and files (#993) | Allow ‘excerpt’ in front matter to override the extracted excerpt (#946) | Fix cascade problem with site.baseurl, site.port and site.host. (#935) | Filter out directories with valid post names (#875) | Fix symlinked static files not being correctly built in unsafe mode (#909) | Fix integration with directory_watcher 1.4.x (#916) | Accepting strings as arguments to jekyll-import command (#910) | Force usage of older directory_watcher gem as 1.5 is broken (#883) | Ensure all Post categories are downcase (#842, #872) | Force encoding of the rdiscount TOC to UTF8 to avoid conversion errors (#555) | Patch for multibyte URI problem with jekyll serve (#723) | Order plugin execution by priority (#864) | Fixed Page#dir and Page#url for edge cases (#536) | Fix broken post_url with posts with a time in their front matter (#831) | Look for plugins under the source directory (#654) | Tumblr Migrator: finds _posts dir correctly, fixes truncation of long post names (#775) | Force Categories to be Strings (#767) | Safe YAML plugin to prevent vulnerability (#777) | Add SVG support to Jekyll/WEBrick. (#407, #406) | Prevent custom destination from causing continuous regen on watch (#528, #820, #862) | . ",
    "url": "/docs/history/#minor-enhancements-v1-0-0",
    "relUrl": "/docs/history/#minor-enhancements-v1-0-0"
  },"564": {
    "doc": "History",
    "title": "Site Enhancements",
    "content": ". | Responsify (#860) | Fix spelling, punctuation and phrasal errors (#989) | Update quickstart instructions with new command (#966) | Add docs for page.excerpt (#956) | Add docs for page.path (#951) | Clean up site docs to prepare for 1.0 release (#918) | Bring site into master branch with better preview/deploy (#709) | Redesigned site (#583) | . ",
    "url": "/docs/history/#site-enhancements-v1-0-0",
    "relUrl": "/docs/history/#site-enhancements-v1-0-0"
  },"565": {
    "doc": "History",
    "title": "Development Fixes",
    "content": ". | Exclude Cucumber 1.2.4, which causes tests to fail in 1.9.2 (#938) | Added “features:html” rake task for debugging purposes, cleaned up Cucumber profiles (#832) | Explicitly require HTTPS rubygems source in Gemfile (#826) | Changed Ruby version for development to 1.9.3-p374 from p362 (#801) | Including a link to the GitHub Ruby style guide in CONTRIBUTING.md (#806) | Added script/bootstrap (#776) | Running Simplecov under 2 conditions: ENV(COVERAGE)=true and with Ruby version of greater than 1.9 (#771) | Switch to Simplecov for coverage report (#765) | . ",
    "url": "/docs/history/#development-fixes-v1-0-0",
    "relUrl": "/docs/history/#development-fixes-v1-0-0"
  },"566": {
    "doc": "History",
    "title": "0.12.1 / 2013-02-19",
    "content": " ",
    "url": "/docs/history/#v0-12-1",
    "relUrl": "/docs/history/#v0-12-1"
  },"567": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Update Kramdown version to 0.14.1 (#744) | Test Enhancements | Update Rake version to 10.0.3 (#744) | Update Shoulda version to 3.3.2 (#744) | Update Redcarpet version to 2.2.2 (#744) | . ",
    "url": "/docs/history/#minor-enhancements-v0-12-1",
    "relUrl": "/docs/history/#minor-enhancements-v0-12-1"
  },"568": {
    "doc": "History",
    "title": "0.12.0 / 2012-12-22",
    "content": " ",
    "url": "/docs/history/#v0-12-0",
    "relUrl": "/docs/history/#v0-12-0"
  },"569": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add ability to explicitly specify included files (#261) | Add --default-mimetype option (#279) | Allow setting of RedCloth options (#284) | Add post_url Liquid tag for internal post linking (#369) | Allow multiple plugin dirs to be specified (#438) | Inline TOC token support for RDiscount (#333) | Add the option to specify the paginated url format (#342) | Swap out albino for pygments.rb (#569) | Support Redcarpet 2 and fenced code blocks (#619) | Better reporting of Liquid errors (#624) | Bug Fixes | Allow some special characters in highlight names | URL escape category names in URL generation (#360) | Fix error with limit_posts (#442) | Properly select dotfile during directory scan (#363, #431, #377) | Allow setting of Kramdown smart_quotes (#482) | Ensure front matter is at start of file (#562) | . ",
    "url": "/docs/history/#minor-enhancements-v0-12-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-12-0"
  },"570": {
    "doc": "History",
    "title": "0.11.2 / 2011-12-27",
    "content": ". | Bug Fixes | Fix gemspec | . ",
    "url": "/docs/history/#v0-11-2",
    "relUrl": "/docs/history/#v0-11-2"
  },"571": {
    "doc": "History",
    "title": "0.11.1 / 2011-12-27",
    "content": ". | Bug Fixes | Fix extra blank line in highlight blocks (#409) | Update dependencies | . ",
    "url": "/docs/history/#v0-11-1",
    "relUrl": "/docs/history/#v0-11-1"
  },"572": {
    "doc": "History",
    "title": "0.11.0 / 2011-07-10",
    "content": " ",
    "url": "/docs/history/#v0-11-0",
    "relUrl": "/docs/history/#v0-11-0"
  },"573": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Add command line importer functionality (#253) | Add Redcarpet Markdown support (#318) | Make markdown/textile extensions configurable (#312) | Add markdownify filter | . ",
    "url": "/docs/history/#major-enhancements-v0-11-0",
    "relUrl": "/docs/history/#major-enhancements-v0-11-0"
  },"574": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Switch to Albino gem | Bundler support | Use English library to avoid hoops (#292) | Add Posterous importer (#254) | Fixes for Wordpress importer (#274, #252, #271) | Better error message for invalid post date (#291) | Print formatted fatal exceptions to stdout on build failure | Add Tumblr importer (#323) | Add Enki importer (#320) | Bug Fixes | Secure additional path exploits | . ",
    "url": "/docs/history/#minor-enhancements-v0-11-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-11-0"
  },"575": {
    "doc": "History",
    "title": "0.10.0 / 2010-12-16",
    "content": ". | Bug Fixes | Add --no-server option. | . ",
    "url": "/docs/history/#v0-10-0",
    "relUrl": "/docs/history/#v0-10-0"
  },"576": {
    "doc": "History",
    "title": "0.9.0 / 2010-12-15",
    "content": " ",
    "url": "/docs/history/#v0-9-0",
    "relUrl": "/docs/history/#v0-9-0"
  },"577": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Use OptionParser’s [no-] functionality for better boolean parsing. | Add Drupal migrator (#245) | Complain about YAML and Liquid errors (#249) | Remove orphaned files during regeneration (#247) | Add Marley migrator (#28) | . ",
    "url": "/docs/history/#minor-enhancements-v0-9-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-9-0"
  },"578": {
    "doc": "History",
    "title": "0.8.0 / 2010-11-22",
    "content": " ",
    "url": "/docs/history/#v0-8-0",
    "relUrl": "/docs/history/#v0-8-0"
  },"579": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add wordpress.com importer (#207) | Add --limit-posts cli option (#212) | Add uri_escape filter (#234) | Add --base-url cli option (#235) | Improve MT migrator (#238) | Add kramdown support (#239) | Bug Fixes | Fixed filename basename generation (#208) | Set mode to UTF8 on Sequel connections (#237) | Prevent _includes dir from being a symlink | . ",
    "url": "/docs/history/#minor-enhancements-v0-8-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-8-0"
  },"580": {
    "doc": "History",
    "title": "0.7.0 / 2010-08-24",
    "content": " ",
    "url": "/docs/history/#v0-7-0",
    "relUrl": "/docs/history/#v0-7-0"
  },"581": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Add support for rdiscount extensions (#173) | Bug Fixes | Highlight should not be able to render local files | The site configuration may not always provide a ‘time’ setting (#184) | . ",
    "url": "/docs/history/#minor-enhancements-v0-7-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-7-0"
  },"582": {
    "doc": "History",
    "title": "0.6.2 / 2010-06-25",
    "content": ". | Bug Fixes | Fix Rakefile ‘release’ task (tag pushing was missing origin) | Ensure that RedCloth is loaded when textilize filter is used (#183) | Expand source, destination, and plugin paths (#180) | Fix page.url to include full relative path (#181) | . ",
    "url": "/docs/history/#v0-6-2",
    "relUrl": "/docs/history/#v0-6-2"
  },"583": {
    "doc": "History",
    "title": "0.6.1 / 2010-06-24",
    "content": ". | Bug Fixes | Fix Markdown Pygments prefix and suffix (#178) | . ",
    "url": "/docs/history/#v0-6-1",
    "relUrl": "/docs/history/#v0-6-1"
  },"584": {
    "doc": "History",
    "title": "0.6.0 / 2010-06-23",
    "content": " ",
    "url": "/docs/history/#v0-6-0",
    "relUrl": "/docs/history/#v0-6-0"
  },"585": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Proper plugin system (#19, #100) | Add safe mode so unsafe converters/generators can be added | Maruku is now the only processor dependency installed by default. Other processors will be lazy-loaded when necessary (and prompt the user to install them when necessary) (#57) | . ",
    "url": "/docs/history/#major-enhancements-v0-6-0",
    "relUrl": "/docs/history/#major-enhancements-v0-6-0"
  },"586": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Inclusion/exclusion of future dated posts (#59) | Generation for a specific time (#59) | Allocate site.time on render not per site_payload invocation (#59) | Pages now present in the site payload and can be used through the site.pages and site.html_pages variables | Generate phase added to site#process and pagination is now a generator | Switch to RakeGem for build/test process | Only regenerate static files when they have changed (#142) | Allow arbitrary options to Pygments (#31) | Allow URL to be set via command line option (#147) | Bug Fixes | Render highlighted code for non markdown/textile pages (#116) | Fix highlighting on Ruby 1.9 (#65) | Fix extension munging when pretty permalinks are enabled (#64) | Stop sorting categories (#33) | Preserve generated attributes over front matter (#119) | Fix source directory binding using Dir.pwd (#75) | . ",
    "url": "/docs/history/#minor-enhancements-v0-6-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-6-0"
  },"587": {
    "doc": "History",
    "title": "0.5.7 / 2010-01-12",
    "content": " ",
    "url": "/docs/history/#v0-5-7",
    "relUrl": "/docs/history/#v0-5-7"
  },"588": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Allow overriding of post date in the front matter (#62, #38) | Bug Fixes | Categories isn’t always an array (#73) | Empty tags causes error in read_posts (#84) | Fix pagination to adhere to read/render/write paradigm | Test Enhancement | Cucumber features no longer use site.posts.first where a better alternative is available | . ",
    "url": "/docs/history/#minor-enhancements-v0-5-7",
    "relUrl": "/docs/history/#minor-enhancements-v0-5-7"
  },"589": {
    "doc": "History",
    "title": "0.5.6 / 2010-01-08",
    "content": ". | Bug Fixes | Require redcloth &gt;= 4.2.1 in tests (#92) | Don’t break on triple dashes in front matter (#93) | . ",
    "url": "/docs/history/#v0-5-6",
    "relUrl": "/docs/history/#v0-5-6"
  },"590": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Allow .mkd as markdown extension | Use $stdout/err instead of constants (#99) | Properly wrap code blocks (#91) | Add javascript mime type for webrick (#98) | . ",
    "url": "/docs/history/#minor-enhancements-v0-5-6",
    "relUrl": "/docs/history/#minor-enhancements-v0-5-6"
  },"591": {
    "doc": "History",
    "title": "0.5.5 / 2010-01-08",
    "content": ". | Bug Fixes | Fix pagination % 0 bug (#78) | Ensure all posts are processed first (#71) | After this point I will no longer be giving credit in the history; that is what the commit log is for. | . ",
    "url": "/docs/history/#v0-5-5",
    "relUrl": "/docs/history/#v0-5-5"
  },"592": {
    "doc": "History",
    "title": "0.5.4 / 2009-08-23",
    "content": ". | Bug Fixes | Do not allow symlinks (security vulnerability) | . ",
    "url": "/docs/history/#v0-5-4",
    "relUrl": "/docs/history/#v0-5-4"
  },"593": {
    "doc": "History",
    "title": "0.5.3 / 2009-07-14",
    "content": ". | Bug Fixes | Solving the permalink bug where non-html files wouldn’t work (@jeffrydegrande) | . ",
    "url": "/docs/history/#v0-5-3",
    "relUrl": "/docs/history/#v0-5-3"
  },"594": {
    "doc": "History",
    "title": "0.5.2 / 2009-06-24",
    "content": ". | Enhancements | Added –paginate option to the executable along with a paginator object for the payload (@calavera) | Upgraded RedCloth to 4.2.1, which makes &lt;notextile&gt; tags work once again. | Configuration options set in config.yml are now available through the site payload (@vilcans) | Posts can now have an empty front matter or none at all (@ bahuvrihi) | Bug Fixes | Fixing Ruby 1.9 issue that requires #to_s on the err object (@Chrononaut) | Fixes for pagination and ordering posts on the same day (@ujh) | Made pages respect permalinks style and permalinks in yml front matter (@eugenebolshakov) | Index.html file should always have index.html permalink (@eugenebolshakov) | Added trailing slash to pretty permalink style so Apache is happy (@eugenebolshakov) | Bad markdown processor in config fails sooner and with better message (@ gcnovus) | Allow CRLFs in front matter (@juretta) | Added Date#xmlschema for Ruby versions &lt; 1.9 | . ",
    "url": "/docs/history/#v0-5-2",
    "relUrl": "/docs/history/#v0-5-2"
  },"595": {
    "doc": "History",
    "title": "0.5.1 / 2009-05-06",
    "content": " ",
    "url": "/docs/history/#v0-5-1",
    "relUrl": "/docs/history/#v0-5-1"
  },"596": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Next/previous posts in site payload (@pantulis, @tomo) | Permalink templating system | Moved most of the README out to the GitHub wiki | Exclude option in configuration so specified files won’t be brought over with generated site (@duritong) | Bug Fixes | Making sure config.yaml references are all gone, using only config.yml | Fixed syntax highlighting breaking for UTF-8 code (@henrik) | Worked around RDiscount bug that prevents Markdown from getting parsed after highlight (@henrik) | CGI escaped post titles (@Chrononaut) | . ",
    "url": "/docs/history/#major-enhancements-v0-5-1",
    "relUrl": "/docs/history/#major-enhancements-v0-5-1"
  },"597": {
    "doc": "History",
    "title": "0.5.0 / 2009-04-07",
    "content": " ",
    "url": "/docs/history/#v0-5-0",
    "relUrl": "/docs/history/#v0-5-0"
  },"598": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Ability to set post categories via YAML (@qrush) | Ability to set prevent a post from publishing via YAML (@qrush) | Add textilize filter (@willcodeforfoo) | Add ‘pretty’ permalink style for wordpress-like urls (@dysinger) | Made it possible to enter categories from YAML as an array (@Chrononaut) | Ignore Emacs autosave files (@Chrononaut) | Bug Fixes | Use block syntax of popen4 to ensure that subprocesses are properly disposed (@jqr) | Close open4 streams to prevent zombies (@rtomayko) | Only query required fields from the WP Database (@ariejan) | Prevent _posts from being copied to the destination directory (@bdimcheff) | Refactors | Factored the filtering code into a method (@Chrononaut) | Fix tests and convert to Shoulda (@qrush, @technicalpickles) | Add Cucumber acceptance test suite (@qrush, @technicalpickles) | . ",
    "url": "/docs/history/#minor-enhancements-v0-5-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-5-0"
  },"599": {
    "doc": "History",
    "title": "0.4.1",
    "content": " ",
    "url": "/docs/history/#041",
    "relUrl": "/docs/history/#041"
  },"600": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Changed date format on wordpress converter (zeropadding) (@dysinger) | Bug Fixes | Add Jekyll binary as executable to gemspec (@dysinger) | . ",
    "url": "/docs/history/#minor-enhancements-v--",
    "relUrl": "/docs/history/#minor-enhancements-v--"
  },"601": {
    "doc": "History",
    "title": "0.4.0 / 2009-02-03",
    "content": " ",
    "url": "/docs/history/#v0-4-0",
    "relUrl": "/docs/history/#v0-4-0"
  },"602": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Switch to Jeweler for packaging tasks | . ",
    "url": "/docs/history/#major-enhancements-v0-4-0",
    "relUrl": "/docs/history/#major-enhancements-v0-4-0"
  },"603": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Type importer (@codeslinger) | site.topics accessor (@baz) | Add array_to_sentence_string filter (@mchung) | Add a converter for textpattern (@PerfectlyNormal) | Add a working Mephisto / MySQL converter (@ivey) | Allowing .htaccess files to be copied over into the generated site (@briandoll) | Add option to not put file date in permalink URL (@mreid) | Add line number capabilities to highlight blocks (@jcon) | Bug Fixes | Fix permalink behavior (@cavalle) | Fixed an issue with pygments, markdown, and newlines (@zpinter) | Ampersands need to be escaped (@pufuwozu, @ap) | Test and fix the site.categories hash (@zzot) | Fix site payload available to files (@matrix9180) | . ",
    "url": "/docs/history/#minor-enhancements-v0-4-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-4-0"
  },"604": {
    "doc": "History",
    "title": "0.3.0 / 2008-12-24",
    "content": " ",
    "url": "/docs/history/#v0-3-0",
    "relUrl": "/docs/history/#v0-3-0"
  },"605": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Added --server option to start a simple WEBrick server on destination directory (@johnreilly and @mchung) | . ",
    "url": "/docs/history/#major-enhancements-v0-3-0",
    "relUrl": "/docs/history/#major-enhancements-v0-3-0"
  },"606": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Added post categories based on directories containing _posts (@mreid) | Added post topics based on directories underneath _posts | Added new date filter that shows the full month name (@mreid) | Merge Post’s front matter into its to_liquid payload (@remi) | Restrict includes to regular files underneath _includes | Bug Fixes | Change YAML delimiter matcher so as to not chew up 2nd level markdown headers (@mreid) | Fix bug that meant page data (such as the date) was not available in templates (@mreid) | Properly reject directories in _layouts | . ",
    "url": "/docs/history/#minor-enhancements-v0-3-0",
    "relUrl": "/docs/history/#minor-enhancements-v0-3-0"
  },"607": {
    "doc": "History",
    "title": "0.2.1 / 2008-12-15",
    "content": ". | Major Changes | Use Maruku (pure Ruby) for Markdown by default (@mreid) | Allow use of RDiscount with --rdiscount flag | . ",
    "url": "/docs/history/#v0-2-1",
    "relUrl": "/docs/history/#v0-2-1"
  },"608": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Don’t load directory_watcher unless it’s needed (@pjhyett) | . ",
    "url": "/docs/history/#minor-enhancements-v0-2-1",
    "relUrl": "/docs/history/#minor-enhancements-v0-2-1"
  },"609": {
    "doc": "History",
    "title": "0.2.0 / 2008-12-14",
    "content": ". | Major Changes | related_posts is now found in site.related_posts | . ",
    "url": "/docs/history/#v0-2-0",
    "relUrl": "/docs/history/#v0-2-0"
  },"610": {
    "doc": "History",
    "title": "0.1.6 / 2008-12-13",
    "content": ". | Major Features | Include files in _includes with {% include x.textile %} | . ",
    "url": "/docs/history/#v0-1-6",
    "relUrl": "/docs/history/#v0-1-6"
  },"611": {
    "doc": "History",
    "title": "0.1.5 / 2008-12-12",
    "content": " ",
    "url": "/docs/history/#v0-1-5",
    "relUrl": "/docs/history/#v0-1-5"
  },"612": {
    "doc": "History",
    "title": "Major Enhancements",
    "content": ". | Code highlighting with Pygments if --pygments is specified | Disable true LSI by default, enable with --lsi | . ",
    "url": "/docs/history/#major-enhancements-v0-1-5",
    "relUrl": "/docs/history/#major-enhancements-v0-1-5"
  },"613": {
    "doc": "History",
    "title": "Minor Enhancements",
    "content": ". | Output informative message if RDiscount is not available (@JackDanger) | Bug Fixes | Prevent Jekyll from picking up the output directory as a source (@JackDanger) | Skip related_posts when there is only one post (@JackDanger) | . ",
    "url": "/docs/history/#minor-enhancements-v0-1-5",
    "relUrl": "/docs/history/#minor-enhancements-v0-1-5"
  },"614": {
    "doc": "History",
    "title": "0.1.4 / 2008-12-08",
    "content": ". | Bug Fixes | DATA does not work properly with rubygems | . ",
    "url": "/docs/history/#v0-1-4",
    "relUrl": "/docs/history/#v0-1-4"
  },"615": {
    "doc": "History",
    "title": "0.1.3 / 2008-12-06",
    "content": ". | Major Features | Markdown support (@vanpelt) | Mephisto and CSV converters (@vanpelt) | Code hilighting (@vanpelt) | Autobuild | Bug Fixes | Accept both \\r\\n and \\n in YAML header (@vanpelt) | . ",
    "url": "/docs/history/#v0-1-3",
    "relUrl": "/docs/history/#v0-1-3"
  },"616": {
    "doc": "History",
    "title": "0.1.2 / 2008-11-22",
    "content": ". | Major Features | Add a real “related posts” implementation using Classifier | Command Line Changes | Allow cli to be called with 0, 1, or 2 args intuiting dir paths if they are omitted | . ",
    "url": "/docs/history/#v0-1-2",
    "relUrl": "/docs/history/#v0-1-2"
  },"617": {
    "doc": "History",
    "title": "0.1.1 / 2008-11-22",
    "content": ". | Minor Additions | Posts now support introspectional data e.g. {{ page.url }} | . ",
    "url": "/docs/history/#v0-1-1",
    "relUrl": "/docs/history/#v0-1-1"
  },"618": {
    "doc": "History",
    "title": "0.1.0 / 2008-11-05",
    "content": ". | First release | Converts posts written in Textile | Converts regular site pages | Simple copy of binary files | . ",
    "url": "/docs/history/#v0-1-0",
    "relUrl": "/docs/history/#v0-1-0"
  },"619": {
    "doc": "History",
    "title": "0.0.0 / 2008-10-19",
    "content": ". | Birthday! | . ",
    "url": "/docs/history/#v0-0-0",
    "relUrl": "/docs/history/#v0-0-0"
  },"620": {
    "doc": "History",
    "title": "History",
    "content": " ",
    "url": "/docs/history/",
    "relUrl": "/docs/history/"
  },"621": {
    "doc": "Includes",
    "title": "Including files relative to another file",
    "content": "You can choose to include file fragments relative to the current file by using the include_relative tag: . {% include_relative somedir/footer.html %} . You won’t need to place your included content within the _includes directory. Instead, the inclusion is specifically relative to the file where the tag is being used. For example, if _posts/2014-09-03-my-file.markdown uses the include_relative tag, the included file must be within the _posts directory or one of its subdirectories. Note that you cannot use the ../ syntax to specify an include location that refers to a higher-level directory. All the other capabilities of the include tag are available to the include_relative tag, such as variables. ",
    "url": "/docs/includes/#including-files-relative-to-another-file",
    "relUrl": "/docs/includes/#including-files-relative-to-another-file"
  },"622": {
    "doc": "Includes",
    "title": "Using variables names for the include file",
    "content": "The name of the file you want to embed can be specified as a variable instead of an actual file name. For example, suppose you defined a variable in your page’s front matter like this: . --- title: My page my_variable: footer_company_a.html --- . You could then reference that variable in your include: . {% if page.my_variable %} {% include {{ page.my_variable }} %} {% endif %} . In this example, the include would insert the file footer_company_a.html from the _includes/footer_company_a.html directory. ",
    "url": "/docs/includes/#using-variables-names-for-the-include-file",
    "relUrl": "/docs/includes/#using-variables-names-for-the-include-file"
  },"623": {
    "doc": "Includes",
    "title": "Passing parameters to includes",
    "content": "You can also pass parameters to an include. For example, suppose you have a file called note.html in your _includes folder that contains this formatting: . &lt;div markdown=\"span\" class=\"alert alert-info\" role=\"alert\"&gt; &lt;i class=\"fa fa-info-circle\"&gt;&lt;/i&gt; &lt;b&gt;Note:&lt;/b&gt; {{ include.content }} &lt;/div&gt; . The {{ include.content }} is a parameter that gets populated when you call the include and specify a value for that parameter, like this: . {% include note.html content=\"This is my sample note.\" %} . The value of content (which is This is my sample note) will be inserted into the {{ include.content }} parameter. Passing parameters to includes is especially helpful when you want to hide away complex formatting from your Markdown content. For example, suppose you have a special image syntax with complex formatting, and you don’t want your authors to remember the complex formatting. As a result, you decide to simplify the formatting by using an include with parameters. Here’s an example of the special image syntax you might want to populate with an include: . &lt;figure&gt; &lt;a href=\"https://jekyllrb.com\"&gt; &lt;img src=\"logo.png\" style=\"max-width: 200px;\" alt=\"Jekyll logo\" /&gt; &lt;/a&gt; &lt;figcaption&gt;This is the Jekyll logo&lt;/figcaption&gt; &lt;/figure&gt; . You could templatize this content in your include and make each value available as a parameter, like this: . &lt;figure&gt; &lt;a href=\"{{ include.url }}\"&gt; &lt;img src=\"{{ include.file }}\" style=\"max-width: {{ include.max-width }};\" alt=\"{{ include.alt }}\"/&gt; &lt;/a&gt; &lt;figcaption&gt;{{ include.caption }}&lt;/figcaption&gt; &lt;/figure&gt; . This include contains 5 parameters: . | url | max-width | file | alt | caption | . Here’s an example that passes all the parameters to this include (the include file is named image.html): . {% include image.html url=\"http://jekyllrb.com\" max-width=\"200px\" file=\"logo.png\" alt=\"Jekyll logo\" caption=\"This is the Jekyll logo.\" %} . The result is the original HTML code shown earlier. To safeguard situations where users don’t supply a value for the parameter, you can use Liquid’s default filter. Overall, you can create includes that act as templates for a variety of uses — inserting audio or video clips, alerts, special formatting, and more. Note that you should avoid using too many includes, as this will slow down the build time of your site. For example, don’t use includes every time you insert an image. (The above technique shows a use case for special images.) . ",
    "url": "/docs/includes/#passing-parameters-to-includes",
    "relUrl": "/docs/includes/#passing-parameters-to-includes"
  },"624": {
    "doc": "Includes",
    "title": "Passing parameter variables to includes",
    "content": "Suppose the parameter you want to pass to the include is a variable rather than a string. For example, you might be using {{ site.product_name }} to refer to every instance of your product rather than the actual hard-coded name. (In this case, your _config.yml file would have a key called product_name with a value of your product’s name.) . The string you pass to your include parameter can’t contain curly braces. For example, you can’t pass a parameter that contains this: \"The latest version of {{ site.product_name }} is now available.\" . If you want to include this variable in your parameter that you pass to an include, you need to store the entire parameter as a variable before passing it to the include. You can use capture tags to create the variable: . {% capture download_note %} The latest version of {{ site.product_name }} is now available. {% endcapture %} . Then pass this captured variable into the parameter for the include. Omit the quotation marks around the parameter content because it’s no longer a string (it’s a variable): . {% include note.html content=download_note %} . ",
    "url": "/docs/includes/#passing-parameter-variables-to-includes",
    "relUrl": "/docs/includes/#passing-parameter-variables-to-includes"
  },"625": {
    "doc": "Includes",
    "title": "Includes",
    "content": "The include tag allows you to include the content from another file stored in the _includes folder: . {% include footer.html %} . Jekyll will look for the referenced file (in this case, footer.html) in the _includes directory at the root of your source directory and insert its contents. ",
    "url": "/docs/includes/",
    "relUrl": "/docs/includes/"
  },"626": {
    "doc": "Quickstart",
    "title": "Prerequisites",
    "content": "Jekyll requires the following: . | Ruby version 2.5.0 or higher | RubyGems | GCC and Make | . See Requirements for guides and details. ",
    "url": "/docs/#prerequisites",
    "relUrl": "/docs/#prerequisites"
  },"627": {
    "doc": "Quickstart",
    "title": "Instructions",
    "content": ". | Install all prerequisites. | Install the jekyll and bundler gems. gem install jekyll bundler . | Create a new Jekyll site at ./myblog. jekyll new myblog . | Change into your new directory. cd myblog . | Build the site and make it available on a local server. bundle exec jekyll serve . | Browse to http://localhost:4000 | . If you are using Ruby version 3.0.0 or higher, step 5 may fail. You may fix it by adding webrick to your dependencies: bundle add webrick . Pass the --livereload option to serve to automatically refresh the page with each change you make to the source files: bundle exec jekyll serve --livereload . If you encounter any errors during this process, check that you have installed all the prerequisites in Requirements. If you still have issues, see Troubleshooting. Installation varies based on your operating system. See our guides for OS-specific instructions. ",
    "url": "/docs/#instructions",
    "relUrl": "/docs/#instructions"
  },"628": {
    "doc": "Quickstart",
    "title": "Quickstart",
    "content": "Jekyll is a static site generator. It takes text written in your favorite markup language and uses layouts to create a static website. You can tweak the site’s look and feel, URLs, the data displayed on the page, and more. ",
    "url": "/docs/",
    "relUrl": "/docs/"
  },"629": {
    "doc": "Installation",
    "title": "Requirements",
    "content": ". | Ruby version 2.5.0 or higher, including all development headers (check your Ruby version using ruby -v) | RubyGems (check your Gems version using gem -v) | GCC and Make (check versions using gcc -v,g++ -v, and make -v) | . ",
    "url": "/docs/installation/#requirements",
    "relUrl": "/docs/installation/#requirements"
  },"630": {
    "doc": "Installation",
    "title": "Guides",
    "content": "For detailed install instructions, follow the guide for your operating system. | macOS | Ubuntu | Other Linux | Windows | . ",
    "url": "/docs/installation/#guides",
    "relUrl": "/docs/installation/#guides"
  },"631": {
    "doc": "Installation",
    "title": "Installation",
    "content": "Jekyll is a Ruby Gem that can be installed on most systems. ",
    "url": "/docs/installation/",
    "relUrl": "/docs/installation/"
  },"632": {
    "doc": "Jekyll on macOS",
    "title": "Supported macOS versions",
    "content": ". | Monterey (macOS 12) | Big Sur (macOS 11) | Catalina (macOS 10.15) | . Older macOS versions might work, but we don’t officially support them. ",
    "url": "/docs/installation/macos/#supported-macos-versions",
    "relUrl": "/docs/installation/macos/#supported-macos-versions"
  },"633": {
    "doc": "Jekyll on macOS",
    "title": "Install Ruby",
    "content": "To install Jekyll on macOS, you need a proper Ruby development environment. While macOS comes preinstalled with Ruby, we don’t recommend using that version to install Jekyll. This external article goes over the various reasons why you shouldn’t use the system Ruby. Instead, you’ll need to install a separate and newer version of Ruby using a version manager such as asdf, chruby, rbenv, or rvm. Version managers allow you to easily install multiple versions of Ruby, and switch between them. We recommend chruby because it’s the simplest and least likely to cause issues. The instructions below are an excerpt from this detailed external guide to install Ruby on Mac. They work best if you’re setting up development tools for the first time on your Mac. If you’ve already tried to install Ruby or Jekyll on your Mac, or if you run into any issues, read that guide. ",
    "url": "/docs/installation/macos/#install-ruby",
    "relUrl": "/docs/installation/macos/#install-ruby"
  },"634": {
    "doc": "Jekyll on macOS",
    "title": "Step 1: Install Homebrew",
    "content": "Homebrew makes it easy to install development tools on a Mac. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" . ",
    "url": "/docs/installation/macos/#step-1-install-homebrew",
    "relUrl": "/docs/installation/macos/#step-1-install-homebrew"
  },"635": {
    "doc": "Jekyll on macOS",
    "title": "Step 2: Install chruby and the latest Ruby with ruby-install",
    "content": "Install chruby and ruby-install with Homebrew: . brew install chruby ruby-install . Install the latest stable version of Ruby: . ruby-install ruby . This will take a few minutes, and once it’s done, configure your shell to automatically use chruby: . echo \"source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh\" &gt;&gt; ~/.zshrc echo \"source $(brew --prefix)/opt/chruby/share/chruby/auto.sh\" &gt;&gt; ~/.zshrc echo \"chruby ruby-3.1.2\" &gt;&gt; ~/.zshrc # run 'chruby' to see actual version . If you’re using Bash, replace .zshrc with .bash_profile. If you’re not sure, read this external guide to find out which shell you’re using. Quit and relaunch Terminal, then check that everything is working: . ruby -v . It should show ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) or a newer version. Next, read that same external guide for important notes about setting and switching between Ruby versions with chruby. ",
    "url": "/docs/installation/macos/#step-2-install-chruby-and-the-latest-ruby-with-ruby-install",
    "relUrl": "/docs/installation/macos/#step-2-install-chruby-and-the-latest-ruby-with-ruby-install"
  },"636": {
    "doc": "Jekyll on macOS",
    "title": "Install Jekyll",
    "content": "After installing Ruby with chruby, install the latest Jekyll gem: . gem install jekyll . ",
    "url": "/docs/installation/macos/#install-jekyll",
    "relUrl": "/docs/installation/macos/#install-jekyll"
  },"637": {
    "doc": "Jekyll on macOS",
    "title": "Troubleshooting",
    "content": "See Troubleshooting or ask for help on our forum. ",
    "url": "/docs/installation/macos/#troubleshooting",
    "relUrl": "/docs/installation/macos/#troubleshooting"
  },"638": {
    "doc": "Jekyll on macOS",
    "title": "Jekyll on macOS",
    "content": " ",
    "url": "/docs/installation/macos/",
    "relUrl": "/docs/installation/macos/"
  },"639": {
    "doc": "Jekyll on Linux",
    "title": "Install prerequisites",
    "content": " ",
    "url": "/docs/installation/other-linux/#install-prerequisites",
    "relUrl": "/docs/installation/other-linux/#install-prerequisites"
  },"640": {
    "doc": "Jekyll on Linux",
    "title": "Fedora",
    "content": "sudo dnf install ruby ruby-devel openssl-devel redhat-rpm-config @development-tools . ",
    "url": "/docs/installation/other-linux/#fedora",
    "relUrl": "/docs/installation/other-linux/#fedora"
  },"641": {
    "doc": "Jekyll on Linux",
    "title": "RHEL8/CentOS8",
    "content": "sudo dnf install ruby ruby-devel sudo dnf group install \"Development Tools\" . ",
    "url": "/docs/installation/other-linux/#rhel8centos8",
    "relUrl": "/docs/installation/other-linux/#rhel8centos8"
  },"642": {
    "doc": "Jekyll on Linux",
    "title": "Debian",
    "content": "sudo apt-get install ruby-full build-essential . ",
    "url": "/docs/installation/other-linux/#debian",
    "relUrl": "/docs/installation/other-linux/#debian"
  },"643": {
    "doc": "Jekyll on Linux",
    "title": "Gentoo",
    "content": "sudo emerge -av jekyll . or . sudo emerge --ask --verbose jekyll . ",
    "url": "/docs/installation/other-linux/#gentoo",
    "relUrl": "/docs/installation/other-linux/#gentoo"
  },"644": {
    "doc": "Jekyll on Linux",
    "title": "ArchLinux",
    "content": "sudo pacman -S ruby base-devel . ",
    "url": "/docs/installation/other-linux/#archlinux",
    "relUrl": "/docs/installation/other-linux/#archlinux"
  },"645": {
    "doc": "Jekyll on Linux",
    "title": "OpenSUSE",
    "content": "sudo zypper install -t pattern devel_ruby devel_C_C++ sudo zypper install ruby-devel . ",
    "url": "/docs/installation/other-linux/#opensuse",
    "relUrl": "/docs/installation/other-linux/#opensuse"
  },"646": {
    "doc": "Jekyll on Linux",
    "title": "Clear Linux",
    "content": "sudo swupd bundle-add ruby-basic . ",
    "url": "/docs/installation/other-linux/#clear-linux",
    "relUrl": "/docs/installation/other-linux/#clear-linux"
  },"647": {
    "doc": "Jekyll on Linux",
    "title": "Install Jekyll",
    "content": "Follow the instructions for Ubuntu. ",
    "url": "/docs/installation/other-linux/#install-jekyll",
    "relUrl": "/docs/installation/other-linux/#install-jekyll"
  },"648": {
    "doc": "Jekyll on Linux",
    "title": "Jekyll on Linux",
    "content": "Installation on other Linux distributions works similarly to installing on Ubuntu. ",
    "url": "/docs/installation/other-linux/",
    "relUrl": "/docs/installation/other-linux/"
  },"649": {
    "doc": "Jekyll on Ubuntu",
    "title": "Install dependencies",
    "content": "Install Ruby and other prerequisites: . sudo apt-get install ruby-full build-essential zlib1g-dev . Avoid installing RubyGems packages (called gems) as the root user. Instead, set up a gem installation directory for your user account. The following commands will add environment variables to your ~/.bashrc file to configure the gem installation path: . echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrc echo 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrc echo 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrc source ~/.bashrc . Finally, install Jekyll and Bundler: . gem install jekyll bundler . That’s it! You’re ready to start using Jekyll. ",
    "url": "/docs/installation/ubuntu/#install-dependencies",
    "relUrl": "/docs/installation/ubuntu/#install-dependencies"
  },"650": {
    "doc": "Jekyll on Ubuntu",
    "title": "Jekyll on Ubuntu",
    "content": " ",
    "url": "/docs/installation/ubuntu/",
    "relUrl": "/docs/installation/ubuntu/"
  },"651": {
    "doc": "Jekyll on Windows",
    "title": "Installing Ruby and Jekyll",
    "content": " ",
    "url": "/docs/installation/windows/#installing-ruby-and-jekyll",
    "relUrl": "/docs/installation/windows/#installing-ruby-and-jekyll"
  },"652": {
    "doc": "Jekyll on Windows",
    "title": "Installation via RubyInstaller",
    "content": "The easiest way to install Ruby and Jekyll is by using the RubyInstaller for Windows. RubyInstaller is a self-contained Windows-based installer that includes the Ruby language, an execution environment, important documentation, and more. We only cover RubyInstaller-2.4 and newer here. Older versions need to install the Devkit manually. | Download and install a Ruby+Devkit version from RubyInstaller Downloads. Use default options for installation. | Run the ridk install step on the last stage of the installation wizard. This is needed for installing gems with native extensions. You can find additional information regarding this in the RubyInstaller Documentation. From the options choose MSYS2 and MINGW development tool chain. | Open a new command prompt window from the start menu, so that changes to the PATH environment variable becomes effective. Install Jekyll and Bundler using gem install jekyll bundler | Check if Jekyll has been installed properly: jekyll -v | . You may receive an error when checking if Jekyll has not been installed properly. Reboot your system and run jekyll -v again. If the error persists, please open a RubyInstaller issue. That’s it, you’re ready to use Jekyll! . ",
    "url": "/docs/installation/windows/#installation-via-rubyinstaller",
    "relUrl": "/docs/installation/windows/#installation-via-rubyinstaller"
  },"653": {
    "doc": "Jekyll on Windows",
    "title": "Installation via Bash on Windows 10",
    "content": "If you are using Windows 10 version 1607 or later, another option to run Jekyll is by installing the Windows Subsystem for Linux. You must have Windows Subsystem for Linux enabled. Make sure all your packages and repositories are up to date. Open a new Command Prompt or PowerShell window and type bash. Your terminal should now be a Bash instance. Next, update your repository lists and packages: . sudo apt-get update -y &amp;&amp; sudo apt-get upgrade -y . Next, install Ruby. To do this, let’s use a repository from BrightBox, which hosts optimized versions of Ruby for Ubuntu. sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.5 ruby2.5-dev build-essential dh-autoreconf . Next, update your Ruby gems: . gem update . Install Jekyll: . gem install jekyll bundler . No sudo here. Check your Jekyll version: . jekyll -v . That’s it! You’re ready to start using Jekyll. You can make sure time management is working properly by inspecting your _posts folder. You should see a markdown file with the current date in the filename. Non-superuser account issues . If the `jekyll new` command prints the error \"Your user account isn't allowed to install to the system RubyGems\", see the \"Running Jekyll as Non-Superuser\" instructions in Troubleshooting. Bash on Ubuntu on Windows is still under development, so you may run into issues. ",
    "url": "/docs/installation/windows/#installation-via-bash-on-windows-10",
    "relUrl": "/docs/installation/windows/#installation-via-bash-on-windows-10"
  },"654": {
    "doc": "Jekyll on Windows",
    "title": "Encoding",
    "content": "If you use UTF-8 encoding, Jekyll will break if a file starts with characters representing a BOM. Therefore, remove this sequence of bytes if it appears at the beginning of your file. Additionally, you might need to change the code page of the console window to UTF-8 in case you get a Liquid Exception: Incompatible character encoding error during the site generation process. Run the following: . chcp 65001 . ",
    "url": "/docs/installation/windows/#encoding",
    "relUrl": "/docs/installation/windows/#encoding"
  },"655": {
    "doc": "Jekyll on Windows",
    "title": "Time Zone Management",
    "content": "Since Windows doesn’t have a native source of zoneinfo data, the Ruby Interpreter doesn’t understand IANA Timezones. Using them had the TZ environment variable default to UTC/GMT 00:00. Though Windows users could alternatively define their blog’s timezone by setting the key to use the POSIX format of defining timezones, it wasn’t as user-friendly when it came to having the clock altered to changing DST-rules. Jekyll now uses a rubygem to internally configure Timezone based on established IANA Timezone Database. While ‘new’ blogs created with Jekyll v3.4 and greater, will have the following added to their Gemfile by default, existing sites will have to update their Gemfile (and installed gems) to enable development on Windows: . # Windows and JRuby does not include zoneinfo files, so bundle the tzinfo-data gem # and associated library. platforms :mingw, :x64_mingw, :mswin, :jruby do gem \"tzinfo\", \"&gt;= 1\", \"&lt; 3\" gem \"tzinfo-data\" end . ",
    "url": "/docs/installation/windows/#time-zone-management",
    "relUrl": "/docs/installation/windows/#time-zone-management"
  },"656": {
    "doc": "Jekyll on Windows",
    "title": "Auto Regeneration",
    "content": "Jekyll uses the listen gem to watch for changes when the --watch switch is specified during a build or serve. While listen has built-in support for UNIX systems, it may require an extra gem for compatibility with Windows. Add the following to the Gemfile for your site if you have issues with auto-regeneration on Windows alone: . gem 'wdm', '~&gt; 0.1.1', :install_if =&gt; Gem.win_platform? . You have to use a Ruby+Devkit version of the RubyInstaller and install the MSYS2 build tools to successfully install the wdm gem. ",
    "url": "/docs/installation/windows/#auto-regeneration",
    "relUrl": "/docs/installation/windows/#auto-regeneration"
  },"657": {
    "doc": "Jekyll on Windows",
    "title": "Jekyll on Windows",
    "content": "While Windows is not an officially-supported platform, it can be used to run Jekyll with the proper tweaks. ",
    "url": "/docs/installation/windows/",
    "relUrl": "/docs/installation/windows/"
  },"658": {
    "doc": "Layouts",
    "title": "Usage",
    "content": "The first step is to put the template source code in default.html. content is a special variable, the value is the rendered content of the post or page being wrapped. &lt;!doctype html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;{{ page.title }}&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"/css/style.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;nav&gt; &lt;a href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/blog/\"&gt;Blog&lt;/a&gt; &lt;/nav&gt; &lt;h1&gt;{{ page.title }}&lt;/h1&gt; &lt;section&gt; {{ content }} &lt;/section&gt; &lt;footer&gt; &amp;copy; to me &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; . You have full access to the front matter of the origin. In the example above, page.title comes from the page front matter. Next you need to specify what layout you’re using in your page’s front matter. You can also use front matter defaults to save you from having to set this on every page. --- title: My First Page layout: default --- This is the content of my page . The rendered output of this page is: . &lt;!doctype html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;My First Page&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"/css/style.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;nav&gt; &lt;a href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/blog/\"&gt;Blog&lt;/a&gt; &lt;/nav&gt; &lt;h1&gt;My First Page&lt;/h1&gt; &lt;section&gt; This is the content of my page &lt;/section&gt; &lt;footer&gt; &amp;copy; to me &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "/docs/layouts/#usage",
    "relUrl": "/docs/layouts/#usage"
  },"659": {
    "doc": "Layouts",
    "title": "Inheritance",
    "content": "Layout inheritance is useful when you want to add something to an existing layout for a portion of documents on your site. A common example of this is blog posts, you might want a post to display the date and author but otherwise be identical to your base layout. To achieve this you need to create another layout which specifies your original layout in front matter. For example this layout will live at _layouts/post.html: . --- layout: default --- &lt;p&gt;{{ page.date }} - Written by {{ page.author }}&lt;/p&gt; {{ content }} . Now posts can use this layout while the rest of the pages use the default. ",
    "url": "/docs/layouts/#inheritance",
    "relUrl": "/docs/layouts/#inheritance"
  },"660": {
    "doc": "Layouts",
    "title": "Variables",
    "content": "You can set front matter in layouts, the only difference is when you’re using in Liquid, you need to use the layout variable instead of page. For example: . --- city: San Francisco --- &lt;p&gt;{{ layout.city }}&lt;/p&gt; {{ content }} . ",
    "url": "/docs/layouts/#variables",
    "relUrl": "/docs/layouts/#variables"
  },"661": {
    "doc": "Layouts",
    "title": "Layouts",
    "content": "Layouts are templates that wrap around your content. They allow you to have the source code for your template in one place so you don’t have to repeat things like your navigation and footer on every page. Layouts live in the _layouts directory. The convention is to have a base template called default.html and have other layouts inherit from this as needed. Layouts Directory . Jekyll looks for the _layouts directory either at the root of your site's source or at the root of your theme. While you can configure the directory name in which your layouts can reside by setting the layouts_dir key in your config file, the directory itself should be located at the root of your site's source directory. ",
    "url": "/docs/layouts/",
    "relUrl": "/docs/layouts/"
  },"662": {
    "doc": "Liquid",
    "title": "Liquid",
    "content": "Jekyll uses the Liquid templating language to process templates. Generally in Liquid you output content using two curly braces e.g. {{ variable }} and perform logic statements by surrounding them in a curly brace percentage sign e.g. {% if statement %}. To learn more about Liquid, check out the official Liquid Documentation. Jekyll provides a number of useful Liquid additions to help you build your site: . | Filters | Tags | . ",
    "url": "/docs/liquid/",
    "relUrl": "/docs/liquid/"
  },"663": {
    "doc": "Liquid Filters",
    "title": "Options for the slugify filter",
    "content": "The slugify filter accepts an option, each specifying what to filter. The default is default. They are as follows (with what they filter): . | none: no characters | raw: spaces | default: spaces and non-alphanumeric characters | pretty: spaces and non-alphanumeric characters except for ._~!$&amp;'()+,;=@ | ascii: spaces, non-alphanumeric, and non-ASCII characters | latin: like default, except Latin characters are first transliterated (e.g. àèïòü to aeiou)3.7.0 . | . ",
    "url": "/docs/liquid/filters/#options-for-the-slugify-filter",
    "relUrl": "/docs/liquid/filters/#options-for-the-slugify-filter"
  },"664": {
    "doc": "Liquid Filters",
    "title": "Detecting nil values with where filter4.0",
    "content": "You can use the where filter to detect documents and pages with properties that are nil or \"\". For example, . // Using `nil` to select posts that either do not have `my_prop` // defined or `my_prop` has been set to `nil` explicitly. {% assign filtered_posts = site.posts | where: 'my_prop', nil %} . // Using Liquid's special literal `empty` or `blank` to select // posts that have `my_prop` set to an empty value. {% assign filtered_posts = site.posts | where: 'my_prop', empty %} . ",
    "url": "/docs/liquid/filters/#detecting-nil-values-with-where-filter40",
    "relUrl": "/docs/liquid/filters/#detecting-nil-values-with-where-filter40"
  },"665": {
    "doc": "Liquid Filters",
    "title": "Binary operators in where_exp filter4.0",
    "content": "You can use Liquid binary operators or and and in the expression passed to the where_exp filter to employ multiple conditionals in the operation. For example, to get a list of documents on English horror flicks, one could use the following snippet: . {{ site.movies | where_exp: \"item\", \"item.genre == 'horror' and item.language == 'English'\" }} . Or to get a list of comic-book based movies, one may use the following: . {{ site.movies | where_exp: \"item\", \"item.sub_genre == 'MCU' or item.sub_genre == 'DCEU'\" }} . ",
    "url": "/docs/liquid/filters/#binary-operators-in-where_exp-filter40",
    "relUrl": "/docs/liquid/filters/#binary-operators-in-where_exp-filter40"
  },"666": {
    "doc": "Liquid Filters",
    "title": "Standard Liquid Filters",
    "content": "For your convenience, here is the list of all Liquid filters with links to examples in the official Liquid documentation. | abs . | append . | at_least . | at_most . | capitalize . | ceil . | compact . | concat . | date . | default . | divided_by . | downcase . | escape . | escape_once . | first . | floor . | join . | last . | lstrip . | map . | minus . | modulo . | newline_to_br . | plus . | prepend . | remove . | remove_first . | replace . | replace_first . | reverse . | round . | rstrip . | size . | slice . | sort . | sort_natural . | split . | strip . | strip_html . | strip_newlines . | times . | truncate . | truncatewords . | uniq . | upcase . | url_decode . | url_encode . | . ",
    "url": "/docs/liquid/filters/#standard-liquid-filters",
    "relUrl": "/docs/liquid/filters/#standard-liquid-filters"
  },"667": {
    "doc": "Liquid Filters",
    "title": "Liquid Filters",
    "content": "All of the standard Liquid filters are supported (see below). To make common tasks easier, Jekyll even adds a few handy filters of its own, all of which you can find on this page. You can also create your own filters using plugins. | Description | Filter and Output | . | Relative URL . Prepend baseurl config value to the input to convert a URL path into a relative URL. This is recommended for a site that is hosted on a subpath of a domain. | {{ \"/assets/style.css\" | relative_url }} . /my-baseurl/assets/style.css . | . | Absolute URL . Prepend url and baseurl values to the input to convert a URL path to an absolute URL. | {{ \"/assets/style.css\" | absolute_url }} . http://example.com/my-baseurl/assets/style.css . | . | Date to XML Schema . Convert a Date into XML Schema (ISO 8601) format. | {{ site.time | date_to_xmlschema }} . 2008-11-07T13:07:54-08:00 . | . | Date to RFC-822 Format . Convert a Date into the RFC-822 format used for RSS feeds. | {{ site.time | date_to_rfc822 }} . Mon, 07 Nov 2008 13:07:54 -0800 . | . | Date to String . Convert a date to short format. | {{ site.time | date_to_string }} . 07 Nov 2008 . | . | Date to String in ordinal US style . Format a date to ordinal, US, short format. 3.8.0 . | {{ site.time | date_to_string: \"ordinal\", \"US\" }} . Nov 7th, 2008 . | . | Date to Long String . Format a date to long format. | {{ site.time | date_to_long_string }} . 07 November 2008 . | . | Date to Long String in ordinal UK style . Format a date to ordinal, UK, long format. 3.8.0 . | {{ site.time | date_to_long_string: \"ordinal\" }} . 7th November 2008 . | . | Where . Select all the objects in an array where the key has the given value. | {{ site.members | where:\"graduation_year\",\"2014\" }} . | . | Where Expression . Select all the objects in an array where the expression is true. 3.2.0 . | {{ site.members | where_exp:\"item\", \"item.graduation_year == 2014\" }} . {{ site.members | where_exp:\"item\", \"item.graduation_year &lt; 2014\" }} . {{ site.members | where_exp:\"item\", \"item.projects contains 'foo'\" }} . | . | Find . Return the first object in an array for which the queried attribute has the given value or return nil if no item in the array satisfies the given criteria. 4.1.0 . | {{ site.members | find: \"graduation_year\", \"2014\" }} . | . | Find Expression . Return the first object in an array for which the given expression evaluates to true or return nil if no item in the array satisfies the evaluated expression. 4.1.0 . | {{ site.members | find_exp:\"item\", \"item.graduation_year == 2014\" }} . {{ site.members | find_exp:\"item\", \"item.graduation_year &lt; 2014\" }} . {{ site.members | find_exp:\"item\", \"item.projects contains 'foo'\" }} . | . | Group By . Group an array's items by a given property. | {{ site.members | group_by:\"graduation_year\" }} . [{\"name\"=&gt;\"2013\", \"items\"=&gt;[...]}, {\"name\"=&gt;\"2014\", \"items\"=&gt;[...]}] . | . | Group By Expression . Group an array's items using a Liquid expression. 3.4.0 . | {{ site.members | group_by_exp: \"item\", \"item.graduation_year | truncate: 3, ''\" }} . [{\"name\"=&gt;\"201\", \"items\"=&gt;[...]}, {\"name\"=&gt;\"200\", \"items\"=&gt;[...]}] . | . | XML Escape . Escape some text for use in XML. | {{ page.content | xml_escape }} . | . | CGI Escape . CGI escape a string for use in a URL. Replaces any special characters with appropriate %XX replacements. CGI escape normally replaces a space with a plus + sign. | {{ \"foo, bar; baz?\" | cgi_escape }} . foo%2C+bar%3B+baz%3F . | . | URI Escape . Percent encodes any special characters in a URI. URI escape normally replaces a space with %20. Reserved characters will not be escaped. | {{ \"http://foo.com/?q=foo, \\bar?\" | uri_escape }} . http://foo.com/?q=foo,%20%5Cbar? . | . | Number of Words . Count the number of words in some text. From v4.1.0, this filter takes an optional argument to control the handling of Chinese-Japanese-Korean (CJK) characters in the input string. Passing 'cjk' as the argument will count every CJK character detected as one word irrespective of being separated by whitespace. Passing 'auto' (auto-detect) works similar to 'cjk' but is more performant if the filter is used on a variable string that may or may not contain CJK chars. | {{ \"Hello world!\" | number_of_words }} . 2 . {{ \"你好hello世界world\" | number_of_words }} . 1 . {{ \"你好hello世界world\" | number_of_words: \"cjk\" }} . 6 . {{ \"你好hello世界world\" | number_of_words: \"auto\" }} . 6 . | . | Array to Sentence . Convert an array into a sentence. Useful for listing tags. Optional argument for connector. | {{ page.tags | array_to_sentence_string }} . foo, bar, and baz . {{ page.tags | array_to_sentence_string: \"or\" }} . foo, bar, or baz . | . | Markdownify . Convert a Markdown-formatted string into HTML. | {{ page.excerpt | markdownify }} . | . | Smartify . Convert \"quotes\" into &ldquo;smart quotes.&rdquo; . | {{ page.title | smartify }} . | . | Converting Sass/SCSS . Convert a Sass- or SCSS-formatted string into CSS. | {{ some_sass | sassify }} . {{ some_scss | scssify }} . | . | Slugify . Convert a string into a lowercase URL \"slug\". See below for options. | {{ \"The _config.yml file\" | slugify }} . the-config-yml-file . {{ \"The _config.yml file\" | slugify: \"pretty\" }} . the-_config.yml-file . {{ \"The _cönfig.yml file\" | slugify: \"ascii\" }} . the-c-nfig-yml-file . {{ \"The cönfig.yml file\" | slugify: \"latin\" }} . the-config-yml-file . | . | Data To JSON . Convert Hash or Array to JSON. | {{ site.data.projects | jsonify }} . | . | Normalize Whitespace . Replace any occurrence of whitespace with a single space. | {{ \"a \\n b\" | normalize_whitespace }} . | . | Sort . Sort an array. Optional arguments for hashes 1.&nbsp;property name 2.&nbsp;nils order (first or last). | {{ page.tags | sort }} . {{ site.posts | sort: \"author\" }} . {{ site.pages | sort: \"title\", \"last\" }} . | . | Sample . Pick a random value from an array. Optionally, pick multiple values. | {{ site.pages | sample }} . {{ site.pages | sample: 2 }} . | . | To Integer . Convert a string or boolean to integer. | {{ some_var | to_integer }} . | . | Array Filters . Push, pop, shift, and unshift elements from an Array. These are NON-DESTRUCTIVE, i.e. they do not mutate the array, but rather make a copy and mutate that. | {{ page.tags | push: \"Spokane\" }} . [\"Seattle\", \"Tacoma\", \"Spokane\"] . {{ page.tags | pop }} . [\"Seattle\"] . {{ page.tags | shift }} . [\"Tacoma\"] . {{ page.tags | unshift: \"Olympia\" }} . [\"Olympia\", \"Seattle\", \"Tacoma\"] . | . | Inspect . Convert an object into its String representation for debugging. | {{ some_var | inspect }} . | . ",
    "url": "/docs/liquid/filters/",
    "relUrl": "/docs/liquid/filters/"
  },"668": {
    "doc": "Tags Filters",
    "title": "Includes",
    "content": "If you have page snippets that you use repeatedly across your site, an include is the perfect way to make this more maintainable. ",
    "url": "/docs/liquid/tags/#includes",
    "relUrl": "/docs/liquid/tags/#includes"
  },"669": {
    "doc": "Tags Filters",
    "title": "Code snippet highlighting",
    "content": "Jekyll has built in support for syntax highlighting of over 100 languages thanks to Rouge. Rouge is the default highlighter in Jekyll 3 and above. Using Pygments has been deprecated and is not supported in Jekyll 4; the configuration setting highlighter: pygments now automatically falls back to using Rouge which is written in Ruby and 100% compatible with stylesheets for Pygments. To render a code block with syntax highlighting, surround your code as follows: . {% highlight ruby %} def foo puts 'foo' end {% endhighlight %} . The argument to the highlight tag (ruby in the example above) is the language identifier. To find the appropriate identifier to use for the language you want to highlight, look for the “short name” on the Rouge wiki. Jekyll processes all Liquid filters in code blocks . If you are using a language that contains curly braces, you will likely need to place {&#37; raw &#37;} and {&#37; endraw &#37;} tags around your code. Since Jekyll 4.0 , you can add render_with_liquid: false in your front matter to disable Liquid entirely for a particular document. ",
    "url": "/docs/liquid/tags/#code-snippet-highlighting",
    "relUrl": "/docs/liquid/tags/#code-snippet-highlighting"
  },"670": {
    "doc": "Tags Filters",
    "title": "Line numbers",
    "content": "There is a second argument to highlight called linenos that is optional. Including the linenos argument will force the highlighted code to include line numbers. For instance, the following code block would include line numbers next to each line: . {% highlight ruby linenos %} def foo puts 'foo' end {% endhighlight %} . ",
    "url": "/docs/liquid/tags/#line-numbers",
    "relUrl": "/docs/liquid/tags/#line-numbers"
  },"671": {
    "doc": "Tags Filters",
    "title": "Stylesheets for syntax highlighting",
    "content": "In order for the highlighting to show up, you’ll need to include a highlighting stylesheet. For Pygments or Rouge you can use a stylesheet for Pygments, you can find an example gallery here or from its repository. Copy the CSS file (native.css for example) into your css directory and import the syntax highlighter styles into your main.css: . @import \"native.css\"; . ",
    "url": "/docs/liquid/tags/#stylesheets-for-syntax-highlighting",
    "relUrl": "/docs/liquid/tags/#stylesheets-for-syntax-highlighting"
  },"672": {
    "doc": "Tags Filters",
    "title": "Links",
    "content": "Since Jekyll 4.0 , you don’t need to prepend link and post_url tags with site.baseurl. ",
    "url": "/docs/liquid/tags/#links",
    "relUrl": "/docs/liquid/tags/#links"
  },"673": {
    "doc": "Tags Filters",
    "title": "Linking to pages",
    "content": "To link to a post, a page, collection item, or file, the link tag will generate the correct permalink URL for the path you specify. For example, if you use the link tag to link to mypage.html, even if you change your permalink style to include the file extension or omit it, the URL formed by the link tag will always be valid. You must include the file’s original extension when using the link tag. Here are some examples: . {% link _collection/name-of-document.md %} {% link _posts/2016-07-26-name-of-post.md %} {% link news/index.html %} {% link /assets/files/doc.pdf %} . You can also use the link tag to create a link in Markdown as follows: . [Link to a document]({% link _collection/name-of-document.md %}) [Link to a post]({% link _posts/2016-07-26-name-of-post.md %}) [Link to a page]({% link news/index.html %}) [Link to a file]({% link /assets/files/doc.pdf %}) . The path to the post, page, or collection is defined as the path relative to the root directory (where your config file is) to the file, not the path from your existing page to the other page. For example, suppose you’re creating a link in page_a.md (stored in pages/folder1/folder2) to page_b.md (stored in pages/folder1). Your path in the link would not be ../page_b.html. Instead, it would be /pages/folder1/page_b.md. If you’re unsure of the path, add {{ page.path }} to the page and it will display the path. One major benefit of using the link or post_url tag is link validation. If the link doesn’t exist, Jekyll won’t build your site. This is a good thing, as it will alert you to a broken link so you can fix it (rather than allowing you to build and deploy a site with broken links). Note you cannot add filters to link tags. For example, you cannot append a string using Liquid filters, such as {% link mypage.html | append: \"#section1\" %}. To link to sections on a page, you will need to use regular HTML or Markdown linking techniques. The name of the file you want to link can be specified as a variable instead of an actual file name. For example, suppose you defined a variable in your page’s front matter like this: . --- title: My page my_variable: footer_company_a.html --- . You could then reference that variable in your link: . {% link {{ page.my_variable }} %} . In this example, the link tag would render a link to the file footer_company_a.html. ",
    "url": "/docs/liquid/tags/#link",
    "relUrl": "/docs/liquid/tags/#link"
  },"674": {
    "doc": "Tags Filters",
    "title": "Linking to posts",
    "content": "If you want to include a link to a post on your site, the post_url tag will generate the correct permalink URL for the post you specify. {% post_url 2010-07-21-name-of-post %} . If you organize your posts in subdirectories, you need to include subdirectory path to the post: . {% post_url /subdir/2010-07-21-name-of-post %} . There is no need to include the file extension when using the post_url tag. You can also use this tag to create a link to a post in Markdown as follows: . [Name of Link]({% post_url 2010-07-21-name-of-post %}) . ",
    "url": "/docs/liquid/tags/#linking-to-posts",
    "relUrl": "/docs/liquid/tags/#linking-to-posts"
  },"675": {
    "doc": "Tags Filters",
    "title": "Tags Filters",
    "content": "All of the standard Liquid tags are supported. Jekyll has a few built in tags to help you build your site. You can also create your own tags using plugins. ",
    "url": "/docs/liquid/tags/",
    "relUrl": "/docs/liquid/tags/"
  },"676": {
    "doc": "Affinity Team Captains",
    "title": "Affinity teams &amp; their captains",
    "content": "The Jekyll project uses affinity teams to help break up the work of incoming issues and pull requests from community members. We receive a sizeable number of issues and pull requests each week; the use of affinity teams helps distribute this load across a number of specialized groups instead of pushing it all onto @jekyll/core. ",
    "url": "/docs/maintaining/affinity-team-captain/#affinity-teams--their-captains",
    "relUrl": "/docs/maintaining/affinity-team-captain/#affinity-teams--their-captains"
  },"677": {
    "doc": "Affinity Team Captains",
    "title": "Responsibilities of Team Captains",
    "content": "Each affinity team has a few captains who manage the issues and pull requests for that team. When an issue or PR is opened with a /cc for a given affinity team, @jekyllbot automatically assigns a random affinity team captain to the issue to triage it. They have access to add labels, reassign the issue, give LGTM’s, and so forth. While they do not merge PR’s today, they are still asked to review PR’s for parts of the codebase under their purview. ",
    "url": "/docs/maintaining/affinity-team-captain/#responsibilities-of-team-captains",
    "relUrl": "/docs/maintaining/affinity-team-captain/#responsibilities-of-team-captains"
  },"678": {
    "doc": "Affinity Team Captains",
    "title": "How do I become a team captain?",
    "content": "Just ask! Feel free to open an issue on jekyll/jekyll and add /cc @jekyll/core. We can add you. :smile: . Alternatively, you can email or otherwise reach out to @oe directly if you prefer the more private route. ",
    "url": "/docs/maintaining/affinity-team-captain/#how-do-i-become-a-team-captain",
    "relUrl": "/docs/maintaining/affinity-team-captain/#how-do-i-become-a-team-captain"
  },"679": {
    "doc": "Affinity Team Captains",
    "title": "Ugh, I’m tired and don’t have time to be a captain anymore. What now?",
    "content": "No sweat at all! Email @oe and ask to be removed. Alternatively, you should be able to go to your team’s page on GitHub.com (go to https://github.com/jekyll, click “Teams”, click the link to your team) and change your status to either “member” or leave the team. We realize that being a captain is no easy feat so we want to make it a great experience. As always, communicate as much as you can with us about what is working, and what isn’t. Thanks for dedicating some time to Jekyll! :sparkles: . ",
    "url": "/docs/maintaining/affinity-team-captain/#ugh-im-tired-and-dont-have-time-to-be-a-captain-anymore-what-now",
    "relUrl": "/docs/maintaining/affinity-team-captain/#ugh-im-tired-and-dont-have-time-to-be-a-captain-anymore-what-now"
  },"680": {
    "doc": "Affinity Team Captains",
    "title": "Affinity Team Captains",
    "content": "This guide is for affinity team captains. These special people are team maintainers of one of our affinity teams and help triage and evaluate the issues and contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. ",
    "url": "/docs/maintaining/affinity-team-captain/",
    "relUrl": "/docs/maintaining/affinity-team-captain/"
  },"681": {
    "doc": "Avoiding Burnout",
    "title": "1. Use Jekyll",
    "content": "Maintainers of Jekyll should be using it regularly. This is partly because you won’t be a good maintainer unless you can put yourself in the shoes of our users, but also because you may at some point decide to stop using Jekyll, and at that point you should also decide to stop being a maintainer and find other things to work on. ",
    "url": "/docs/maintaining/avoiding-burnout/#1-use-jekyll",
    "relUrl": "/docs/maintaining/avoiding-burnout/#1-use-jekyll"
  },"682": {
    "doc": "Avoiding Burnout",
    "title": "2. No Guilt About Leaving",
    "content": "All maintainers can stop working on Jekyll at any time without any guilt or explanation (like at a job). We may still ask for your help with questions after you leave but you are under no obligation to answer them. If you create a big mess and then leave you still have no obligations but we may think less of you (or, realistically, probably just revert the problematic work). Also, you should probably take a break from Jekyll at least a few times a year. This also means contributors should be consumers. If a maintainer finds they are not using a project in the real-world, they should reconsider their involvement with the project. ",
    "url": "/docs/maintaining/avoiding-burnout/#2-no-guilt-about-leaving",
    "relUrl": "/docs/maintaining/avoiding-burnout/#2-no-guilt-about-leaving"
  },"683": {
    "doc": "Avoiding Burnout",
    "title": "3. Prioritise Maintainers Over Users",
    "content": "It’s important to be user-focused but ultimately, as long as you follow #1 above, Jekyll’s minimum number of users will be the number of maintainers. However, if Jekyll has no maintainers it will quickly become useless to all users and the project will die. As a result, no user complaint, behaviour or need takes priority over the burnout of maintainers. If users do not like the direction of the project, the easiest way to influence it is to make significant, high-quality code contributions and become a maintainer. ",
    "url": "/docs/maintaining/avoiding-burnout/#3-prioritise-maintainers-over-users",
    "relUrl": "/docs/maintaining/avoiding-burnout/#3-prioritise-maintainers-over-users"
  },"684": {
    "doc": "Avoiding Burnout",
    "title": "4. Learn To Say No",
    "content": "Jekyll gets a lot of feature requests, non-reproducible bug reports, usage questions and PRs we won’t accept. These should be closed out as soon as we realise that they aren’t going to be resolved or merged. This is kinder than deciding this after a long period of review. Our issue tracker should reflect work to be done. Thanks to https://gist.github.com/ryanflorence/124070e7c4b3839d4573 which influenced this document. Thanks to Homebrew’s “Avoiding Burnout” document for providing a perfect base for this document. ",
    "url": "/docs/maintaining/avoiding-burnout/#4-learn-to-say-no",
    "relUrl": "/docs/maintaining/avoiding-burnout/#4-learn-to-say-no"
  },"685": {
    "doc": "Avoiding Burnout",
    "title": "Avoiding Burnout",
    "content": "This guide is for maintainers. These special people have write access to one or more of Jekyll’s repositories and help merge the contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. ",
    "url": "/docs/maintaining/avoiding-burnout/",
    "relUrl": "/docs/maintaining/avoiding-burnout/"
  },"686": {
    "doc": "Becoming a Maintainer",
    "title": "1. Use Jekyll",
    "content": "You want to maintain Jekyll? Use it often. Do weird things with it. Do normal things with it. Does it work? Does it have any weaknesses? Is there a gap in the product that you think should be filled? . ",
    "url": "/docs/maintaining/becoming-a-maintainer/#1-use-jekyll",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/#1-use-jekyll"
  },"687": {
    "doc": "Becoming a Maintainer",
    "title": "2. Help Triage Issues",
    "content": "Watch the repository you’re interested in. Join an Affinity Team and receive mentions regarding a particular interest area of the project. When you receive a notification for an issue that has not been triaged by a maintainer, dive in. Can you reproduce the issue? Can you determine the fix? More tips on Triaging an Issue in our maintainer guide. Every maintainer loves an issue that is resolved before they get to it. :smiley: . ",
    "url": "/docs/maintaining/becoming-a-maintainer/#2-help-triage-issues",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/#2-help-triage-issues"
  },"688": {
    "doc": "Becoming a Maintainer",
    "title": "3. Write Documentation",
    "content": "Good documentation means less confusion for our users and fewer issues to triage. Documentation is always in need of fixes and updates as we change the code. Read through the documentation during your normal usage of the product and submit changes as you feel they are necessary. ",
    "url": "/docs/maintaining/becoming-a-maintainer/#3-write-documentation",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/#3-write-documentation"
  },"689": {
    "doc": "Becoming a Maintainer",
    "title": "4. Write Code",
    "content": "As a maintainer, you will be reviewing pull requests which update code. You should feel comfortable with the Jekyll codebase enough to confidently review any pull request put forward. In order to become more comfortable, write some code of your own and send a pull request. A great place to start is with any issue labeled “bug” in the issue tracker. Write a test which replicates the problem and fails, then work on fixing the code such that the test passes. ",
    "url": "/docs/maintaining/becoming-a-maintainer/#4-write-code",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/#4-write-code"
  },"690": {
    "doc": "Becoming a Maintainer",
    "title": "5. Review Pull Requests",
    "content": "Start by reviewing one pull request a week. Leave detailed comments and follow our guide for reviewing pull requests. ",
    "url": "/docs/maintaining/becoming-a-maintainer/#5-review-pull-requests",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/#5-review-pull-requests"
  },"691": {
    "doc": "Becoming a Maintainer",
    "title": "6. Ask!",
    "content": "Open an issue describing your contributions to the project and why you wish to be a maintainer. Issues are nice because you can easily reference where you have demonstrated that you help triage issues, write code &amp; documentation, and review pull requests. You may also email any maintainer privately if you do not feel comfortable asking in the open. We would love to expand the team and look forward to many more community members becoming maintainers! . ",
    "url": "/docs/maintaining/becoming-a-maintainer/#6-ask",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/#6-ask"
  },"692": {
    "doc": "Becoming a Maintainer",
    "title": "Helping Out Elsewhere",
    "content": "In addition to maintainers of our core and plugin code, the Jekyll team is comprised of moderators for our forums. These helpful community members take a look at the topics posted to https://talk.jekyllrb.com and ensure they are properly categorized and are acceptable under our Code of Conduct. If you would like to be a moderator, email one of the maintainers with links to where you have answered questions and a request to be added as a moderator. More help is always welcome. ",
    "url": "/docs/maintaining/becoming-a-maintainer/#helping-out-elsewhere",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/#helping-out-elsewhere"
  },"693": {
    "doc": "Becoming a Maintainer",
    "title": "Becoming a Maintainer",
    "content": "This guide is for contributors. These special people have contributed to one or more of Jekyll’s repositories, but do not yet have write access to any. You may find what is written here interesting, but it’s definitely not for everyone. So you want to become a maintainer of a Jekyll project? We’d love to have you! Here are some things we like to see from community members before we promote them to maintainers. ",
    "url": "/docs/maintaining/becoming-a-maintainer/",
    "relUrl": "/docs/maintaining/becoming-a-maintainer/"
  },"694": {
    "doc": "Maintaining Jekyll",
    "title": "Maintaining Jekyll",
    "content": "This guide is for Jekyll contributors and maintainers. These special people contribute to one or more of Jekyll’s repositories or help merge the contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. Hello! This is where we document various processes for maintaining Jekyll. Being a maintainer for any Jekyll project is a big responsibility, so we put together some helpful documentation for various tasks you might do as a maintainer. | Affinity teams &amp; their captains | Triaging an issue | Reviewing a pull request | Merging a pull request | Avoiding burnout | Special Labels | Releasing a new version | Releasing a new version off *-stable branches | . Interested in becoming a maintainer? Here is some documentation for contributors: . | Becoming a maintainer | . ",
    "url": "/docs/maintaining/",
    "relUrl": "/docs/maintaining/"
  },"695": {
    "doc": "Merging a Pull Request",
    "title": "Code Review",
    "content": "All pull requests should be subject to code review. Code review is a foundational value of good engineering teams. Besides providing validation of correctness, it promotes a sense of community and gives other maintainers understanding of all parts of the code base. In short, code review is crucial to a healthy open source project. Read our guide for Reviewing a pull request before merging. Notably, the change must have tests if for code, and at least two maintainers must give it an OK. ",
    "url": "/docs/maintaining/merging-a-pull-request/#code-review",
    "relUrl": "/docs/maintaining/merging-a-pull-request/#code-review"
  },"696": {
    "doc": "Merging a Pull Request",
    "title": "Merging",
    "content": "We have a helpful little bot which we use to merge pull requests. We don’t use the GitHub.com interface for two reasons: . | You can’t modify anything on mobile (e.g. titles, labels) | We like to provide a consistent paper trail in the History.markdown file for each release | . To merge a pull request, leave a comment thanking the contributor, then add the special merge request: . Thank you very much for your contribution. Folks like you make this project and community strong. :heart: @jekyllbot: merge +dev . The merge request is made up of three things: . | @jekyllbot: – this is the prefix our bot looks for when processing commands | merge – the command | +dev – the category to which the changes belong. | . The categories match the headings in the History.markdown file, and they are: . | Major Enhancements (+major) – major updates or breaking changes to the code which necessitate a major version bump (v3 ~&gt; v4) | Minor Enhancements (+minor) – minor updates (with the labels feature or enhancement) which necessitate a minor version bump (v3.1 ~&gt; v3.2) | Bug Fixes (+bug) – corrections to code which do not change or add functionality, which necessitate a patch version bump (v3.1.0 ~&gt; v3.1.1) | Documentation (+doc) - changes to the documentation found in docs/_docs/ | Site Enhancements (+site) – changes to the source of https://jekyllrb.com found in docs/ | Development Fixes (+dev) – changes which do not affect user-facing functionality or documentation, such as test fixes or bumping internal dependencies | Forward Ports (+port) — bug fixes applied to a previous version of Jekyll pulled onto master, e.g. cherry-picked commits from 3-1-stable to master | . Once @jekyllbot has merged the pull request, you should see three things: . | A successful merge | Addition of labels for the necessary category if they aren’t already applied | A commit to the History.markdown file which adds a note about the change | . If you forget the category, that’s just fine. You can always go back and move the line to the proper category header later. The category is always necessary for jekyll/jekyll, but many plugins have too few changes to necessitate changelog categories. ",
    "url": "/docs/maintaining/merging-a-pull-request/#merging",
    "relUrl": "/docs/maintaining/merging-a-pull-request/#merging"
  },"697": {
    "doc": "Merging a Pull Request",
    "title": "Rejoice",
    "content": "You did it! Thanks for being a maintainer for one of our official Jekyll projects. Your work means the world to our thousands of users who rely on Jekyll daily. :heart: . ",
    "url": "/docs/maintaining/merging-a-pull-request/#rejoice",
    "relUrl": "/docs/maintaining/merging-a-pull-request/#rejoice"
  },"698": {
    "doc": "Merging a Pull Request",
    "title": "Merging a Pull Request",
    "content": "This guide is for maintainers. These special people have write access to one or more of Jekyll’s repositories and help merge the contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. ",
    "url": "/docs/maintaining/merging-a-pull-request/",
    "relUrl": "/docs/maintaining/merging-a-pull-request/"
  },"699": {
    "doc": "Releasing a new version",
    "title": "Bump the version",
    "content": "The only important place you need to manually bump the version is in lib/jekyll/version.rb. Adjust that, and everything else should work fine. The version will mostly be of the format \"major.minor.patch\". At times, we may decide to ship pre-releases which will be in the format \"major.minor.patch.suffix\". suffix is not standardized and may be anything like pre.alpha1, pre.rc2, or simply beta3, etc. To determine the correct version, consult the ## HEAD section of our history document, History.markdown, first. | If there’s a subsection titled Major Enhancements . | Increment the major component of the version string and reset both minor and patch components to 0. | Add suffix if applicable. | For example, \"3.9.1\" =&gt; \"4.0.0\" or, \"3.9.1 =&gt; \"4.0.0.alpha1\". | Skip to next step in the release process. | . | If there’s a subsection titled Minor Enhancements . | Increment just the minor component and reset the patch component to 0. | Add suffix if applicable. | For example, \"4.0.2\" =&gt; \"4.1.0\" or \"4.1.0\" =&gt; \"4.2.0.pre\". | Skip to next step in the release process. | . | For anything else, increment just the patch component or suffix component as applicable. For example, \"4.0.2\" =&gt; \"4.0.3\" or \"4.1.0.beta3\" =&gt; \"4.1.0.rc\". | . ",
    "url": "/docs/maintaining/releasing-a-new-version/#bump-the-version",
    "relUrl": "/docs/maintaining/releasing-a-new-version/#bump-the-version"
  },"700": {
    "doc": "Releasing a new version",
    "title": "Write a release post",
    "content": "In case this wasn’t done already, you can generate a new release post scaffold using the included rake command: . bundle exec rake site:releases:new[3.8.0] . where 3.8.0 should be replaced with the new version. Then, write the post. Be sure to thank all of the collaborators and maintainers who have contributed since the last release. You can generate a log of their names using the following command: . git shortlog -sn master...v3.7.2 . where v3.7.2 is the git tag for the previous release. In case the tag doesn’t exist in your repository, run: . git pull . Be sure to open a pull request for your release post once its finished. ",
    "url": "/docs/maintaining/releasing-a-new-version/#write-a-release-post",
    "relUrl": "/docs/maintaining/releasing-a-new-version/#write-a-release-post"
  },"701": {
    "doc": "Releasing a new version",
    "title": "Update the History document",
    "content": "Replace the first header of History.markdown with a version milestone. This looks like the following: . - ## HEAD + ## 3.7.1 / 2018-01-25 . Adjust the version number and the date. The ## HEAD heading will be regenerated the next time a pull request is merged. Rearrange the subsections (as a whole) based on decreasing priorities as illustrated below: . ## 4.2.0 / 2020-12-14 ### Major Enhancements ... ### Minor Enhancements ... ### Bug Fixes ... ### Security Fixes ... ### Optimization Fixes ... ### Development Fixes ... ### Site Enhancements ... Once you’ve done this, update the website by running the following command: . bundle exec rake site:generate . This updates the website’s changelog, and pushes the versions in various other places. It’s recommended that you go over the History.markdown file manually one more time, in case there are any spelling errors or such. Feel free to fix those manually, and after you’re done generating the website changelog, commit your changes. ",
    "url": "/docs/maintaining/releasing-a-new-version/#update-the-history-document",
    "relUrl": "/docs/maintaining/releasing-a-new-version/#update-the-history-document"
  },"702": {
    "doc": "Releasing a new version",
    "title": "Push the version",
    "content": "Before you do this step, make sure the following things are done: . | A release post has been prepared, and is ideally already live via a prior pull request. | All of the prior steps are done, especially the change to lib/jekyll/version.rb has been staged for commit. | Commit staged changes to the local master branch preferably with commit message \"Release :gem: v[CURRENT_VERSION]\". | . The only thing left to do now is to run this command: . git push upstream master . where upstream references git@github.com:jekyll/jekyll.git. This will trigger a GitHub Actions workflow that will automatically build the new gem, tag the release commit, push the tag to GitHub and then finally, push the new gem to RubyGems. Don’t worry about creating a GitHub release either, @jekyllbot will take care of that when the release workflow publishes the new tag. And then, if the workflow has completed successfully, you’re done! :tada: Feel free to celebrate! . If you have access to the @jekyllrb Twitter account, you should tweet the release post from there. If not, just ask another maintainer to do it or to give you access. ",
    "url": "/docs/maintaining/releasing-a-new-version/#push-the-version",
    "relUrl": "/docs/maintaining/releasing-a-new-version/#push-the-version"
  },"703": {
    "doc": "Releasing a new version",
    "title": "Build the docs",
    "content": "We package our documentation as a :gem: Gem for offline use. This is done with the jekyll-docs repository, and more detailed instructions are provided there. ",
    "url": "/docs/maintaining/releasing-a-new-version/#build-the-docs",
    "relUrl": "/docs/maintaining/releasing-a-new-version/#build-the-docs"
  },"704": {
    "doc": "Releasing a new version",
    "title": "For non-core gems",
    "content": "If you’re not a maintainer for jekyll/jekyll, the procedure is much simpler in a lot of cases. Generally, the procedure still looks like this: . | Bump the gem version manually, usually in lib/&lt;plugin_name&gt;/version.rb | Adjust the history file | Commit changes to default branch preferably with message \"Release :gem: v[CURRENT_VERSION]\" | Push to remote repository | Rejoice | . Be sure to ask your project’s maintainers if you’re unsure! . ",
    "url": "/docs/maintaining/releasing-a-new-version/#for-non-core-gems",
    "relUrl": "/docs/maintaining/releasing-a-new-version/#for-non-core-gems"
  },"705": {
    "doc": "Releasing a new version",
    "title": "Releasing a new version",
    "content": "This guide is for maintainers. These special people have write access to one or more of Jekyll’s repositories and help merge the contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. The most important thing to understand before making a release is that there’s no need to feel nervous. Most things are revertable, and even if you do publish an incomplete gem version, we can always skip that one. Don’t hesitate to contact the other maintainers if you feel unsure or don’t know what to do next. ",
    "url": "/docs/maintaining/releasing-a-new-version/",
    "relUrl": "/docs/maintaining/releasing-a-new-version/"
  },"706": {
    "doc": "Releasing off older stable branches",
    "title": "Requirements",
    "content": ". | The maintainer has to have write-access to both the concerned *-stable and master branches. | The maintainer needs to complete the task using their local CLI program instead of dispatching via GitHub Web UI. | The maintainer is abreast with the workflow to release off master. The procedure documented in the following section is an abridged adaptation of the workflow for master. | A release post has been drafted and is awaiting publish to master via an approved pull request. | Stable internet connection. | . ",
    "url": "/docs/maintaining/releasing-off-stable-branches/#requirements",
    "relUrl": "/docs/maintaining/releasing-off-stable-branches/#requirements"
  },"707": {
    "doc": "Releasing off older stable branches",
    "title": "Trigger release workflow",
    "content": ". | Ensure that you’ve checked out the concerned *-stable branch and is up-to-date with its counterpart at jekyll/jekyll at GitHub. | Bump the VERSION string in lib/jekyll/version.rb. | Update the History document as documented here. (IMPORTANT: Do not run rake site:generate on the stable branch though). | Copy the entire History section pertaining to current release and paste into a new tab / window of your text-editor. We will use this temporary snippet at a future stage. | Commit changes to the version-file and History document with commit message Release :gem: v[CURRENT_VERSION]. | Push commit to upstream remote jekyll/jekyll at GitHub. | . ",
    "url": "/docs/maintaining/releasing-off-stable-branches/#trigger-release-workflow",
    "relUrl": "/docs/maintaining/releasing-off-stable-branches/#trigger-release-workflow"
  },"708": {
    "doc": "Releasing off older stable branches",
    "title": "Publish release post",
    "content": ". | Ensure the Release Gem workflow has completed successfully. | Merge release-post pull request to master. | . ",
    "url": "/docs/maintaining/releasing-off-stable-branches/#publish-release-post",
    "relUrl": "/docs/maintaining/releasing-off-stable-branches/#publish-release-post"
  },"709": {
    "doc": "Releasing off older stable branches",
    "title": "Update default branch to reflect release off the stable branch",
    "content": ". | Locally, check out master and ensure it is up-to-date with its remote counterpart at jekyll/jekyll at GitHub. | Update History document using the snippet in the temporary tab / window created earlier. The various sections in the History document are primarily in reverse chronological order and secondarily scoped to the semver-major-version. For example, a release section for v3.9.2 will be listed above the section for v3.9.1 but under release sections for v4.x. The snippet stashed earlier has to be injected into the correct location manually. | Optionally, update VERSION string in lib/jekyll/version.rb. (If existing version is lesser than latest version). | Now run rake site:generate to update various meta files: . | docs/_config.yml | docs/_docs/history.md | docs/latest_version.txt | . | Commit changes to various meta files with commit message Release :gem: v[CURRENT_VERSION]. | Push commit to upstream remote. | . ",
    "url": "/docs/maintaining/releasing-off-stable-branches/#update-default-branch-to-reflect-release-off-the-stable-branch",
    "relUrl": "/docs/maintaining/releasing-off-stable-branches/#update-default-branch-to-reflect-release-off-the-stable-branch"
  },"710": {
    "doc": "Releasing off older stable branches",
    "title": "Publish GitHub Release",
    "content": "Unlike releases cut off the master branch, our JekyllBot does not automatically create and publish a GitHub Release for tags created from non-default branches. Therefore, the maintainer has to manually create and publish the concerned GitHub Release. | Choose the newly pushed tag. | Title is same as the name of the selected tag. | The release snippet stashed previously forms the body. | Delete the snippet’s title (## x.y.z / YYYY-MM-DD) from the release body. | Publish. | . Note: The GitHub Release may optionally be drafted prior to updating the default branch and then published immediately after pushing the update commit to the default branch to streamline the procedure. ",
    "url": "/docs/maintaining/releasing-off-stable-branches/#publish-github-release",
    "relUrl": "/docs/maintaining/releasing-off-stable-branches/#publish-github-release"
  },"711": {
    "doc": "Releasing off older stable branches",
    "title": "Releasing off older stable branches",
    "content": "Apart from having releases cut from the default master branch, Jekyll Core may occasionally cut releases containing security patches and critical bug-fixes for older versions under maintenance. Such releases are cut from specially named branches, following the pattern [x].[y]-stable where [x] denotes semver-major-version and [y], the semver-minor-version. For example, the branch 3.9-stable refers to commits released as part of jekyll-3.9.x series. Co-ordinating a release off a *-stable branch is complicated mainly because the default branch has to inevitably reflect the release as well. ",
    "url": "/docs/maintaining/releasing-off-stable-branches/",
    "relUrl": "/docs/maintaining/releasing-off-stable-branches/"
  },"712": {
    "doc": "Reviewing a Pull Request",
    "title": "Respond Kindly",
    "content": "Above all else, please review a pull request kindly. Our community can only be strong if we make it a welcoming and inclusive environment. To further promote this, the Jekyll community is governed by a Code of Conduct by which all community members must abide. Use emoji liberally :heart: :tada: :sparkles: :confetti_ball: and feel free to be emotive!! Contributions keep this project moving forward and we’re always happy to receive them, even if the pull request isn’t ultimately merged. Mike McQuaid’s post on the GitHub blog entitled “Kindly Closing Pull Requests” is a great place to start. It describes various scenarios in which it would be acceptable to close a pull request for reasons other than lack of technical integrity or accuracy. Part of being kind is responding to and resolving pull requests quickly. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/#respond-kindly",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/#respond-kindly"
  },"713": {
    "doc": "Reviewing a Pull Request",
    "title": "Respond Quickly",
    "content": "We should be able to review all pull requests within one week. The only time initial review should take longer is if all the maintainers mysteriously took vacation during the same week. Promptness encourages frequent, high-quality contributions from community members and other maintainers. If your response requires a response on the part of the author, please add the pending-feedback tag. @jekyllbot will automatically remove the tag once the author of the pull request responds. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/#respond-quickly",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/#respond-quickly"
  },"714": {
    "doc": "Reviewing a Pull Request",
    "title": "Resolve Quickly",
    "content": "Similarly, we should aim to resolve pull requests quickly. If a pull request introduces a feature which does not fit into the core purpose or goal of the project, close it promptly with a kind explanation of why it is not acceptable. Leave detailed comments wherever possible. Provide the contributor with context around why the change you are requesting is necessary, or why the question you are asking is important to resolve. The more context we can clearly communicate to the contributor, the better able the contributor is to provide high-quality patches. You may close a pull request if more than 30 days pass without a response from the author. In some cases, review will involve many weeks of back-and-forth. As long as communication continues, this is fine. Ideally, any PR would be capable of resolution within 30 days of it being opened. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/#resolve-quickly",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/#resolve-quickly"
  },"715": {
    "doc": "Reviewing a Pull Request",
    "title": "Look for Tests",
    "content": "If this is a code change, are there tests for the updated or added behaviour? Shipping a version with bugs is inevitable, but ensuring changes are tested helps keep bugs and regressions to a minimum. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/#look-for-tests",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/#look-for-tests"
  },"716": {
    "doc": "Reviewing a Pull Request",
    "title": "CI Must Pass",
    "content": "It is fine to ask a contributor to investigate failures on Travis and patch them up before you begin your review. It is helpful to leave a message for the contributor indicating that the tests have failed and that no review will occur before the tests pass. If they ask for help, take a look and assist if you can. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/#ci-must-pass",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/#ci-must-pass"
  },"717": {
    "doc": "Reviewing a Pull Request",
    "title": "Rule of Two",
    "content": "A pull request may be merged once two maintainers have reviewed the pull request and indicated that it is acceptable to them. There is no need to wait for a third unless one of the two reviewers wishes for another set of eyes. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/#rule-of-two",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/#rule-of-two"
  },"718": {
    "doc": "Reviewing a Pull Request",
    "title": "Think Security",
    "content": "We owe it to our users to ensure that using a theme from the community or building someone else’s site doesn’t come with built-in security vulnerabilities. Things like where files may be read from and written to are important to keep secure. Jekyll is also the basis for hosted services such as GitHub Pages, which cannot upgrade when security issues are introduced. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/#think-security",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/#think-security"
  },"719": {
    "doc": "Reviewing a Pull Request",
    "title": "Reviewing a Pull Request",
    "content": "This guide is for maintainers. These special people have write access to one or more of Jekyll’s repositories and help merge the contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. ",
    "url": "/docs/maintaining/reviewing-a-pull-request/",
    "relUrl": "/docs/maintaining/reviewing-a-pull-request/"
  },"720": {
    "doc": "Special Labels",
    "title": "pending-feedback",
    "content": "This label is used to indicate that we need more information from the issue/PR author in order to continue. It may be that you need more info before you can properly triage a bug report, or that you have some unanswered questions about a PR that need to be resolved before moving forward. You can safely ignore any issue with this label, as it is waiting for feedback. ",
    "url": "/docs/maintaining/special-labels/#pending-feedback",
    "relUrl": "/docs/maintaining/special-labels/#pending-feedback"
  },"721": {
    "doc": "Special Labels",
    "title": "needs-work &amp; pending-rebase",
    "content": "These labels are used to indicate that the Git state of a pull request must change. Both are removed once a push is registered (a “synchronize” event for the pull request) and the pull request becomes mergable. Add needs-work to a PR if, after your review, it requires code changes. Add pending-rebase to a PR if the code is fine but the branch is not automatically mergable with the target branch (e.g. master). ",
    "url": "/docs/maintaining/special-labels/#needs-work--pending-rebase",
    "relUrl": "/docs/maintaining/special-labels/#needs-work--pending-rebase"
  },"722": {
    "doc": "Special Labels",
    "title": "stale",
    "content": "This label is automatically added and removed by @jekyllbot based on activity on an issue or pull request. The rules for this label are laid out in Triaging an Issue: Staleness and automatic closure. ",
    "url": "/docs/maintaining/special-labels/#stale",
    "relUrl": "/docs/maintaining/special-labels/#stale"
  },"723": {
    "doc": "Special Labels",
    "title": "pinned",
    "content": "This label is for @jekyllbot to ignore the age of the issue, which means that the stale label won’t be automatically added, and the issue won’t be closed after a while. This needs to be set manually, and should be set with care. (The has-pull-request label does the same thing, but shouldn’t be used to only keep an issue open) . ",
    "url": "/docs/maintaining/special-labels/#pinned",
    "relUrl": "/docs/maintaining/special-labels/#pinned"
  },"724": {
    "doc": "Special Labels",
    "title": "Special Labels",
    "content": "This guide is for maintainers. These special people have write access to one or more of Jekyll’s repositories and help merge the contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. We use a series of “special labels” on GitHub.com to automate handling of some parts of the pull request and issue process. @jekyllbot may automatically apply or remove certain labels based on actions taken by users or maintainers. Below are the labels and how they work: . ",
    "url": "/docs/maintaining/special-labels/",
    "relUrl": "/docs/maintaining/special-labels/"
  },"725": {
    "doc": "Triaging an Issue",
    "title": "Feature?",
    "content": "If the issue describes a feature request, ask: . | Is this a setting? Settings are a crutch for doing “the right thing”. Settings usually point to a bad default or an edge case that could be solved easily with a plugin. Keep the :christmas_tree: of settings as small as possible so as not to reduce the usability of the product. We like the philosophy “decisions not options.” | Would at least 80% of users find it useful? If even a quarter of our users won’t use it, it’s very likely that the request doesn’t fit our product’s core goal. | Is there another way to accomplish the end goal of the request? Most feature requests are due to bad documentation for or understanding of a pre-existing feature. See if you can clarify the end goal of the request. What is the user trying to do? Could they accomplish that goal through another feature we already support? | Even if 80% of our users will use it, does it fit the core goal of our project? We are writing a tool for making static websites, not a swiss army knife for publishing more generally. | . Feel free to get others’ opinions and ask questions of the issue author, but depending upon the answers to the questions above, it may be out of scope for our project. If the request is within scope, prioritize it on the product roadmap with the other maintainers. Apply the appropriate tags and ensure the right people have weighed in to define the feature’s scope and implementation. If you want to be the best ever, submit a PR yourself which adds the feature. ",
    "url": "/docs/maintaining/triaging-an-issue/#feature",
    "relUrl": "/docs/maintaining/triaging-an-issue/#feature"
  },"726": {
    "doc": "Triaging an Issue",
    "title": "Bug?",
    "content": " ",
    "url": "/docs/maintaining/triaging-an-issue/#bug",
    "relUrl": "/docs/maintaining/triaging-an-issue/#bug"
  },"727": {
    "doc": "Triaging an Issue",
    "title": "Reproducibility",
    "content": "If the bug has clear reproduction steps, take a minute to try them. If it helps, write a test in our test suite for the scenario which replicates the problem. Can you reliably replicate the issue? . If you can’t replicate the issue, post your replication steps which didn’t work and ask for clarification from the issue author. ",
    "url": "/docs/maintaining/triaging-an-issue/#reproducibility",
    "relUrl": "/docs/maintaining/triaging-an-issue/#reproducibility"
  },"728": {
    "doc": "Triaging an Issue",
    "title": "Supported Platform",
    "content": "Is the author using a supported platform? We support the latest versions of macOS, Ubuntu, Debian, CentOS, Fedora, and Arch Linux. You may close the issue immediately if the author cannot reproduce the issue on a supported platform. For Windows-related problems, leave a comment letting the user know that Windows is not officially supported, but that they may absolutely continue using the issue to communicate with folks from @jekyll/windows to further investigate. Additionally, you can point them to Jekyll Talk (https://talk.jekyllrb.com) as a means of getting support from the community. If the user is experiencing issues with GitHub Pages or another hosted platform that we cannot reproduce, please direct them to the platform’s support channel and close the issue. ",
    "url": "/docs/maintaining/triaging-an-issue/#supported-platform",
    "relUrl": "/docs/maintaining/triaging-an-issue/#supported-platform"
  },"729": {
    "doc": "Triaging an Issue",
    "title": "What they wanted vs. what they got",
    "content": "An issue without a clear explanation of what the user got and what they were expecting to get is not an issue we can accurately respond to. If the user doesn’t provide this information, please ask for clarification and apply the pending-feedback label. This information helps us build test cases such that we do not break the behaviour again in the future. The pending-feedback label will be removed automatically once the issue author posts a reply. Is what they wanted to get something we want to happen? Sometimes a bug report is actually masquerading as a feature request. See the guidance above for handling feature requests. ",
    "url": "/docs/maintaining/triaging-an-issue/#what-they-wanted-vs-what-they-got",
    "relUrl": "/docs/maintaining/triaging-an-issue/#what-they-wanted-vs-what-they-got"
  },"730": {
    "doc": "Triaging an Issue",
    "title": "Staleness and automatic closure",
    "content": "@jekyllbot will automatically mark issues as stale if no activity occurs for at least one month. @jekyllbot leaves a comment asking for information about reproducibility in current versions. If no one responds after another month, the issue is automatically closed. This behavior can be suppressed by setting the pinned label. ",
    "url": "/docs/maintaining/triaging-an-issue/#staleness-and-automatic-closure",
    "relUrl": "/docs/maintaining/triaging-an-issue/#staleness-and-automatic-closure"
  },"731": {
    "doc": "Triaging an Issue",
    "title": "Triaging an Issue",
    "content": "This guide is for maintainers. These special people have write access to one or more of Jekyll’s repositories and help merge the contributions of others. You may find what is written here interesting, but it’s definitely not for everyone. Before evaluating an issue, it is important to identify if it is a feature request or a bug. For the Jekyll project the following definitions are used to identify a feature or a bug: . Feature - A feature is defined as a request that adds functionality to Jekyll outside of its current capabilities. Bug - A bug is defined as an issue that identifies an error that a user (or users) encounter when using current Jekyll functionalities. ",
    "url": "/docs/maintaining/triaging-an-issue/",
    "relUrl": "/docs/maintaining/triaging-an-issue/"
  },"732": {
    "doc": "Markdown 101",
    "title": "TO WRITE",
    "content": " ",
    "url": "/docs/markdown-101/#to-write",
    "relUrl": "/docs/markdown-101/#to-write"
  },"733": {
    "doc": "Markdown 101",
    "title": "Markdown 101",
    "content": " ",
    "url": "/docs/markdown-101/",
    "relUrl": "/docs/markdown-101/"
  },"734": {
    "doc": "Blog Migrations",
    "title": "Blog Migrations",
    "content": "If you’re switching to Jekyll from another blogging system, Jekyll’s importers can help you with the move. To learn more about importing your site to Jekyll, visit our jekyll-import docs site. ",
    "url": "/docs/migrations/",
    "relUrl": "/docs/migrations/"
  },"735": {
    "doc": "Pages",
    "title": "Changing the output URL",
    "content": "You might want to have a particular folder structure for your source files that changes for the built site. With permalinks you have full control of the output URL. ",
    "url": "/docs/pages/#changing-the-output-url",
    "relUrl": "/docs/pages/#changing-the-output-url"
  },"736": {
    "doc": "Pages",
    "title": "Excerpts for pages",
    "content": "From Jekyll 4.1.1 onwards, one can choose to generate excerpts for their pages by setting page_excerpts to true in their config file. ",
    "url": "/docs/pages/#excerpts-for-pages",
    "relUrl": "/docs/pages/#excerpts-for-pages"
  },"737": {
    "doc": "Pages",
    "title": "Pages",
    "content": "Pages are the most basic building block for content. They’re useful for standalone content (content which is not date based or is not a group of content such as staff members or recipes). The simplest way of adding a page is to add an HTML file in the root directory with a suitable filename. You can also write a page in Markdown using a .md extension which converts to HTML on build. For a site with a homepage, an about page, and a contact page, here’s what the root directory and associated URLs might look like: . ├── about.md # =&gt; http://example.com/about.html ├── index.html # =&gt; http://example.com/ └── contact.html # =&gt; http://example.com/contact.html . If you have a lot of pages, you can organize them into subfolders. The same subfolders that are used to group your pages in your project’s source will then exist in the _site folder when your site builds. However, when a page has a different permalink set in the front matter, the subfolder at _site changes accordingly. ├── about.md # =&gt; http://example.com/about.html ├── documentation # folder containing pages │ └── doc1.md # =&gt; http://example.com/documentation/doc1.html ├── design # folder containing pages │ └── draft.md # =&gt; http://example.com/design/draft.html . ",
    "url": "/docs/pages/",
    "relUrl": "/docs/pages/"
  },"738": {
    "doc": "Pagination",
    "title": "Enable pagination",
    "content": "To enable pagination for posts on your blog, add a line to the _config.yml file that specifies how many items should be displayed per page: . paginate: 5 . The number should be the maximum number of Posts you’d like to be displayed per-page in the generated site. You may also specify the destination of the pagination pages: . paginate_path: \"/blog/page:num/\" . This will read in blog/index.html, send it each pagination page in Liquid as paginator and write the output to blog/page:num/, where :num is the pagination page number, starting with 2. If a site has 12 posts and specifies paginate: 5, Jekyll will write blog/index.html with the first 5 posts, blog/page2/index.html with the next 5 posts and blog/page3/index.html with the last 2 posts into the destination directory. Don't set a permalink . Setting a permalink in the front matter of your blog page will cause pagination to break. Just omit the permalink. Pagination for categories, tags and collections . The more recent jekyll-paginate-v2 plugin supports more features. See the pagination examples in the repository. This plugin is not supported by GitHub Pages. ",
    "url": "/docs/pagination/#enable-pagination",
    "relUrl": "/docs/pagination/#enable-pagination"
  },"739": {
    "doc": "Pagination",
    "title": "Liquid Attributes Available",
    "content": "The pagination plugin exposes the paginator liquid object with the following attributes: . | Variable | Description | . | paginator.page . | The number of the current page . | . | paginator.per_page . | Number of posts per page . | . | paginator.posts . | Posts available for the current page . | . | paginator.total_posts . | Total number of posts . | . | paginator.total_pages . | Total number of pages . | . | paginator.previous_page . | The number of the previous page, or nil if no previous page exists . | . | paginator.previous_page_path . | The path to the previous page, or nil if no previous page exists . | . | paginator.next_page . | The number of the next page, or nil if no subsequent page exists . | . | paginator.next_page_path . | The path to the next page, or nil if no subsequent page exists . | . Pagination does not support tags or categories . Pagination pages through every post in the posts variable unless a post has hidden: true in its front matter. It does not currently allow paging over groups of posts linked by a common tag or category. It cannot include any collection of documents because it is restricted to posts. ",
    "url": "/docs/pagination/#liquid-attributes-available",
    "relUrl": "/docs/pagination/#liquid-attributes-available"
  },"740": {
    "doc": "Pagination",
    "title": "Render the paginated Posts",
    "content": "The next thing you need to do is to actually display your posts in a list using the paginator variable that will now be available to you. You’ll probably want to do this in one of the main pages of your site. Here’s one example of a simple way of rendering paginated Posts in a HTML file: . --- layout: default title: My Blog --- &lt;!-- This loops through the paginated posts --&gt; {% for post in paginator.posts %} &lt;h1&gt;&lt;a href=\"{{ post.url }}\"&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt; &lt;p class=\"author\"&gt; &lt;span class=\"date\"&gt;{{ post.date }}&lt;/span&gt; &lt;/p&gt; &lt;div class=\"content\"&gt; {{ post.content }} &lt;/div&gt; {% endfor %} &lt;!-- Pagination links --&gt; &lt;div class=\"pagination\"&gt; {% if paginator.previous_page %} &lt;a href=\"{{ paginator.previous_page_path }}\" class=\"previous\"&gt; Previous &lt;/a&gt; {% else %} &lt;span class=\"previous\"&gt;Previous&lt;/span&gt; {% endif %} &lt;span class=\"page_number \"&gt; Page: {{ paginator.page }} of {{ paginator.total_pages }} &lt;/span&gt; {% if paginator.next_page %} &lt;a href=\"{{ paginator.next_page_path }}\" class=\"next\"&gt;Next&lt;/a&gt; {% else %} &lt;span class=\"next \"&gt;Next&lt;/span&gt; {% endif %} &lt;/div&gt; . Beware the page one edge-case . Jekyll does not generate a ‘page1’ folder, so the above code will not work when a /page1 link is produced. See below for a way to handle this if it’s a problem for you. The following HTML snippet should handle page one, and render a list of each page with links to all but the current page. {% if paginator.total_pages &gt; 1 %} &lt;div class=\"pagination\"&gt; {% if paginator.previous_page %} &lt;a href=\"{{ paginator.previous_page_path | relative_url }}\"&gt;&amp;laquo; Prev&lt;/a&gt; {% else %} &lt;span&gt;&amp;laquo; Prev&lt;/span&gt; {% endif %} {% for page in (1..paginator.total_pages) %} {% if page == paginator.page %} &lt;em&gt;{{ page }}&lt;/em&gt; {% elsif page == 1 %} &lt;a href=\"{{ '/' | relative_url }}\"&gt;{{ page }}&lt;/a&gt; {% else %} &lt;a href=\"{{ site.paginate_path | relative_url | replace: ':num', page }}\"&gt;{{ page }}&lt;/a&gt; {% endif %} {% endfor %} {% if paginator.next_page %} &lt;a href=\"{{ paginator.next_page_path | relative_url }}\"&gt;Next &amp;raquo;&lt;/a&gt; {% else %} &lt;span&gt;Next &amp;raquo;&lt;/span&gt; {% endif %} &lt;/div&gt; {% endif %} . ",
    "url": "/docs/pagination/#render-the-paginated-posts",
    "relUrl": "/docs/pagination/#render-the-paginated-posts"
  },"741": {
    "doc": "Pagination",
    "title": "Pagination",
    "content": "With many websites — especially blogs — it’s very common to break the main listing of posts up into smaller lists and display them over multiple pages. Jekyll offers a pagination plugin, so you can automatically generate the appropriate files and folders you need for paginated listings. For Jekyll 3, include the jekyll-paginate plugin in your Gemfile and in your _config.yml under plugins. For Jekyll 2, this is standard. Pagination only works within HTML files . Pagination does not work from within Markdown files from your Jekyll site. Pagination works when called from within the HTML file, named index.html, which optionally may reside in and produce pagination from within a subdirectory, via the paginate_path configuration value. ",
    "url": "/docs/pagination/",
    "relUrl": "/docs/pagination/"
  },"742": {
    "doc": "Permalinks",
    "title": "Front Matter",
    "content": "The simplest way to set a permalink is using front matter. You set the permalink variable in front matter to the output path you’d like. For example, you might have a page on your site located at /my_pages/about-me.html and you want the output url to be /about/. In front matter of the page you would set: . --- permalink: /about/ --- . ",
    "url": "/docs/permalinks/#front-matter",
    "relUrl": "/docs/permalinks/#front-matter"
  },"743": {
    "doc": "Permalinks",
    "title": "Global",
    "content": "Setting a permalink in front matter for every page on your site is no fun. Luckily, Jekyll lets you set the permalink structure globally in your _config.yml. To set a global permalink, you use the permalink variable in _config.yml. You can use placeholders to your desired output. For example: . permalink: /:categories/:year/:month/:day/:title:output_ext . Note that pages and collections (excluding posts and drafts) don’t have time and categories (for pages, the above :title is equivalent to :basename), these aspects of the permalink style are ignored for the output. For example, a permalink style of /:categories/:year/:month/:day/:title:output_ext for the posts collection becomes /:title.html for pages and collections (excluding posts and drafts). ",
    "url": "/docs/permalinks/#global",
    "relUrl": "/docs/permalinks/#global"
  },"744": {
    "doc": "Permalinks",
    "title": "Placeholders",
    "content": "Here’s the full list of placeholders available: . | Variable | Description | . | year . | Year from the post’s filename with four digits. May be overridden via the document’s date front matter. | . | short_year . | Year from the post’s filename without the century. (00..99) May be overridden via the document’s date front matter. | . | month . | Month from the post’s filename. (01..12) May be overridden via the document’s date front matter. | . | i_month . | Month without leading zeros from the post’s filename. May be overridden via the document’s date front matter. | . | short_month . | Three-letter month abbreviation, e.g. “Jan”. | . | long_month . 4.0 | Full month name, e.g. “January”. | . | day . | Day of the month from the post’s filename. (01..31) May be overridden via the document’s date front matter. | . | i_day . | Day of the month without leading zeros from the post’s filename. May be overridden via the document’s date front matter. | . | y_day . | Ordinal day of the year from the post’s filename, with leading zeros. (001..366) . | . | w_year . 4.0 | Week year which may differ from the month year for up to three days at the start of January and end of December . | . | week . 4.0 | Week number of the current year, starting with the first week having a majority of its days in January. (01..53) . | . | w_day . 4.0 | Day of the week, starting with Monday. (1..7) . | . | short_day . 4.0 | Three-letter weekday abbreviation, e.g. “Sun”. | . | long_day . 4.0 | Weekday name, e.g. “Sunday”. | . | hour . | Hour of the day, 24-hour clock, zero-padded from the post’s date front matter. (00..23) . | . | minute . | Minute of the hour from the post’s date front matter. (00..59) . | . | second . | Second of the minute from the post’s date front matter. (00..59) . | . | title . | Title from the document’s filename. May be overridden via the document’s slug front matter. Preserves case from the source. | . | slug . | Slugified title from the document’s filename (any character except numbers and letters is replaced as hyphen). May be overridden via the document’s slug front matter. | . | categories . | The specified categories for this post. If a post has multiple categories, Jekyll will create a hierarchy (e.g. /category1/category2). Also Jekyll automatically parses out double slashes in the URLs, so if no categories are present, it will ignore this. | . | slugified_categories . 4.1 | The specified categories for this post but slugified. If a category is a composite of multiple words, Jekyll will downcase all alphabets and replace any non-alphanumeric character with a hyphen. (e.g. \"Work 2 Progress\" will be converted into \"work-2-progress\") . If a post has multiple categories, Jekyll will create a hierarchy (e.g. /work-2-progress/category2). Also Jekyll automatically parses out double slashes in the URLs, so if no categories are present, it will ignore this. | . | :output_ext . | Extension of the output file. (Included by default and usually unnecessary.) . | . ",
    "url": "/docs/permalinks/#placeholders",
    "relUrl": "/docs/permalinks/#placeholders"
  },"745": {
    "doc": "Permalinks",
    "title": "Built-in formats",
    "content": "For posts, Jekyll also provides the following built-in styles for convenience: . | Permalink Style | URL Template | . | date . | /:categories/:year/:month/:day/:title:output_ext . | . | pretty . | /:categories/:year/:month/:day/:title/ . | . | ordinal . | /:categories/:year/:y_day/:title:output_ext . | . | weekdate . 4.0 | /:categories/:year/W:week/:short_day/:title:output_ext (W will be prefixed to the value of :week) . | . | none . | /:categories/:title:output_ext . | . Rather than typing permalink: /:categories/:year/:month/:day/:title/, you can just type permalink: pretty. Specifying permalinks through the front matter . Built-in permalink styles are not recognized in front matter. As a result, permalink: pretty will not work. ",
    "url": "/docs/permalinks/#built-in-formats",
    "relUrl": "/docs/permalinks/#built-in-formats"
  },"746": {
    "doc": "Permalinks",
    "title": "Collections",
    "content": "For collections (including posts and drafts), you have the option to override the global permalink in the collection configuration in _config.yml: . collections: my_collection: output: true permalink: /:collection/:name . Collections have the following placeholders available: . | Variable | Description | . | :collection . | Label of the containing collection. | . | :path . | Path to the document relative to the collection's directory, including base filename of the document. | . | :name . | The document's base filename, with every sequence of spaces and non-alphanumeric characters replaced by a hyphen. | . | :title . | The :title template variable will take the slug front matter variable value if any is present in the document; if none is defined then :title will be equivalent to :name, aka the slug generated from the filename. Preserves case from the source. | . | :output_ext . | Extension of the output file. (Included by default and usually unnecessary.) . | . ",
    "url": "/docs/permalinks/#collections",
    "relUrl": "/docs/permalinks/#collections"
  },"747": {
    "doc": "Permalinks",
    "title": "Pages",
    "content": "For pages, you have to use front matter to override the global permalink, and if you set a permalink via front matter defaults in _config.yml, it will be ignored. Pages have the following placeholders available: . | Variable | Description | . | :path . | Path to the page relative to the site's source directory, excluding base filename of the page. | . | :basename . | The page's base filename . | . | :output_ext . | Extension of the output file. (Included by default and usually unnecessary.) . | . ",
    "url": "/docs/permalinks/#pages",
    "relUrl": "/docs/permalinks/#pages"
  },"748": {
    "doc": "Permalinks",
    "title": "Permalinks",
    "content": "Permalinks are the output path for your pages, posts, or collections. They allow you to structure the directories of your source code different from the directories in your output. ",
    "url": "/docs/permalinks/",
    "relUrl": "/docs/permalinks/"
  },"749": {
    "doc": "Plugins",
    "title": "Plugins",
    "content": "Jekyll has a plugin system with hooks that allow you to create custom generated content specific to your site. You can run custom code for your site without having to modify the Jekyll source itself. You can add specific plugins to the whitelist key in _config.yml to allow them to run in safe mode. | Installation - How to install plugins | Your first plugin - How to write plugins | Generators - Create additional content on your site | Converters - Change a markup language into another format | Commands - Extend the jekyll executable with subcommands | Tags - Create custom Liquid tags | Filters - Create custom Liquid filters | Hooks - Fine-grained control to extend the build process | . ",
    "url": "/docs/plugins/",
    "relUrl": "/docs/plugins/"
  },"750": {
    "doc": "Commands",
    "title": "Commands",
    "content": "As of version 2.5.0 , Jekyll can be extended with plugins which provide subcommands for the jekyll executable. This is possible by including the relevant plugins in a Gemfile group called :jekyll_plugins: . group :jekyll_plugins do gem \"my_fancy_jekyll_plugin\" end . Each Command must be a subclass of the Jekyll::Command class and must contain one class method: init_with_program. An example: . class MyNewCommand &lt; Jekyll::Command class &lt;&lt; self def init_with_program(prog) prog.command(:new) do |c| c.syntax \"new [options]\" c.description 'Create a new Jekyll site.' c.option 'dest', '-d DEST', 'Where the site should go.' c.action do |args, options| Jekyll::Site.new_site_at(options['dest']) end end end end end . Commands should implement this single class method: . | Method | Description | . | init_with_program . | This method accepts one parameter, the Mercenary::Program instance, which is the Jekyll program itself. Upon the program, commands may be created using the above syntax. For more details, visit the Mercenary repository on GitHub.com. | . ",
    "url": "/docs/plugins/commands/",
    "relUrl": "/docs/plugins/commands/"
  },"751": {
    "doc": "Converters",
    "title": "Converters",
    "content": "If you have a new markup language you’d like to use with your site, you can include it by implementing your own converter. Both the Markdown and Textile markup languages are implemented using this method. Remember your Front Matter . Jekyll will only convert files that have a YAML header at the top, even for converters you add using a plugin. Below is a converter that will take all posts ending in .upcase and process them using the UpcaseConverter: . module Jekyll class UpcaseConverter &lt; Converter safe true priority :low def matches(ext) ext =~ /^\\.upcase$/i end def output_ext(ext) \".html\" end def convert(content) content.upcase end end end . Converters should implement at a minimum 3 methods: . | Method | Description | . | matches . | Does the given extension match this converter’s list of acceptable extensions? Takes one argument: the file’s extension (including the dot). Must return true if it matches, false otherwise. | . | output_ext . | The extension to be given to the output file (including the dot). Usually this will be \".html\". | . | convert . | Logic to do the content conversion. Takes one argument: the raw content of the file (without front matter). Must return a String. | . In our example, UpcaseConverter#matches checks if our filename extension is .upcase, and will render using the converter if it is. It will call UpcaseConverter#convert to process the content. In our simple converter we’re simply uppercasing the entire content string. Finally, when it saves the page, it will do so with a .html extension. ",
    "url": "/docs/plugins/converters/",
    "relUrl": "/docs/plugins/converters/"
  },"752": {
    "doc": "Filters",
    "title": "Filters",
    "content": "Filters are modules that export their methods to liquid. All methods will have to take at least one parameter which represents the input of the filter. The return value will be the output of the filter. module Jekyll module AssetFilter def asset_url(input) \"http://www.example.com/#{input}?#{Time.now.to_i}\" end end end Liquid::Template.register_filter(Jekyll::AssetFilter) . For more details on creating custom Liquid Filters, head to the Liquid docs. ProTip™: Access the site object using Liquid . Jekyll lets you access the site object through the @context.registers feature of Liquid at @context.registers[:site]. For example, you can access the global configuration file _config.yml using @context.registers[:site].config. ",
    "url": "/docs/plugins/filters/",
    "relUrl": "/docs/plugins/filters/"
  },"753": {
    "doc": "Generators",
    "title": "Technical Aspects",
    "content": "Generators need to implement only one method: . | Method | Description | . | generate . | Generates content as a side-effect. | . If your generator is contained within a single file, it can be named whatever you want but it should have an .rb extension. If your generator is split across multiple files, it should be packaged as a Rubygem to be published at https://rubygems.org/. In this case, the name of the gem depends on the availability of the name at that site because no two gems can have the same name. By default, Jekyll looks for generators in the _plugins directory. However, you can change the default directory by assigning the desired name to the key plugins_dir in the config file. ",
    "url": "/docs/plugins/generators/#technical-aspects",
    "relUrl": "/docs/plugins/generators/#technical-aspects"
  },"754": {
    "doc": "Generators",
    "title": "Generators",
    "content": "You can create a generator when you need Jekyll to create additional content based on your own rules. A generator is a subclass of Jekyll::Generator that defines a generate method, which receives an instance of Jekyll::Site. The return value of generate is ignored. Generators run after Jekyll has made an inventory of the existing content, and before the site is generated. Pages with front matter are stored as instances of Jekyll::Page and are available via site.pages. Static files become instances of Jekyll::StaticFile and are available via site.static_files. See the Variables documentation page and Jekyll::Site for details. In the following example, the generator will inject values computed at build time for template variables. The template named reading.html has two undefined variables ongoing and done that will be defined or assigned a value when the generator runs: . module Reading class Generator &lt; Jekyll::Generator def generate(site) book_data = site.data['books'] ongoing = book_data.select { |book| book['status'] == 'ongoing' } done = book_data.select { |book| book['status'] == 'finished' } # get template reading = site.pages.find { |page| page.name == 'reading.html'} # inject data into template reading.data['ongoing'] = ongoing reading.data['done'] = done end end end . The following example is a more complex generator that generates new pages. In this example, the aim of the generator is to create a page for each category registered in the site. The pages are created at runtime, so their contents, front matter and other attributes need to be designed by the plugin itself. | The pages are intended to render a list of all documents under a given category. So the basename of the rendered file would be better as index.html. | Having the ability to configure the pages via front matter defaults would be awesome! So assigning a particular type to these pages would be beneficial. | . module SamplePlugin class CategoryPageGenerator &lt; Jekyll::Generator safe true def generate(site) site.categories.each do |category, posts| site.pages &lt;&lt; CategoryPage.new(site, category, posts) end end end # Subclass of `Jekyll::Page` with custom method definitions. class CategoryPage &lt; Jekyll::Page def initialize(site, category, posts) @site = site # the current site instance. @base = site.source # path to the source directory. @dir = category # the directory the page will reside in. # All pages have the same filename, so define attributes straight away. @basename = 'index' # filename without the extension. @ext = '.html' # the extension. @name = 'index.html' # basically @basename + @ext. # Initialize data hash with a key pointing to all posts under current category. # This allows accessing the list in a template via `page.linked_docs`. @data = { 'linked_docs' =&gt; posts } # Look up front matter defaults scoped to type `categories`, if given key # doesn't exist in the `data` hash. data.default_proc = proc do |_, key| site.frontmatter_defaults.find(relative_path, :categories, key) end end # Placeholders that are used in constructing page URL. def url_placeholders { :category =&gt; @dir, :basename =&gt; basename, :output_ext =&gt; output_ext, } end end end . The generated pages can now be set up to use a particular layout or output at a particular path in the destination directory all via the config file using front matter defaults. For example: . # _config.yml defaults: - scope: type: categories # select all category pages values: layout: category_page permalink: categories/:category/ . ",
    "url": "/docs/plugins/generators/",
    "relUrl": "/docs/plugins/generators/"
  },"755": {
    "doc": "Hooks",
    "title": "Built-in Hook Owners and Events",
    "content": "The complete list of available hooks: . | Owner | Event | Triggered at | . | :site . Encompasses the entire site . | :after_init . | Just after the site initializes. Good for modifying the configuration of the site. Triggered once per build / serve session . | . | :after_reset . | Just after the site resets during regeneration . | . | :post_read . | After all source files have been read and loaded from disk . | . | :pre_render . | Just before rendering the whole site . | . | :post_render . | After rendering the whole site, but before writing any files . | . | :post_write . | After writing all of the rendered files to disk . | . | :pages . Allows fine-grained control over all pages in the site . | :post_init . | Whenever a page is initialized . | . | :pre_render . | Just before rendering a page . | . | :post_convert . | After converting the page content, but before rendering the page layout . | . | :post_render . | After rendering a page, but before writing it to disk . | . | :post_write . | After writing a page to disk . | . | :documents . Allows fine-grained control over all documents in the site including posts and documents in user-defined collections . | :post_init . | Whenever any document is initialized . | . | :pre_render . | Just before rendering a document . | . | :post_convert . | After converting the document content, but before rendering the document layout . | . | :post_render . | After rendering a document, but before writing it to disk . | . | :post_write . | After writing a document to disk . | . | :posts . Allows fine-grained control over all posts in the site without affecting documents in user-defined collections . | :post_init . | Whenever a post is initialized . | . | :pre_render . | Just before rendering a post . | . | :post_convert . | After converting the post content, but before rendering the postlayout . | . | :post_render . | After rendering a post, but before writing it to disk . | . | :post_write . | After writing a post to disk . | . | :clean . Fine-grained control on the list of obsolete files determined to be deleted during the site's cleanup phase. | :on_obsolete . | During the cleanup of a site's destination before it is built . | . ",
    "url": "/docs/plugins/hooks/#built-in-hook-owners-and-events",
    "relUrl": "/docs/plugins/hooks/#built-in-hook-owners-and-events"
  },"756": {
    "doc": "Hooks",
    "title": "Hooks for custom Jekyll objects",
    "content": "You can also register and trigger hooks for Jekyll objects introduced by your plugin. All it takes is placing trigger calls under a suitable owner name, at positions desired within your custom class and registering the owner by your plugin. To illustrate, consider the following plugin that implements custom functionality for every custom Excerpt object initialized: . module Foobar class HookedExcerpt &lt; Jekyll::Excerpt def initialize(doc) super trigger_hooks(:post_init) end def output @output ||= trigger_hooks(:post_render, renderer.run) end def renderer @renderer ||= Jekyll::Renderer.new( doc.site, self, site.site_payload ) end def trigger_hooks(hook_name, *args) Jekyll::Hooks.trigger :excerpts, hook_name, self, *args end end end Jekyll::Hooks.register :excerpts, :post_init do |excerpt| Jekyll.logger.debug \"Initialized:\", \"Hooked Excerpt for #{excerpt.doc.inspect}\" end Jekyll::Hooks.register :excerpts, :post_render do |excerpt, output| return output unless excerpt.doc.type == :posts Foobar.transform(output) end . ",
    "url": "/docs/plugins/hooks/#hooks-for-custom-jekyll-objects",
    "relUrl": "/docs/plugins/hooks/#hooks-for-custom-jekyll-objects"
  },"757": {
    "doc": "Hooks",
    "title": "Hooks",
    "content": "Using hooks, your plugin can exercise fine-grained control over various aspects of the build process. If your plugin defines any hooks, Jekyll will call them at pre-defined points. Hooks are registered to an owner and an event name. To register one, you call Jekyll::Hooks.register, and pass the hook owner, event name, and code to call whenever the hook is triggered. For example, if you want to execute some custom functionality every time Jekyll renders a page, you could register a hook like this: . Jekyll::Hooks.register :pages, :post_render do |page| # code to call after Jekyll renders a page end . Note: The :post_convert events mentioned hereafter is a feature introduced in v4.2.0. Out of the box, Jekyll has pre-defined hook points for owners :site, :pages, :documents and :clean. Additionally, the hook points defined for :documents can be utilized for individual collections only by invoking the collection type instead. i.e. :posts for documents in collection _posts and :movies for documents in collection _movies. In all cases, Jekyll calls your hooks with the owner object as the first callback parameter. Every registered hook owner supports the following events — :post_init, :pre_render, :post_convert, :post_render, :post_write — however, the :site owner is set up to respond to special event names. Refer to the subsequent section for details. All :pre_render hooks and the :site, :post_render hook will also provide a payload hash as a second parameter. While in the case of :pre_render events, the payload gives you full control over the variables that are available during rendering, with the :site, :post_render event, the payload contains final values after rendering all the site (useful for sitemaps, feeds, etc). ",
    "url": "/docs/plugins/hooks/",
    "relUrl": "/docs/plugins/hooks/"
  },"758": {
    "doc": "Plugins",
    "title": "Using a Gemfile",
    "content": "The maintenance of various gem dependencies may be greatly simplified by using a Gemfile (usually at the root of the site’s source) in conjunction with a Rubygem named bundler. The Gemfile however should list all the primary dependencies of your site, including Jekyll itself, not just gem-based plugins of the site because Bundler narrows the scope of installed gems to just runtime dependencies resolved by evaluating the Gemfile. For example: . source \"https://rubygems.org\" # Use the latest version. gem \"jekyll\" # The theme of current site, locked to a certain version. gem \"minima\", \"2.4.1\" # Plugins of this site loaded during a build with proper # site configuration. gem \"jekyll-gist\" gem \"jekyll-coffeescript\" gem \"jekyll-seo-tag\", \"~&gt; 1.5\" gem \"some-other-jekyll-plugin\" # A dependency of a custom-plugin inside `_plugins` directory. gem \"nokogiri\", \"~&gt; 1.11\" . The gems listed in the Gemfile can be collectively installed by simply running bundle install. ",
    "url": "/docs/plugins/installation/#using-a-gemfile",
    "relUrl": "/docs/plugins/installation/#using-a-gemfile"
  },"759": {
    "doc": "Plugins",
    "title": "The :jekyll_plugins Gemfile group",
    "content": "Jekyll gives a special treatment to gems listed as part of the :jekyll_plugins group in a Gemfile. Any gem under this group is loaded at the very beginning of any Jekyll process, irrespective of the --safe CLI flag or entries in the configuration file(s). While this route allows one to enhance Jekyll’s CLI with additional subcommands and options, or avoid having to list gems in the configuration file, the downside is the necessity to be mindful of what gems are included in the group. For example: . source \"https://rubygems.org\" # Use the latest version. gem \"jekyll\" # The theme of current site, locked to a certain version. gem \"minima\", \"2.4.1\" # Plugins of this site loaded only if configured correctly. gem \"jekyll-gist\" gem \"jekyll-coffeescript\" # Gems loaded irrespective of site configuration. group :jekyll_plugins do gem \"jekyll-cli-plus\" gem \"jekyll-seo-tag\", \"~&gt; 1.5\" gem \"some-other-jekyll-plugin\" end . Plugins on GitHub Pages . GitHub Pages is powered by Jekyll. All GitHub Pages sites are generated using the --safe option to disable plugins (with the exception of some whitelisted plugins) for security reasons. Unfortunately, this means your plugins won't work if you’re deploying via GitHub Pages. You can still use GitHub Pages to publish your site, but you’ll need to build the site locally and push the generated files to your GitHub repository instead of the Jekyll source files. _plugins, _config.yml and Gemfile can be used simultaneously . You may use any of the aforementioned plugin routes simultaneously in the same site if you so choose. Use of one does not restrict the use of the others. ",
    "url": "/docs/plugins/installation/#the-jekyll_plugins-group",
    "relUrl": "/docs/plugins/installation/#the-jekyll_plugins-group"
  },"760": {
    "doc": "Plugins",
    "title": "Plugins",
    "content": "Jekyll has built-in support for using plugins to extend the core functionality. Primarily, any file with extension .rb placed within a _plugins directory at the root of the site’s source, will be automatically loaded during a build session. This behavior can be configured as follows: . | The _plugins directory may be changed either directly via the command-line or via the configuration file(s). | Plugins in the _plugins directory (or its equivalent(s)) will not be loaded when Jekyll is running in safe mode. | This route cannot be used to extend the Jekyll CLI. | . To work with plugins packaged as gems, one has to list the desired gems in the configuration file under a top-level key named plugins. Additionally, if you’re building in safe mode, the gem needs to be listed under a top-level key named whitelist. For example: . plugins: - jekyll-gist - jekyll-coffeescript - jekyll-seo-tag - some-other-jekyll-plugin # Enable safe mode safe: true # Whitelist plugins under safe mode. # Note that `some-other-jekyll-plugin` is not listed here. Therefore, # it will not be loaded under safe mode. whitelist: - jekyll-gist - jekyll-coffeescript - jekyll-seo-tag . In the absence of a Gemfile, one must manually ensure that listed plugins have been installed prior to invoking Jekyll. For example, the latest versions of gems in the above list may be installed to a system-wide location by running: . gem install jekyll-gist jekyll-coffeescript jekyll-remote-theme some-other-jekyll-plugin . ",
    "url": "/docs/plugins/installation/",
    "relUrl": "/docs/plugins/installation/"
  },"761": {
    "doc": "Tags",
    "title": "Tag Blocks",
    "content": "The render_time tag seen above can also be rewritten as a tag block by inheriting the Liquid::Block class. Look at the example below: . module Jekyll class RenderTimeTagBlock &lt; Liquid::Block def render(context) text = super \"&lt;p&gt;#{text} #{Time.now}&lt;/p&gt;\" end end end Liquid::Template.register_tag('render_time', Jekyll::RenderTimeTagBlock) . We can now use the tag block anywhere: . {% render_time %} page rendered at: {% endrender_time %} . And we would still get the same output as above on the page: . &lt;p&gt;page rendered at: Tue June 22 23:38:47 –0500 2010&lt;/p&gt; . In the above example, the tag block and the tag are both registered with the name render_time, but to register a tag and a tag block using the same name in the same project is not recommended as this may lead to conflicts. ",
    "url": "/docs/plugins/tags/#tag-blocks",
    "relUrl": "/docs/plugins/tags/#tag-blocks"
  },"762": {
    "doc": "Tags",
    "title": "Tags",
    "content": "If you’d like to include custom liquid tags in your site, you can do so by hooking into the tagging system. Built-in examples added by Jekyll include the highlight and include tags. Below is an example of a custom liquid tag that will output the time the page was rendered: . module Jekyll class RenderTimeTag &lt; Liquid::Tag def initialize(tag_name, text, tokens) super @text = text end def render(context) \"#{@text} #{Time.now}\" end end end Liquid::Template.register_tag('render_time', Jekyll::RenderTimeTag) . At a minimum, liquid tags must implement: . | Method | Description | . | render . | Outputs the content of the tag. | . You must also register the custom tag with the Liquid template engine as follows: . Liquid::Template.register_tag('render_time', Jekyll::RenderTimeTag) . In the example above, we can place the following tag anywhere in one of our pages: . &lt;p&gt;{% render_time page rendered at: %}&lt;/p&gt; . And we would get something like this on the page: . &lt;p&gt;page rendered at: Tue June 22 23:38:47 –0500 2010&lt;/p&gt; . ",
    "url": "/docs/plugins/tags/",
    "relUrl": "/docs/plugins/tags/"
  },"763": {
    "doc": "Your first plugin",
    "title": "Generators",
    "content": "Generators create content on your site. For example: . | jekyll-feed creates an Atom feed of blog posts. | jekyll-archives creates archive pages for blog categories and tags. | jekyll-sitemap creates a sitemap. | . ",
    "url": "/docs/plugins/your-first-plugin/#generators",
    "relUrl": "/docs/plugins/your-first-plugin/#generators"
  },"764": {
    "doc": "Your first plugin",
    "title": "Converters",
    "content": "Converters change a markup language into another format. For example: . | jekyll-textile-converter converts textile to HTML. | jekyll-coffeescript converts Coffeescript to JavaScript. | jekyll-opal converts Ruby to JavaScript. | . ",
    "url": "/docs/plugins/your-first-plugin/#converters",
    "relUrl": "/docs/plugins/your-first-plugin/#converters"
  },"765": {
    "doc": "Your first plugin",
    "title": "Commands",
    "content": "Commands extend the jekyll executable with subcommands. For example: . | jekyll-compose adds subcommands for creating a post, page or draft. | . ",
    "url": "/docs/plugins/your-first-plugin/#commands",
    "relUrl": "/docs/plugins/your-first-plugin/#commands"
  },"766": {
    "doc": "Your first plugin",
    "title": "Tags",
    "content": "Tags create custom Liquid tags. For example: . | jekyll-youtube embeds a YouTube video. | jekyll-asset-path-plugin outputs a relative URL for assets. | jekyll-swfobject embeds a SWF object. | . ",
    "url": "/docs/plugins/your-first-plugin/#tags",
    "relUrl": "/docs/plugins/your-first-plugin/#tags"
  },"767": {
    "doc": "Your first plugin",
    "title": "Filters",
    "content": "Filters create custom Liquid filters. For example: . | jekyll-time-ago - The distance between two dates in words. | jekyll-toc - Generates a table of content. | jekyll-email-protect - Obfuscates emails to protect them from spam bots. | . ",
    "url": "/docs/plugins/your-first-plugin/#filters",
    "relUrl": "/docs/plugins/your-first-plugin/#filters"
  },"768": {
    "doc": "Your first plugin",
    "title": "Hooks",
    "content": "Hooks give fine-grained control to extend the build process. For example: . | jemoji Display emojis :+1: | jekyll-mentions turns mentions @jekyll into links | jekyll-spaceship - advanced example. Provides powerful supports for table, mathjax, plantuml, video, etc. | . ",
    "url": "/docs/plugins/your-first-plugin/#hooks",
    "relUrl": "/docs/plugins/your-first-plugin/#hooks"
  },"769": {
    "doc": "Your first plugin",
    "title": "Flags",
    "content": "There are two flags to be aware of when writing a plugin: . | Flag | Description | . | safe . | A boolean flag that informs Jekyll whether this plugin may be safely executed in an environment where arbitrary code execution is not allowed. This is used by GitHub Pages to determine which core plugins may be used, and which are unsafe to run. If your plugin does not allow for arbitrary code execution, set this to true. GitHub Pages still won’t load your plugin, but if you submit it for inclusion in core, it’s best for this to be correct! . | . | priority . | This flag determines what order the plugin is loaded in. Valid values are: :lowest, :low, :normal, :high, and :highest. Highest priority matches are applied first, lowest priority are applied last. | . To use one of the example plugins above as an illustration, here is how you’d specify these two flags: . module Jekyll class UpcaseConverter &lt; Converter safe true priority :low ... end end . ",
    "url": "/docs/plugins/your-first-plugin/#flags",
    "relUrl": "/docs/plugins/your-first-plugin/#flags"
  },"770": {
    "doc": "Your first plugin",
    "title": "Best Practices",
    "content": "The guides help you with the specifics of creating plugins. We also have some recommended best practices to help structure your plugin. We recommend using a gem for your plugin. This will help you manage dependencies, keep separation from your site source code and allow you to share functionality across multiple projects. For tips on creating a gem take a look at the Ruby gems guide or look through the source code of an existing plugin such as jekyll-feed. ",
    "url": "/docs/plugins/your-first-plugin/#best-practices",
    "relUrl": "/docs/plugins/your-first-plugin/#best-practices"
  },"771": {
    "doc": "Your first plugin",
    "title": "Your first plugin",
    "content": "Plugins allow you to extend Jekyll’s behavior to fit your needs. There are six types of plugins in Jekyll. ",
    "url": "/docs/plugins/your-first-plugin/",
    "relUrl": "/docs/plugins/your-first-plugin/"
  },"772": {
    "doc": "Posts",
    "title": "The Posts Folder",
    "content": "The _posts folder is where your blog posts live. You typically write posts in Markdown, HTML is also supported. ",
    "url": "/docs/posts/#the-posts-folder",
    "relUrl": "/docs/posts/#the-posts-folder"
  },"773": {
    "doc": "Posts",
    "title": "Creating Posts",
    "content": "To create a post, add a file to your _posts directory with the following format: . YEAR-MONTH-DAY-title.MARKUP . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. For example, the following are examples of valid post filenames: . 2011-12-31-new-years-eve-is-awesome.md 2012-09-12-how-to-write-a-blog.md . All blog post files must begin with front matter which is typically used to set a layout or other meta data. For a simple example this can just be empty: . --- layout: post title: \"Welcome to Jekyll!\" --- # Welcome **Hello world**, this is my first Jekyll blog post. I hope you like it! . ProTip™: Link to other posts . Use the post_url tag to link to other posts without having to worry about the URLs breaking when the site permalink style changes. Be aware of character sets . Content processors can modify certain characters to make them look nicer. For example, the smart extension in Redcarpet converts standard, ASCII quotation characters to curly, Unicode ones. In order for the browser to display those characters properly, define the charset meta value by including &lt;meta charset=&quot;utf-8&quot;&gt; in the &lt;head&gt; of your layout. ",
    "url": "/docs/posts/#creating-posts",
    "relUrl": "/docs/posts/#creating-posts"
  },"774": {
    "doc": "Posts",
    "title": "Including images and resources",
    "content": "At some point, you’ll want to include images, downloads, or other digital assets along with your text content. One common solution is to create a folder in the root of the project directory called something like assets, into which any images, files or other resources are placed. Then, from within any post, they can be linked to using the site’s root as the path for the asset to include. The best way to do this depends on the way your site’s (sub)domain and path are configured, but here are some simple examples in Markdown: . Including an image asset in a post: ... which is shown in the screenshot below: ![My helpful screenshot](/assets/screenshot.jpg) . Linking to a PDF for readers to download: ... you can [get the PDF](/assets/mydoc.pdf) directly. ",
    "url": "/docs/posts/#including-images-and-resources",
    "relUrl": "/docs/posts/#including-images-and-resources"
  },"775": {
    "doc": "Posts",
    "title": "Displaying an index of posts",
    "content": "Creating an index of posts on another page should be easy thanks to Liquid and its tags. Here’s a simple example of how to create a list of links to your blog posts: . &lt;ul&gt; {% for post in site.posts %} &lt;li&gt; &lt;a href=\"{{ post.url }}\"&gt;{{ post.title }}&lt;/a&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; . You have full control over how (and where) you display your posts, and how you structure your site. You should read more about how templates work with Jekyll if you want to know more. Note that the post variable only exists inside the for loop above. If you wish to access the currently-rendering page/posts’s variables (the variables of the post/page that has the for loop in it), use the page variable instead. ",
    "url": "/docs/posts/#displaying-an-index-of-posts",
    "relUrl": "/docs/posts/#displaying-an-index-of-posts"
  },"776": {
    "doc": "Posts",
    "title": "Tags and Categories",
    "content": "Jekyll has first class support for tags and categories in blog posts. ",
    "url": "/docs/posts/#tags-and-categories",
    "relUrl": "/docs/posts/#tags-and-categories"
  },"777": {
    "doc": "Posts",
    "title": "Tags",
    "content": "Tags for a post are defined in the post’s front matter using either the key tag for a single entry or tags for multiple entries. Since Jekyll expects multiple items mapped to the key tags, it will automatically split a string entry if it contains whitespace. For example, while front matter tag: classic hollywood will be processed into a singular entity \"classic hollywood\", front matter tags: classic hollywood will be processed into an array of entries [\"classic\", \"hollywood\"]. Irrespective of the front matter key chosen, Jekyll stores the metadata mapped to the plural key which is exposed to Liquid templates. All tags registered in the current site are exposed to Liquid templates via site.tags. Iterating over site.tags on a page will yield another array with two items, where the first item is the name of the tag and the second item being an array of posts with that tag. {% for tag in site.tags %} &lt;h3&gt;{{ tag[0] }}&lt;/h3&gt; &lt;ul&gt; {% for post in tag[1] %} &lt;li&gt;&lt;a href=\"{{ post.url }}\"&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; {% endfor %} . ",
    "url": "/docs/posts/#tags",
    "relUrl": "/docs/posts/#tags"
  },"778": {
    "doc": "Posts",
    "title": "Categories",
    "content": "Categories of a post work similar to the tags above: . | They can be defined via the front matter using keys category or categories (that follow the same logic as for tags) | All categories registered in the site are exposed to Liquid templates via site.categories which can be iterated over (similar to the loop for tags above.) | . The similarity between categories and tags however, ends there. Unlike tags, categories for posts can also be defined by a post’s file path. Any directory above _post will be read-in as a category. For example, if a post is at path movies/horror/_posts/2019-05-21-bride-of-chucky.markdown, then movies and horror are automatically registered as categories for that post. When the post also has front matter defining categories, they just get added to the existing list if not present already. The hallmark difference between categories and tags is that categories of a post may be incorporated into the generated URL for the post, while tags cannot be. Therefore, depending on whether front matter has category: classic hollywood, or categories: classic hollywood, the example post above would have the URL as either movies/horror/classic%20hollywood/2019/05/21/bride-of-chucky.html or movies/horror/classic/hollywood/2019/05/21/bride-of-chucky.html respectively. ",
    "url": "/docs/posts/#categories",
    "relUrl": "/docs/posts/#categories"
  },"779": {
    "doc": "Posts",
    "title": "Post excerpts",
    "content": "You can access a snippet of a posts’s content by using excerpt variable on a post. By default this is the first paragraph of content in the post, however it can be customized by setting a excerpt_separator variable in front matter or _config.yml. --- excerpt_separator: &lt;!--more--&gt; --- Excerpt with multiple paragraphs Here's another paragraph in the excerpt. &lt;!--more--&gt; Out-of-excerpt . Here’s an example of outputting a list of blog posts with an excerpt: . &lt;ul&gt; {% for post in site.posts %} &lt;li&gt; &lt;a href=\"{{ post.url }}\"&gt;{{ post.title }}&lt;/a&gt; {{ post.excerpt }} &lt;/li&gt; {% endfor %} &lt;/ul&gt; . ",
    "url": "/docs/posts/#post-excerpts",
    "relUrl": "/docs/posts/#post-excerpts"
  },"780": {
    "doc": "Posts",
    "title": "Drafts",
    "content": "Drafts are posts without a date in the filename. They’re posts you’re still working on and don’t want to publish yet. To get up and running with drafts, create a _drafts folder in your site’s root and create your first draft: . ├── _drafts │ └── a-draft-post.md ... To preview your site with drafts, run jekyll serve or jekyll build with the --drafts switch. Each will be assigned the value modification time of the draft file for its date, and thus you will see currently edited drafts as the latest posts. ",
    "url": "/docs/posts/#drafts",
    "relUrl": "/docs/posts/#drafts"
  },"781": {
    "doc": "Posts",
    "title": "Posts",
    "content": "Blogging is baked into Jekyll. You write blog posts as text files and Jekyll provides everything you need to turn it into a blog. ",
    "url": "/docs/posts/",
    "relUrl": "/docs/posts/"
  },"782": {
    "doc": "Rendering Process",
    "title": "Rendering Process",
    "content": "For any Jekyll site, a build session consists of discrete phases in the following order — setting up plugins, reading source files, running generators, rendering templates, and finally writing files to disk. While the phases above are self-explanatory, the one phase that warrants dissection is the rendering phase. The rendering phase is further divisible into three optional stages. Every file rendered, passes through one or more of these stages as determined by the file’s content string, front matter and extension. The stages are akin to an assembly line, with the output from a stage being the input for the succeeding stage: . | Interpreting Liquid expressions in the file This stage evaluates Liquid expressions in the current file. By default, the interpretation is shallow — in that any Liquid expression in resulting output is not further interpreted. Moreover, any Liquid expression in the file’s front matter is left untouched. | Unleashing the converters This stage invokes the converter mapped to the current file’s extension and converts the input string. This is when Markdown gets converted into HTML and Sass / Scss into CSS or CoffeeScript into JavaScript, etc, etc. Since this stage is determined by the file’s extension, Markdown or Sass inside a .html file will remain untouched. | Populating the layouts By this stage, the source file is considered rendered and it will not be revisited. However, based on the file’s extension and consequently based on the front matter, it is determined whether to take the output string from the preceding stage and place into layouts or not. Whereas output from Sass files or CoffeeScript files are never placed into a layout, regular text output can go either ways based on whether a layout has been assigned via the front matter. Placement into layouts work similar to how Russian dolls encase the smaller ones within itself or how an oyster generates a pearl — the converted output from the preceding stage forms the core and layout(s) are successively rendered separately onto the core. | . ",
    "url": "/docs/rendering-process/",
    "relUrl": "/docs/rendering-process/"
  },"783": {
    "doc": "Ruby 101",
    "title": "Gems",
    "content": "Gems are code you can include in Ruby projects. Gems package specific functionality. You can share gems across multiple projects or with other people. Gems can perform actions like: . | Converting a Ruby object to JSON | Pagination | Interacting with APIs such as GitHub | . Jekyll is a gem. Many Jekyll plugins are also gems, including jekyll-feed, jekyll-seo-tag and jekyll-archives. ",
    "url": "/docs/ruby-101/#gems",
    "relUrl": "/docs/ruby-101/#gems"
  },"784": {
    "doc": "Ruby 101",
    "title": "Gemfile",
    "content": "A Gemfile is a list of gems used by your site. Every Jekyll site has a Gemfile in the main folder. For a simple Jekyll site it might look something like this: . source \"https://rubygems.org\" gem \"jekyll\" group :jekyll_plugins do gem \"jekyll-feed\" gem \"jekyll-seo-tag\" end . ",
    "url": "/docs/ruby-101/#gemfile",
    "relUrl": "/docs/ruby-101/#gemfile"
  },"785": {
    "doc": "Ruby 101",
    "title": "Bundler",
    "content": "Bundler is a gem that installs all gems in your Gemfile. While you don’t have to use Gemfile and bundler, it is highly recommended as it ensures you’re running the same version of Jekyll and its plugins across different environments. Install Bundler using gem install bundler. You only need to install it once, not every time you create a new Jekyll project. To install gems in your Gemfile using Bundler, run the following in the directory that has the Gemfile: . bundle install bundle exec jekyll serve . To bypass Bundler if you aren’t using a Gemfile, run jekyll serve. See Using Jekyll with Bundler for more information about Bundler in Jekyll and for instructions to get up and running quickly. ",
    "url": "/docs/ruby-101/#bundler",
    "relUrl": "/docs/ruby-101/#bundler"
  },"786": {
    "doc": "Ruby 101",
    "title": "Ruby 101",
    "content": "Jekyll is written in Ruby. If you’re new to Ruby, this page helps you learn some of the terminology. ",
    "url": "/docs/ruby-101/",
    "relUrl": "/docs/ruby-101/"
  },"787": {
    "doc": "Security Policy",
    "title": "Supported Versions",
    "content": "Security updates are applied to the latest MINOR version of Jekyll, and the version used by GitHub Pages, v3.9.x. | Version | Supported | . | 4.2.x | :white_check_mark: | . | 3.9.x | :white_check_mark: | . | &lt; 3.9.x | :x: | . ",
    "url": "/docs/security/#supported-versions",
    "relUrl": "/docs/security/#supported-versions"
  },"788": {
    "doc": "Security Policy",
    "title": "Reporting a Vulnerability",
    "content": "Please report vulnerabilities by sending an email to security@jekyllrb.com with the following information: . | A description of the vulnerability | Reproduction steps and/or a sample site (share a private repo to the Jekyll Security Team) | Your contact information | . The Jekyll security team will respond to your submission and notify you whether it has been confirmed by the team. Your confidentiality is kindly requested as we work on a fix. We will provide our patch to you to test and verify that the vulnerability has been closed. If you have created a patch and would like to submit that to us as well, we will happily consider it though we cannot guarantee that we will use it. If we use your patch, we will attribute authorship to you either as the commit author, or as a co-author. Once a fix is verified, we will release PATCH versions of the supported MINOR versions and assign a CVE to the vulnerability. You will receive credit in our release post. Once the patched version has been released, we will no longer request you to maintain confidentiality and you may choose to share details on how you found the vulnerability with the community. ",
    "url": "/docs/security/#reporting-a-vulnerability",
    "relUrl": "/docs/security/#reporting-a-vulnerability"
  },"789": {
    "doc": "Security Policy",
    "title": "Security Policy",
    "content": " ",
    "url": "/docs/security/",
    "relUrl": "/docs/security/"
  },"790": {
    "doc": "Static Files",
    "title": "Add front matter to static files",
    "content": "Although you can’t directly add front matter values to static files, you can set front matter values through the defaults property in your configuration file. When Jekyll builds the site, it will use the front matter values you set. Here’s an example: . In your _config.yml file, add the following values to the defaults property: . defaults: - scope: path: \"assets/img\" values: image: true . This assumes that your Jekyll site has a folder path of assets/img where you have images (static files) stored. When Jekyll builds the site, it will treat each image as if it had the front matter value of image: true. Suppose you want to list all your image assets as contained in assets/img. You could use this for loop to look in the static_files object and get all static files that have this front matter property: . {% assign image_files = site.static_files | where: \"image\", true %} {% for myimage in image_files %} {{ myimage.path }} {% endfor %} . When you build your site, the output will list the path to each file that meets this front matter condition. ",
    "url": "/docs/static-files/#add-front-matter-to-static-files",
    "relUrl": "/docs/static-files/#add-front-matter-to-static-files"
  },"791": {
    "doc": "Static Files",
    "title": "Static Files",
    "content": "A static file is a file that does not contain any front matter. These include images, PDFs, and other un-rendered content. They’re accessible in Liquid via site.static_files and contain the following metadata: . | Variable | Description | . | file.path . | The relative path to the file, e.g. /assets/img/image.jpg . | . | file.modified_time . | The `Time` the file was last modified, e.g. 2016-04-01 16:35:26 +0200 . | . | file.name . | The string name of the file e.g. image.jpg for image.jpg . | . | file.basename . | The string basename of the file e.g. image for image.jpg . | . | file.extname . | The extension name for the file, e.g.jpg for image.jpg . | . Note that in the above table, file can be anything. It’s an arbitrarily set variable used in your own logic (such as in a for loop). It isn’t a global site or page variable. ",
    "url": "/docs/static-files/",
    "relUrl": "/docs/static-files/"
  },"792": {
    "doc": "Setup",
    "title": "Installation",
    "content": "Jekyll is a Ruby gem. First, install Ruby on your machine. Go to Installation and follow the instructions for your operating system. With Ruby installed, install Jekyll from the terminal: . gem install jekyll bundler . Create a new Gemfile to list your project’s dependencies: . bundle init . Edit the Gemfile in a text editor and add jekyll as a dependency: . gem \"jekyll\" . Run bundle to install jekyll for your project. You can now prefix all jekyll commands listed in this tutorial with bundle exec to make sure you use the jekyll version defined in your Gemfile. ",
    "url": "/docs/step-by-step/01-setup/#installation",
    "relUrl": "/docs/step-by-step/01-setup/#installation"
  },"793": {
    "doc": "Setup",
    "title": "Create a site",
    "content": "It’s time to create a site! Create a new directory for your site and name it whatever you want. Through the rest of this tutorial we’ll refer to this directory as root. You can also initialize a Git repository here. One of the great things about Jekyll is there’s no database. All content and site structure are files that a Git repository can version. Using a repository is optional but is recommended. You can learn more about using Git by reading the Git Handbook. Let’s add your first file. Create index.html in root with the following content: . &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Home&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . ",
    "url": "/docs/step-by-step/01-setup/#create-a-site",
    "relUrl": "/docs/step-by-step/01-setup/#create-a-site"
  },"794": {
    "doc": "Setup",
    "title": "Build",
    "content": "Since Jekyll is a static site generator, it has to build the site before we can view it. Run either of the following commands to build your site: . | jekyll build - Builds the site and outputs a static site to a directory called _site. | jekyll serve - Does jekyll build and runs it on a local web server at http://localhost:4000, rebuilding the site any time you make a change. | . When you’re developing a site, use jekyll serve. To force the browser to refresh with every change, use jekyll serve --livereload. If there’s a conflict or you’d like Jekyll to serve your development site at a different URL, use the --host and --port arguments, as described in the serve command options. The version of the site that jekyll serve builds in _site is not suited for deployment. Links and asset URLs in sites created with jekyll serve will use https://localhost:4000 or the value set with command-line configuration, instead of the values set in your site’s configuration file. To learn about how to build your site when it’s ready for deployment, read the Deployment section of this tutorial. Run jekyll serve and go to http://localhost:4000 in your browser. You should see “Hello World!”. At this point, you might be thinking, “So what?”. The only thing that happened was that Jekyll copied an HTML file from one place to another. Patience, young grasshopper, there’s still much to learn! . Next. you’ll learn about Liquid and templating. ",
    "url": "/docs/step-by-step/01-setup/#build",
    "relUrl": "/docs/step-by-step/01-setup/#build"
  },"795": {
    "doc": "Setup",
    "title": "Setup",
    "content": "Welcome to Jekyll’s step-by-step tutorial. This tutorial takes you from having some front-end web development experience to building your first Jekyll site from scratch without relying on the default gem-based theme. ",
    "url": "/docs/step-by-step/01-setup/",
    "relUrl": "/docs/step-by-step/01-setup/"
  },"796": {
    "doc": "Liquid",
    "title": "Objects",
    "content": "Objects tell Liquid to output predefined variables as content on a page. Use double curly braces for objects: {{ and }}. For example, {{ page.title }} displays the page.title variable. ",
    "url": "/docs/step-by-step/02-liquid/#objects",
    "relUrl": "/docs/step-by-step/02-liquid/#objects"
  },"797": {
    "doc": "Liquid",
    "title": "Tags",
    "content": "Tags define the logic and control flow for templates. Use curly braces and percent signs for tags: {% and %}. For example: . {% if page.show_sidebar %} &lt;div class=\"sidebar\"&gt; sidebar content &lt;/div&gt; {% endif %} . This displays the sidebar if the value of the show_sidebar page variable is true. Learn more about the tags available in Jekyll here. ",
    "url": "/docs/step-by-step/02-liquid/#tags",
    "relUrl": "/docs/step-by-step/02-liquid/#tags"
  },"798": {
    "doc": "Liquid",
    "title": "Filters",
    "content": "Filters change the output of a Liquid object. They are used within an output and are separated by a |. For example: . {{ \"hi\" | capitalize }} . This displays Hi instead of hi. Learn more about the filters available. ",
    "url": "/docs/step-by-step/02-liquid/#filters",
    "relUrl": "/docs/step-by-step/02-liquid/#filters"
  },"799": {
    "doc": "Liquid",
    "title": "Use Liquid",
    "content": "Now, use Liquid to make your Hello World! text from Setup lowercase: ... &lt;h1&gt;{{ \"Hello World!\" | downcase }}&lt;/h1&gt; ... To make Jekyll process your changes, add front matter to the top of the page: . --- # front matter tells Jekyll to process Liquid --- . Your HTML document should look like this: . --- --- &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Home&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;{{ \"Hello World!\" | downcase }}&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . When you reload your browser, you should see hello world!. Much of Jekyll’s power comes from combining Liquid with other features. Add frontmatter to pages to make Jekyll process the Liquid on those pages. Next, you’ll learn more about frontmatter. ",
    "url": "/docs/step-by-step/02-liquid/#use-liquid",
    "relUrl": "/docs/step-by-step/02-liquid/#use-liquid"
  },"800": {
    "doc": "Liquid",
    "title": "Liquid",
    "content": "Liquid is where Jekyll starts to get more interesting. It is a templating language which has three main components: . | objects | tags | filters | . ",
    "url": "/docs/step-by-step/02-liquid/",
    "relUrl": "/docs/step-by-step/02-liquid/"
  },"801": {
    "doc": "Front Matter",
    "title": "Use front matter",
    "content": "Change the &lt;title&gt; on your site to use front matter: . --- title: Home --- &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;{{ page.title }}&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;{{ \"Hello World!\" | downcase }}&lt;/h1&gt; &lt;/body&gt; &lt;/html&gt; . You must include front matter on the page for Jekyll to process any Liquid tags on it. To make Jekyll process a page without defining variables in the front matter, use: . --- --- . Next, you’ll learn more about layouts and why your pages use more source code than plain HTML. ",
    "url": "/docs/step-by-step/03-front-matter/#use-front-matter",
    "relUrl": "/docs/step-by-step/03-front-matter/#use-front-matter"
  },"802": {
    "doc": "Front Matter",
    "title": "Front Matter",
    "content": "Front matter is a snippet of YAML placed between two triple-dashed lines at the start of a file. You can use front matter to set variables for the page: . --- my_number: 5 --- . You can call front matter variables in Liquid using the page variable. For example, to output the value of the my_number variable above: . {{ page.my_number }} . ",
    "url": "/docs/step-by-step/03-front-matter/",
    "relUrl": "/docs/step-by-step/03-front-matter/"
  },"803": {
    "doc": "Layouts",
    "title": "Creating a layout",
    "content": "Layouts are templates that can be used by any page in your site and wrap around page content. They are stored in a directory called _layouts. Create the _layouts directory in your site’s root folder and create a new default.html file with the following content: . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;{{ page.title }}&lt;/title&gt; &lt;/head&gt; &lt;body&gt; {{ content }} &lt;/body&gt; &lt;/html&gt; . This HTML is almost identical to index.html except there’s no front matter and the content of the page is replaced by a content variable. content is a special variable that returns the rendered content of the page on which it’s called. ",
    "url": "/docs/step-by-step/04-layouts/#creating-a-layout",
    "relUrl": "/docs/step-by-step/04-layouts/#creating-a-layout"
  },"804": {
    "doc": "Layouts",
    "title": "Use layouts",
    "content": "To make index.html use your new layout, set the layout variable in the front matter. The file should look like this: . --- layout: default title: Home --- &lt;h1&gt;{{ \"Hello World!\" | downcase }}&lt;/h1&gt; . When you reload the site, the output remains the same. Since the layout wraps around the content on the page, you can call front matter like page in the layout file. When you apply the layout to a page, it uses the front matter on that page. ",
    "url": "/docs/step-by-step/04-layouts/#use-layouts",
    "relUrl": "/docs/step-by-step/04-layouts/#use-layouts"
  },"805": {
    "doc": "Layouts",
    "title": "Build the About page",
    "content": "Add the following to about.md to use your new layout in the About page: . --- layout: default title: About --- # About page This page tells you a little bit about me. Open http://localhost:4000/about.html in your browser and view your new page. Congratulations, you now have a two page website! . Next, you’ll learn about navigating from page to page in your site. ",
    "url": "/docs/step-by-step/04-layouts/#build-the-about-page",
    "relUrl": "/docs/step-by-step/04-layouts/#build-the-about-page"
  },"806": {
    "doc": "Layouts",
    "title": "Layouts",
    "content": "Jekyll supports Markdown in addition to HTML when building pages. Markdown is a great choice for pages with a simple content structure (just paragraphs, headings and images), as it’s less verbose than raw HTML. Create a new Markdown file named about.md in your site’s root folder. You could copy the contents of index and modify it for the About page. However, this creates duplicate code that has to be customized for each new page you add to your site. For example, adding a new stylesheet to your site would involve adding the link to the stylesheet to the &lt;head&gt; of each page. For sites with many pages, this is a waste of time. ",
    "url": "/docs/step-by-step/04-layouts/",
    "relUrl": "/docs/step-by-step/04-layouts/"
  },"807": {
    "doc": "Includes",
    "title": "Include tag",
    "content": "The include tag allows you to include content from another file stored in an _includes folder. Includes are useful for having a single source for source code that repeats around the site or for improving the readability. Navigation source code can get complex, so sometimes it’s nice to move it into an include. ",
    "url": "/docs/step-by-step/05-includes/#include-tag",
    "relUrl": "/docs/step-by-step/05-includes/#include-tag"
  },"808": {
    "doc": "Includes",
    "title": "Include usage",
    "content": "Create a file for the navigation at _includes/navigation.html with the following content: . &lt;nav&gt; &lt;a href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/about.html\"&gt;About&lt;/a&gt; &lt;/nav&gt; . Try using the include tag to add the navigation to _layouts/default.html: . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;{{ page.title }}&lt;/title&gt; &lt;/head&gt; &lt;body&gt; {% include navigation.html %} {{ content }} &lt;/body&gt; &lt;/html&gt; . Open http://localhost:4000 in your browser and try switching between the pages. ",
    "url": "/docs/step-by-step/05-includes/#include-usage",
    "relUrl": "/docs/step-by-step/05-includes/#include-usage"
  },"809": {
    "doc": "Includes",
    "title": "Current page highlighting",
    "content": "Let’s take this a step further and highlight the current page in the navigation. _includes/navigation.html needs to know the URL of the page it’s inserted into so it can add styling. Jekyll has useful variables available, one of which is page.url. Using page.url you can check if each link is the current page and color it red if true: . &lt;nav&gt; &lt;a href=\"/\" {% if page.url == \"/\" %}style=\"color: red;\"{% endif %}&gt; Home &lt;/a&gt; &lt;a href=\"/about.html\" {% if page.url == \"/about.html\" %}style=\"color: red;\"{% endif %}&gt; About &lt;/a&gt; &lt;/nav&gt; . Take a look at http://localhost:4000 and see your red link for the current page. There’s still a lot of repetition here if you wanted to add a new item to the navigation or change the highlight color. In the next step we’ll address this. ",
    "url": "/docs/step-by-step/05-includes/#current-page-highlighting",
    "relUrl": "/docs/step-by-step/05-includes/#current-page-highlighting"
  },"810": {
    "doc": "Includes",
    "title": "Includes",
    "content": "The site is coming together; however, there’s no way to navigate between pages. Let’s fix that. Navigation should be on every page so adding it to your layout is the correct place to do this. Instead of adding it directly to the layout, let’s use this as an opportunity to learn about includes. ",
    "url": "/docs/step-by-step/05-includes/",
    "relUrl": "/docs/step-by-step/05-includes/"
  },"811": {
    "doc": "Data Files",
    "title": "Data file usage",
    "content": "YAML is a format that’s common in the Ruby ecosystem. You’ll use it to store an array of navigation items each with a name and link. Create a data file for the navigation at _data/navigation.yml with the following: . - name: Home link: / - name: About link: /about.html . Jekyll makes this data file available to you at site.data.navigation. Instead of outputting each link in _includes/navigation.html, now you can iterate over the data file instead: . &lt;nav&gt; {% for item in site.data.navigation %} &lt;a href=\"{{ item.link }}\" {% if page.url == item.link %}style=\"color: red;\"{% endif %}&gt; {{ item.name }} &lt;/a&gt; {% endfor %} &lt;/nav&gt; . The output will be exactly the same. The difference is you’ve made it easier to add new navigation items and change the HTML structure. What good is a site without CSS, JS and images? Let’s look at how to handle assets in Jekyll. ",
    "url": "/docs/step-by-step/06-data-files/#data-file-usage",
    "relUrl": "/docs/step-by-step/06-data-files/#data-file-usage"
  },"812": {
    "doc": "Data Files",
    "title": "Data Files",
    "content": "Jekyll supports loading data from YAML, JSON, and CSV files located in a _data directory. Data files are a great way to separate content from source code to make the site easier to maintain. In this step you’ll store the contents of the navigation in a data file and then iterate over it in the navigation include. ",
    "url": "/docs/step-by-step/06-data-files/",
    "relUrl": "/docs/step-by-step/06-data-files/"
  },"813": {
    "doc": "Assets",
    "title": "Sass",
    "content": "Inlining the styles used in _includes/navigation.html(adding or configuring within the same file) is not a best practice. Instead, let’s style the current page by defining our first class in a new css file instead. To do this, refer to the class (that you will configure in the next parts of this step) from within the navigation.html file by removing the code you added earlier (to color the current link red) and inserting the following code: . &lt;nav&gt; {% for item in site.data.navigation %} &lt;a href=\"{{ item.link }}\" {% if page.url == item.link %}class=\"current\"{% endif %}&gt;{{ item.name }}&lt;/a&gt; {% endfor %} &lt;/nav&gt; . You could use a standard CSS file for styling, we’re going to take it a step further by using Sass. Sass is a fantastic extension to CSS baked right into Jekyll. First create a Sass file at assets/css/styles.scss with the following content: . --- --- @import \"main\"; . The empty front matter at the top tells Jekyll it needs to process the file. The @import \"main\" tells Sass to look for a file called main.scss in the sass directory (_sass/) by default which you already created directly under the root folder of your website). At this stage you’ll just have a main css file. For larger projects, this is a great way to keep your CSS organized. Create the current class mentioned above in order to color the current link green. Create a Sass file at _sass/main.scss with the following content: .current { color: green; } . You’ll need to reference the stylesheet in your layout. Open _layouts/default.html and add the stylesheet to the &lt;head&gt;: . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;{{ page.title }}&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"/assets/css/styles.css\"&gt; &lt;/head&gt; &lt;body&gt; {% include navigation.html %} {{ content }} &lt;/body&gt; &lt;/html&gt; . The styles.css referenced here is generated by Jekyll from the styles.scss you created earlier in assets/css/. Load up http://localhost:4000 and check that the active link in the navigation is green. Next we’re looking at one of Jekyll’s most popular features, blogging. ",
    "url": "/docs/step-by-step/07-assets/#sass",
    "relUrl": "/docs/step-by-step/07-assets/#sass"
  },"814": {
    "doc": "Assets",
    "title": "Assets",
    "content": "Using CSS, JS, images and other assets is straightforward with Jekyll. Place them in your site folder and they’ll copy across to the built site. Jekyll sites often use this structure to keep assets organized: . ├── assets │ ├── css │ ├── images │ └── js ... So, from your assets folder, create folders called css, images and js. Additionally, directly under the root create another folder called ‘_sass’, which you will need shortly. ",
    "url": "/docs/step-by-step/07-assets/",
    "relUrl": "/docs/step-by-step/07-assets/"
  },"815": {
    "doc": "Blogging",
    "title": "Posts",
    "content": "Blog posts live in a folder called _posts. The filename for posts have a special format: the publish date, then a title, followed by an extension. Create your first post at _posts/2018-08-20-bananas.md with the following content: . --- layout: post author: jill --- A banana is an edible fruit – botanically a berry – produced by several kinds of large herbaceous flowering plants in the genus Musa. In some countries, bananas used for cooking may be called \"plantains\", distinguishing them from dessert bananas. The fruit is variable in size, color, and firmness, but is usually elongated and curved, with soft flesh rich in starch covered with a rind, which may be green, yellow, red, purple, or brown when ripe. This is like the about.md you created before except it has an author and a different layout. author is a custom variable, it’s not required and could have been named something like creator. ",
    "url": "/docs/step-by-step/08-blogging/#posts",
    "relUrl": "/docs/step-by-step/08-blogging/#posts"
  },"816": {
    "doc": "Blogging",
    "title": "Layout",
    "content": "The post layout doesn’t exist so you’ll need to create it at _layouts/post.html with the following content: . --- layout: default --- &lt;h1&gt;{{ page.title }}&lt;/h1&gt; &lt;p&gt;{{ page.date | date_to_string }} - {{ page.author }}&lt;/p&gt; {{ content }} . This is an example of layout inheritance. The post layout outputs the title, date, author and content body which is wrapped by the default layout. Also note the date_to_string filter, this formats a date into a nicer format. ",
    "url": "/docs/step-by-step/08-blogging/#layout",
    "relUrl": "/docs/step-by-step/08-blogging/#layout"
  },"817": {
    "doc": "Blogging",
    "title": "List posts",
    "content": "There’s currently no way to navigate to the blog post. Typically a blog has a page which lists all the posts, let’s do that next. Jekyll makes posts available at site.posts. Create blog.html in your root (/blog.html) with the following content: . --- layout: default title: Blog --- &lt;h1&gt;Latest Posts&lt;/h1&gt; &lt;ul&gt; {% for post in site.posts %} &lt;li&gt; &lt;h2&gt;&lt;a href=\"{{ post.url }}\"&gt;{{ post.title }}&lt;/a&gt;&lt;/h2&gt; {{ post.excerpt }} &lt;/li&gt; {% endfor %} &lt;/ul&gt; . There’s a few things to note with this code: . | post.url is automatically set by Jekyll to the output path of the post | post.title is pulled from the post filename and can be overridden by setting title in front matter | post.excerpt is the first paragraph of content by default | . You also need a way to navigate to this page through the main navigation. Open _data/navigation.yml and add an entry for the blog page: . - name: Home link: / - name: About link: /about.html - name: Blog link: /blog.html . ",
    "url": "/docs/step-by-step/08-blogging/#list-posts",
    "relUrl": "/docs/step-by-step/08-blogging/#list-posts"
  },"818": {
    "doc": "Blogging",
    "title": "More posts",
    "content": "A blog isn’t very exciting with a single post. Add a few more: . _posts/2018-08-21-apples.md: . --- layout: post author: jill --- An apple is a sweet, edible fruit produced by an apple tree. Apple trees are cultivated worldwide, and are the most widely grown species in the genus Malus. The tree originated in Central Asia, where its wild ancestor, Malus sieversii, is still found today. Apples have been grown for thousands of years in Asia and Europe, and were brought to North America by European colonists. _posts/2018-08-22-kiwifruit.md: . --- layout: post author: ted --- Kiwifruit (often abbreviated as kiwi), or Chinese gooseberry is the edible berry of several species of woody vines in the genus Actinidia. The most common cultivar group of kiwifruit is oval, about the size of a large hen's egg (5–8 cm (2.0–3.1 in) in length and 4.5–5.5 cm (1.8–2.2 in) in diameter). It has a fibrous, dull greenish-brown skin and bright green or golden flesh with rows of tiny, black, edible seeds. The fruit has a soft texture, with a sweet and unique flavor. Open http://localhost:4000 and have a look through your blog posts. Next we’ll focus on creating a page for each post author. ",
    "url": "/docs/step-by-step/08-blogging/#more-posts",
    "relUrl": "/docs/step-by-step/08-blogging/#more-posts"
  },"819": {
    "doc": "Blogging",
    "title": "Blogging",
    "content": "You might be wondering how you can have a blog without a database. In true Jekyll style, blogging is powered by text files only. ",
    "url": "/docs/step-by-step/08-blogging/",
    "relUrl": "/docs/step-by-step/08-blogging/"
  },"820": {
    "doc": "Collections",
    "title": "Configuration",
    "content": "To set up a collection you need to tell Jekyll about it. Jekyll configuration happens in a file called _config.yml (by default). Create _config.yml in the root with the following: . collections: authors: . To (re)load the configuration, restart the jekyll server. Press Ctrl+C in your terminal to stop the server, and then jekyll serve to restart it. ",
    "url": "/docs/step-by-step/09-collections/#configuration",
    "relUrl": "/docs/step-by-step/09-collections/#configuration"
  },"821": {
    "doc": "Collections",
    "title": "Add authors",
    "content": "Documents (the items in a collection) live in a folder in the root of the site named _*collection_name*. In this case, _authors. Create a document for each author: . _authors/jill.md: . --- short_name: jill name: Jill Smith position: Chief Editor --- Jill is an avid fruit grower based in the south of France. _authors/ted.md: . --- short_name: ted name: Ted Doe position: Writer --- Ted has been eating fruit since he was baby. ",
    "url": "/docs/step-by-step/09-collections/#add-authors",
    "relUrl": "/docs/step-by-step/09-collections/#add-authors"
  },"822": {
    "doc": "Collections",
    "title": "Staff page",
    "content": "Let’s add a page which lists all the authors on the site. Jekyll makes the collection available at site.authors. Create staff.html and iterate over site.authors to output all the staff: . --- layout: default title: Staff --- &lt;h1&gt;Staff&lt;/h1&gt; &lt;ul&gt; {% for author in site.authors %} &lt;li&gt; &lt;h2&gt;{{ author.name }}&lt;/h2&gt; &lt;h3&gt;{{ author.position }}&lt;/h3&gt; &lt;p&gt;{{ author.content | markdownify }}&lt;/p&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; . Since the content is markdown, you need to run it through the markdownify filter. This happens automatically when outputting using {{ content }} in a layout. You also need a way to navigate to this page through the main navigation. Open _data/navigation.yml and add an entry for the staff page: . - name: Home link: / - name: About link: /about.html - name: Blog link: /blog.html - name: Staff link: /staff.html . ",
    "url": "/docs/step-by-step/09-collections/#staff-page",
    "relUrl": "/docs/step-by-step/09-collections/#staff-page"
  },"823": {
    "doc": "Collections",
    "title": "Output a page",
    "content": "By default, collections do not output a page for documents. In this case we want each author to have their own page so let’s tweak the collection configuration. Open _config.yml and add output: true to the author collection configuration: . collections: authors: output: true . Restart the jekyll server once more for the configuration changes to take effect. You can link to the output page using author.url. Add the link to the staff.html page: . --- layout: default title: Staff --- &lt;h1&gt;Staff&lt;/h1&gt; &lt;ul&gt; {% for author in site.authors %} &lt;li&gt; &lt;h2&gt;&lt;a href=\"{{ author.url }}\"&gt;{{ author.name }}&lt;/a&gt;&lt;/h2&gt; &lt;h3&gt;{{ author.position }}&lt;/h3&gt; &lt;p&gt;{{ author.content | markdownify }}&lt;/p&gt; &lt;/li&gt; {% endfor %} &lt;/ul&gt; . Just like posts you’ll need to create a layout for authors. Create _layouts/author.html with the following content: . --- layout: default --- &lt;h1&gt;{{ page.name }}&lt;/h1&gt; &lt;h2&gt;{{ page.position }}&lt;/h2&gt; {{ content }} . ",
    "url": "/docs/step-by-step/09-collections/#output-a-page",
    "relUrl": "/docs/step-by-step/09-collections/#output-a-page"
  },"824": {
    "doc": "Collections",
    "title": "Front matter defaults",
    "content": "Now you need to configure the author documents to use the author layout. You could do this in the front matter like we have previously but that’s getting repetitive. What you really want is all posts to automatically have the post layout, authors to have author and everything else to use the default. You can achieve this by using front matter defaults in _config.yml. You set a scope of what the default applies to, then the default front matter you’d like. Add defaults for layouts to your _config.yml, . collections: authors: output: true defaults: - scope: path: \"\" type: \"authors\" values: layout: \"author\" - scope: path: \"\" type: \"posts\" values: layout: \"post\" - scope: path: \"\" values: layout: \"default\" . Now you can remove layout from the front matter of all pages and posts. Note that any time you update _config.yml you’ll need to restart Jekyll for the changes to take effect. ",
    "url": "/docs/step-by-step/09-collections/#front-matter-defaults",
    "relUrl": "/docs/step-by-step/09-collections/#front-matter-defaults"
  },"825": {
    "doc": "Collections",
    "title": "List author’s posts",
    "content": "Let’s list the posts an author has published on their page. To do this you need to match the author short_name to the post author. You use this to filter the posts by author. Iterate over this filtered list in _layouts/author.html to output the author’s posts: . --- layout: default --- &lt;h1&gt;{{ page.name }}&lt;/h1&gt; &lt;h2&gt;{{ page.position }}&lt;/h2&gt; {{ content }} &lt;h2&gt;Posts&lt;/h2&gt; &lt;ul&gt; {% assign filtered_posts = site.posts | where: 'author', page.short_name %} {% for post in filtered_posts %} &lt;li&gt;&lt;a href=\"{{ post.url }}\"&gt;{{ post.title }}&lt;/a&gt;&lt;/li&gt; {% endfor %} &lt;/ul&gt; . ",
    "url": "/docs/step-by-step/09-collections/#list-authors-posts",
    "relUrl": "/docs/step-by-step/09-collections/#list-authors-posts"
  },"826": {
    "doc": "Collections",
    "title": "Link to authors page",
    "content": "The posts have a reference to the author so let’s link it to the author’s page. You can do this using a similar filtering technique in _layouts/post.html: . --- layout: default --- &lt;h1&gt;{{ page.title }}&lt;/h1&gt; &lt;p&gt; {{ page.date | date_to_string }} {% assign author = site.authors | where: 'short_name', page.author | first %} {% if author %} - &lt;a href=\"{{ author.url }}\"&gt;{{ author.name }}&lt;/a&gt; {% endif %} &lt;/p&gt; {{ content }} . Open up http://localhost:4000 and have a look at the staff page and the author links on posts to check everything is linked together correctly. In the next and final step of this tutorial, we’ll add polish to the site and get it ready for a production deployment. ",
    "url": "/docs/step-by-step/09-collections/#link-to-authors-page",
    "relUrl": "/docs/step-by-step/09-collections/#link-to-authors-page"
  },"827": {
    "doc": "Collections",
    "title": "Collections",
    "content": "Let’s look at fleshing out authors so each author has their own page with a blurb and the posts they’ve published. To do this you’ll use collections. Collections are similar to posts except the content doesn’t have to be grouped by date. ",
    "url": "/docs/step-by-step/09-collections/",
    "relUrl": "/docs/step-by-step/09-collections/"
  },"828": {
    "doc": "Deployment",
    "title": "Gemfile",
    "content": "It’s good practice to have a Gemfile for your site. This ensures the version of Jekyll and other gems remains consistent across different environments. Create a Gemfile in the root. The file should be called ‘Gemfile’ and should not have any extension. You can create a Gemfile with Bundler and then add the jekyll gem: . bundle init bundle add jekyll . Your file should look something like: . # frozen_string_literal: true source \"https://rubygems.org\" gem \"jekyll\" . Bundler installs the gems and creates a Gemfile.lock which locks the current gem versions for a future bundle install. If you ever want to update your gem versions you can run bundle update. When using a Gemfile, you’ll run commands like jekyll serve with bundle exec prefixed. So the full command is: . bundle exec jekyll serve . This restricts your Ruby environment to only use gems set in your Gemfile. ",
    "url": "/docs/step-by-step/10-deployment/#gemfile",
    "relUrl": "/docs/step-by-step/10-deployment/#gemfile"
  },"829": {
    "doc": "Deployment",
    "title": "Plugins",
    "content": "Jekyll plugins allow you to create custom generated content specific to your site. There’s many plugins available or you can even write your own. There are three official plugins which are useful on almost any Jekyll site: . | jekyll-sitemap - Creates a sitemap file to help search engines index content | jekyll-feed - Creates an RSS feed for your posts | jekyll-seo-tag - Adds meta tags to help with SEO | . To use these first you need to add them to your Gemfile. If you put them in a jekyll_plugins group they’ll automatically be required into Jekyll: . source 'https://rubygems.org' gem 'jekyll' group :jekyll_plugins do gem 'jekyll-sitemap' gem 'jekyll-feed' gem 'jekyll-seo-tag' end . Then add these lines to your _config.yml: . plugins: - jekyll-feed - jekyll-sitemap - jekyll-seo-tag . Now install them by running a bundle update. jekyll-sitemap doesn’t need any setup, it will create your sitemap on build. For jekyll-feed and jekyll-seo-tag you need to add tags to _layouts/default.html: . &lt;!doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;{{ page.title }}&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"/assets/css/styles.css\"&gt; {% feed_meta %} {% seo %} &lt;/head&gt; &lt;body&gt; {% include navigation.html %} {{ content }} &lt;/body&gt; &lt;/html&gt; . Restart your Jekyll server and check these tags are added to the &lt;head&gt;. ",
    "url": "/docs/step-by-step/10-deployment/#plugins",
    "relUrl": "/docs/step-by-step/10-deployment/#plugins"
  },"830": {
    "doc": "Deployment",
    "title": "Environments",
    "content": "Sometimes you might want to output something in production but not in development. Analytics scripts are the most common example of this. To do this you can use environments. You can set the environment by using the JEKYLL_ENV environment variable when running a command. For example: . JEKYLL_ENV=production bundle exec jekyll build . By default JEKYLL_ENV is development. The JEKYLL_ENV is available to you in liquid using jekyll.environment. So to only output the analytics script on production you would do the following: . {% if jekyll.environment == \"production\" %} &lt;script src=\"my-analytics-script.js\"&gt;&lt;/script&gt; {% endif %} . ",
    "url": "/docs/step-by-step/10-deployment/#environments",
    "relUrl": "/docs/step-by-step/10-deployment/#environments"
  },"831": {
    "doc": "Deployment",
    "title": "Deployment",
    "content": "The final step is to get the site onto a production server. The most basic way to do this is to run a production build: . JEKYLL_ENV=production bundle exec jekyll build . And then copy the contents of _site to your server. Destination folders are cleaned on site builds . The contents of _site are automatically cleaned, by default, when the site is built. Files or folders that are not created by your site's build process will be removed. Some files could be retained by specifying them within the keep_files configuration directive. Other files could be retained by keeping them in your assets directory. A better way is to automate this process using a CI or 3rd party. ",
    "url": "/docs/step-by-step/10-deployment/#deployment",
    "relUrl": "/docs/step-by-step/10-deployment/#deployment"
  },"832": {
    "doc": "Deployment",
    "title": "Wrap up",
    "content": "That brings us to the end of this step-by-step tutorial and the beginning of your Jekyll journey! . | Come say hi to the community forums | Help us make Jekyll better by contributing | Keep building Jekyll sites! | . ",
    "url": "/docs/step-by-step/10-deployment/#wrap-up",
    "relUrl": "/docs/step-by-step/10-deployment/#wrap-up"
  },"833": {
    "doc": "Deployment",
    "title": "Deployment",
    "content": "In this final step we’ll get the site ready for production. ",
    "url": "/docs/step-by-step/10-deployment/",
    "relUrl": "/docs/step-by-step/10-deployment/"
  },"834": {
    "doc": "Directory Structure",
    "title": "Directory Structure",
    "content": "A basic Jekyll site usually looks something like this: . ├── _config.yml ├── _data │ └── members.yml ├── _drafts │ ├── begin-with-the-crazy-ideas.md │ └── on-simplicity-in-technology.md ├── _includes │ ├── footer.html │ └── header.html ├── _layouts │ ├── default.html │ └── post.html ├── _posts │ ├── 2007-10-29-why-every-programmer-should-play-nethack.md │ └── 2009-04-26-barcamp-boston-4-roundup.md ├── _sass │ ├── _base.scss │ └── _layout.scss ├── _site ├── .jekyll-cache │ └── Jekyll │ └── Cache │ └── [...] ├── .jekyll-metadata └── index.html # can also be an 'index.md' with valid front matter . Directory structure of Jekyll sites using gem-based themes . Since version 3.2 , a new Jekyll project bootstrapped with jekyll new uses gem-based themes to define the look of the site. This results in a lighter default directory structure: _layouts, _includes and _sass are stored in the theme-gem, by default. minima is the current default theme, and bundle info minima will show you where minima theme's files are stored on your computer. An overview of what each of these does: . | File / Directory | Description | . | _config.yml . | Stores configuration data. Many of these options can be specified from the command line executable but it’s easier to specify them here so you don’t have to remember them. | . | _drafts . | Drafts are unpublished posts. The format of these files is without a date: title.MARKUP. Learn how to work with drafts. | . | _includes . | These are the partials that can be mixed and matched by your layouts and posts to facilitate reuse. The liquid tag {% include file.ext %} can be used to include the partial in _includes/file.ext. | . | _layouts . | These are the templates that wrap posts. Layouts are chosen on a post-by-post basis in the front matter, which is described in the next section. The liquid tag {{ content }} is used to inject content into the web page. | . | _posts . | Your dynamic content, so to speak. The naming convention of these files is important, and must follow the format: YEAR-MONTH-DAY-title.MARKUP. The permalinks can be customized for each post, but the date and markup language are determined solely by the file name. | . | _data . | Well-formatted site data should be placed here. The Jekyll engine will autoload all data files (using either the .yml, .yaml, .json, .csv or .tsv formats and extensions) in this directory, and they will be accessible via `site.data`. If there's a file members.yml under the directory, then you can access contents of the file through site.data.members. | . | _sass . | These are sass partials that can be imported into your main.scss which will then be processed into a single stylesheet main.css that defines the styles to be used by your site. Learn how to work with assets. | . | _site . | This is where the generated site will be placed (by default) once Jekyll is done transforming it. It’s probably a good idea to add this to your .gitignore file. | . | .jekyll-cache . | Keeps a copy of the generated pages and markup (e.g.: markdown) for faster serving. Created when using e.g.: jekyll serve. Can be disabled with an option and/or flag. This directory will not be included in the generated site. It’s probably a good idea to add this to your .gitignore file. | . | .jekyll-metadata . | This helps Jekyll keep track of which files have not been modified since the site was last built, and which files will need to be regenerated on the next build. Only created when using incremental regeneration (e.g.: with jekyll serve -I). This file will not be included in the generated site. It’s probably a good idea to add this to your .gitignore file. | . | index.html or index.md and other HTML, Markdown files . | Provided that the file has a front matter section, it will be transformed by Jekyll. The same will happen for any .html, .markdown, .md, or .textile file in your site’s root directory or directories not listed above. | . | Other Files/Folders . | Except for the special cases listed above, every other directory and file—such as css and images folders, favicon.ico files, and so forth—will be copied verbatim to the generated site. There are plenty of sites already using Jekyll if you’re curious to see how they’re laid out. | . Every file or directory beginning with the following characters: ., _ , # or ~ in the source directory will not be included in the destination folder. Such paths will have to be explicitly specified via the config file in the include directive to make sure they’re copied over: . include: - _pages - .htaccess . ",
    "url": "/docs/structure/",
    "relUrl": "/docs/structure/"
  },"835": {
    "doc": "Support",
    "title": "Getting Help",
    "content": "Jekyll’s issue tracker is not a support forum. If you’re looking for support for Jekyll, there are a lot of options: . | Read Jekyll Documentation | If you have a question about using Jekyll, start a discussion on Jekyll Forum or StackOverflow | Chat with Jekyllers — Join our Gitter channel or our IRC channel on Freenode | . There are a bunch of helpful community members on these services that should be willing to point you in the right direction. ",
    "url": "/docs/support/#getting-help",
    "relUrl": "/docs/support/#getting-help"
  },"836": {
    "doc": "Support",
    "title": "Report a bug",
    "content": ". | If you think you’ve found a bug within a Jekyll plugin, open an issue in that plugin’s repository — First look for the plugin on rubygems then click on the Homepage link to access the plugin repository. | If you think you’ve found a bug within Jekyll itself, open an issue. | . Happy Jekyllin’! . ",
    "url": "/docs/support/#report-a-bug",
    "relUrl": "/docs/support/#report-a-bug"
  },"837": {
    "doc": "Support",
    "title": "Support",
    "content": " ",
    "url": "/docs/support/",
    "relUrl": "/docs/support/"
  },"838": {
    "doc": "Themes",
    "title": "Pick up a theme",
    "content": "You can find and preview themes on different galleries: . | GitHub.com #jekyll-theme repos | jamstackthemes.dev | jekyllthemes.org | jekyllthemes.io | jekyll-themes.com | . See also: resources. ",
    "url": "/docs/themes/#pick-up-a-theme",
    "relUrl": "/docs/themes/#pick-up-a-theme"
  },"839": {
    "doc": "Themes",
    "title": "Understanding gem-based themes",
    "content": "When you create a new Jekyll site (by running the jekyll new &lt;PATH&gt; command), Jekyll installs a site that uses a gem-based theme called Minima. With gem-based themes, some of the site’s directories (such as the assets, _data, _layouts, _includes, and _sass directories) are stored in the theme’s gem, hidden from your immediate view. Yet all of the necessary directories will be read and processed during Jekyll’s build process. In the case of Minima, you see only the following files in your Jekyll site directory: . ├── Gemfile ├── Gemfile.lock ├── _config.yml ├── _posts │ └── 2016-12-04-welcome-to-jekyll.markdown ├── about.markdown └── index.markdown . The Gemfile and Gemfile.lock files are used by Bundler to keep track of the required gems and gem versions you need to build your Jekyll site. Gem-based themes make it easier for theme developers to make updates available to anyone who has the theme gem. When there’s an update, theme developers push the update to RubyGems. If you have the theme gem, you can (if you desire) run bundle update to update all gems in your project. Or you can run bundle update &lt;THEME&gt;, replacing &lt;THEME&gt; with the theme name, such as minima, to just update the theme gem. Any new files or updates the theme developer has made (such as to stylesheets or includes) will be pulled into your project automatically. The goal of gem-based themes is to allow you to get all the benefits of a robust, continually updated theme without having all the theme’s files getting in your way and over-complicating what might be your primary focus: creating content. ",
    "url": "/docs/themes/#understanding-gem-based-themes",
    "relUrl": "/docs/themes/#understanding-gem-based-themes"
  },"840": {
    "doc": "Themes",
    "title": "Overriding theme defaults",
    "content": "Jekyll themes set default data, layouts, includes, and stylesheets. However, you can override any of the theme defaults with your own site content. To replace layouts or includes in your theme, make a copy in your _layouts or _includes directory of the specific file you wish to modify, or create the file from scratch giving it the same name as the file you wish to override. For example, if your selected theme has a page layout, you can override the theme’s layout by creating your own page layout in the _layouts directory (that is, _layouts/page.html). To locate a theme’s files on your computer: . | Run bundle info --path followed by the name of the theme’s gem, e.g., bundle info --path minima for Jekyll’s default theme. This returns the location of the gem-based theme files. For example, the Minima theme’s files might be located in /usr/local/lib/ruby/gems/2.6.0/gems/minima-2.5.1 on macOS. | Open the theme’s directory in Finder or Explorer: . # On MacOS open $(bundle info --path minima) # On Windows # First get the gem's installation path: # # bundle info --path minima # =&gt; C:/Ruby26-x64/lib/ruby/gems/3.1.2/gems/minima-2.5.1 # # then invoke explorer with above path, substituting `/` with `\\` explorer C:\\Ruby26-x64\\lib\\ruby\\gems\\3.1.2\\gems\\minima-2.5.1 # On Linux xdg-open $(bundle info --path minima) . A Finder or Explorer window opens showing the theme’s files and directories. The Minima theme gem contains these files: . ├── LICENSE.txt ├── README.md ├── _includes │   ├── disqus_comments.html │   ├── footer.html │   ├── google-analytics.html │   ├── head.html │   ├── header.html │   ├── icon-github.html │   ├── icon-github.svg │   ├── icon-twitter.html │   └── icon-twitter.svg ├── _layouts │   ├── default.html │   ├── home.html │   ├── page.html │   └── post.html ├── _sass │   ├── minima │   │   ├── _base.scss │   │   ├── _layout.scss │   │   └── _syntax-highlighting.scss │   └── minima.scss └── assets └── main.scss . | . With a clear understanding of the theme’s files, you can now override any theme file by creating a similarly named file in your Jekyll site directory. Let’s say, for a second example, you want to override Minima’s footer. In your Jekyll site, create an _includes folder and add a file in it called footer.html. Jekyll will now use your site’s footer.html file instead of the footer.html file from the Minima theme gem. To modify any stylesheet you must take the extra step of also copying the main sass file (_sass/minima.scss in the Minima theme) into the _sass directory in your site’s source. Jekyll will look first to your site’s content before looking to the theme’s defaults for any requested file in the following folders: . | /assets | /_data | /_layouts | /_includes | /_sass | . Note that making copies of theme files will prevent you from receiving any theme updates on those files. An alternative, to continue getting theme updates on all stylesheets, is to use higher specificity CSS selectors in your own additional, originally named CSS files. Refer to your selected theme’s documentation and source repository for more information on which files you can override. ",
    "url": "/docs/themes/#overriding-theme-defaults",
    "relUrl": "/docs/themes/#overriding-theme-defaults"
  },"841": {
    "doc": "Themes",
    "title": "Themes with _data directory4.3.0",
    "content": "Starting with version 4.3.0, Jekyll also takes into account the _data directory of themes. This allows data to be distributed across themes. A typical example is text used within design elements. Imagine a theme provides the include file testimonials.html. This design element creates a new section on the page, and puts a h3 heading over the list of testimonials. A theme developer will probably formulate the heading in English and put it directly into the HTML source code. Consumers of the theme can copy the included file into their project and replace the heading there. With the consideration of the _data directory there is another solution for this standard task. Instead of entering the text directly into the design template, the designer adds a reference to a text catalog (e.g. site.data.i18n.testimonials.header) and create a file _data/i18n/testimonials.yml in the data directory of the theme. In this file the header is put under the key header and Jekyll takes care of the rest. For theme developers, this, at first sight, is of course a bigger effort than before. However, for the consumers of the theme, the customization is greatly simplified. Imagine the theme is used by a customer from Germany. In order for her to get the translated header for the testimonials design element in, she just has to create a data file in her project directory with the key site.data.i18n.testimonials.header, put the German translation or a header of her choice on top of it and the design element is already customized. She no longer has to copy the included file into her project directory, customize it there and, what weighs heaviest, waiver all updates of the theme, simply because the theme developer offered her the possibility to make changes to text modules centrally via text files. Data files provide a high degree of flexibility. The place where theme developers put text modules may differ from that of the consumer of the theme which can cause unforeseen troubles! . Related to above example the overriding key site.data.i18n.testimonials.header from the theme’s _data/i18n/testimonials.yml file on the consumer site can be located in three different locations: . | _data/i18n.yml with key testimonials.header | _data/i18n/testimonials.yml with key header (which mirrors the layout of the given example) | _data/i18n/testimonials/header.yml without any key, the headline can go straight into the file | . Theme developers should have this ambiguity in mind, when supporting consumers that feel lost in setting their text modules for the design elements the theme provides. When using the data feature ask yourself, is the key that you introduce something that changes the behaviour of the theme when present or not, or is it just data that’s displayed anyway. If it’s changing the behaviour of the theme it should go into site.config otherwise it’s fine to be provided via site.data. Bundling data that modifies the behavior of a theme is considered an anti-pattern whose use is strongly discouraged. It is solely up to the author of the theme to ensure that every provided data can be easily overridden by the consumer of the theme if they desire to. ",
    "url": "/docs/themes/#themes-with-data-directory",
    "relUrl": "/docs/themes/#themes-with-data-directory"
  },"842": {
    "doc": "Themes",
    "title": "Converting gem-based themes to regular themes",
    "content": "Suppose you want to get rid of the gem-based theme and convert it to a regular theme, where all files are present in your Jekyll site directory, with nothing stored in the theme gem. To do this, copy the files from the theme gem’s directory into your Jekyll site directory. (For example, copy them to /myblog if you created your Jekyll site at /myblog. See the previous section for details.) . Then you must tell Jekyll about the plugins that were referenced by the theme. You can find these plugins in the theme’s gemspec file as runtime dependencies. If you were converting the Minima theme, for example, you might see: . spec.add_runtime_dependency \"jekyll-feed\", \"~&gt; 0.12\" spec.add_runtime_dependency \"jekyll-seo-tag\", \"~&gt; 2.6\" . You should include these references in the Gemfile in one of two ways. You could list them individually in both Gemfile and _config.yml. # ./Gemfile gem \"jekyll-feed\", \"~&gt; 0.12\" gem \"jekyll-seo-tag\", \"~&gt; 2.6\" . # ./_config.yml plugins: - jekyll-feed - jekyll-seo-tag . Or you could list them explicitly as Jekyll plugins in your Gemfile, and not update _config.yml, like this: . # ./Gemfile group :jekyll_plugins do gem \"jekyll-feed\", \"~&gt; 0.12\" gem \"jekyll-seo-tag\", \"~&gt; 2.6\" end . Either way, don’t forget to bundle update. If you’re publishing on GitHub Pages you should update only your _config.yml as GitHub Pages doesn’t load plugins via Bundler. Finally, remove references to the theme gem in Gemfile and configuration. For example, to remove minima: . | Open Gemfile and remove gem \"minima\", \"~&gt; 2.5\". | Open _config.yml and remove theme: minima. | . Now bundle update will no longer get updates for the theme gem. ",
    "url": "/docs/themes/#converting-gem-based-themes-to-regular-themes",
    "relUrl": "/docs/themes/#converting-gem-based-themes-to-regular-themes"
  },"843": {
    "doc": "Themes",
    "title": "Installing a gem-based theme",
    "content": "The jekyll new &lt;PATH&gt; command isn’t the only way to create a new Jekyll site with a gem-based theme. You can also find gem-based themes online and incorporate them into your Jekyll project. For example, search for jekyll theme on RubyGems to find other gem-based themes. (Note that not all themes are using jekyll-theme as a convention in the theme name.) . To install a gem-based theme: . | Add the theme gem to your site’s Gemfile: . # ./Gemfile # This is an example, declare the theme gem you want to use here gem \"jekyll-theme-minimal\" . Or if you’ve started with the jekyll new command, replace gem \"minima\", \"~&gt; 2.0\" with the gem you want, e.g: . # ./Gemfile - gem \"minima\", \"~&gt; 2.5\" + gem \"jekyll-theme-minimal\" . | Install the theme: . bundle install . | Add the following to your site’s _config.yml to activate the theme: . theme: jekyll-theme-minimal . | Build your site: . bundle exec jekyll serve . | . You can have multiple themes listed in your site’s Gemfile, but only one theme can be selected in your site’s _config.yml. If you’re publishing your Jekyll site on GitHub Pages, note that GitHub Pages supports only some gem-based themes. GitHub Pages also supports using any theme hosted on GitHub using the remote_theme configuration as if it were a gem-based theme. ",
    "url": "/docs/themes/#installing-a-theme",
    "relUrl": "/docs/themes/#installing-a-theme"
  },"844": {
    "doc": "Themes",
    "title": "Creating a gem-based theme",
    "content": "If you’re a Jekyll theme developer (rather than a consumer of themes), you can package up your theme in RubyGems and allow users to install it through Bundler. If you’re unfamiliar with creating Ruby gems, don’t worry. Jekyll will help you scaffold a new theme with the new-theme command. Run jekyll new-theme with the theme name as an argument. Here is an example: . jekyll new-theme jekyll-theme-awesome create /path/to/jekyll-theme-awesome/_layouts create /path/to/jekyll-theme-awesome/_includes create /path/to/jekyll-theme-awesome/_sass create /path/to/jekyll-theme-awesome/_layouts/page.html create /path/to/jekyll-theme-awesome/_layouts/post.html create /path/to/jekyll-theme-awesome/_layouts/default.html create /path/to/jekyll-theme-awesome/Gemfile create /path/to/jekyll-theme-awesome/jekyll-theme-awesome.gemspec create /path/to/jekyll-theme-awesome/README.md create /path/to/jekyll-theme-awesome/LICENSE.txt initialize /path/to/jekyll-theme-awesome/.git create /path/to/jekyll-theme-awesome/.gitignore Your new Jekyll theme, jekyll-theme-awesome, is ready for you in /path/to/jekyll-theme-awesome! For help getting started, read /path/to/jekyll-theme-awesome/README.md. Add your template files in the corresponding folders. Then complete the .gemspec and the README files according to your needs. ",
    "url": "/docs/themes/#creating-a-gem-based-theme",
    "relUrl": "/docs/themes/#creating-a-gem-based-theme"
  },"845": {
    "doc": "Themes",
    "title": "Layouts and includes",
    "content": "Theme layouts and includes work just like they work in any Jekyll site. Place layouts in your theme’s /_layouts folder, and place includes in your themes /_includes folder. For example, if your theme has a /_layouts/page.html file, and a page has layout: page in its front matter, Jekyll will first look to the site’s _layouts folder for the page layout, and if none exists, will use your theme’s page layout. ",
    "url": "/docs/themes/#layouts-and-includes",
    "relUrl": "/docs/themes/#layouts-and-includes"
  },"846": {
    "doc": "Themes",
    "title": "Assets",
    "content": "Any file in /assets will be copied over to the user’s site upon build unless they have a file with the same relative path. You can ship any kind of asset here: SCSS, an image, a webfont, etc. These files behave like pages and static files in Jekyll: . | If the file has front matter at the top, it will be rendered. | If the file does not have front matter, it will simply be copied over into the resulting site. | . This allows theme creators to ship a default /assets/styles.scss file which their layouts can depend on as /assets/styles.css. All files in /assets will be output into the compiled site in the /assets folder just as you’d expect from using Jekyll on your sites. ",
    "url": "/docs/themes/#assets",
    "relUrl": "/docs/themes/#assets"
  },"847": {
    "doc": "Themes",
    "title": "Stylesheets",
    "content": "Your theme’s stylesheets should be placed in your theme’s _sass folder, again, just as you would when authoring a Jekyll site. _sass └── jekyll-theme-awesome.scss . Your theme’s styles can be included in the user’s stylesheet using the @import directive. @import \"{{ site.theme }}\"; . ",
    "url": "/docs/themes/#stylesheets",
    "relUrl": "/docs/themes/#stylesheets"
  },"848": {
    "doc": "Themes",
    "title": "Theme-gem dependencies3.5.0",
    "content": "Jekyll will automatically require all whitelisted runtime_dependencies of your theme-gem even if they’re not explicitly included under the plugins array in the site’s config file. (Note: whitelisting is only required when building or serving with the --safe option.) . With this, the end-user need not keep track of the plugins required to be included in their config file for their theme-gem to work as intended. ",
    "url": "/docs/themes/#theme-gem-dependencies350",
    "relUrl": "/docs/themes/#theme-gem-dependencies350"
  },"849": {
    "doc": "Themes",
    "title": "Pre-configuring Theme-gems4.0",
    "content": "Jekyll will read-in a _config.yml at the root of the theme-gem and merge its data into the site’s existing configuration data. But unlike other entities loaded from within the theme, loading the config file comes with a few restrictions, as summarized below: . | Jekyll’s default settings cannot be overridden by a theme-config. That ball is still in the user’s court. | The theme-config-file cannot be a symlink, irrespective of safe mode and whether the file pointed to by the symlink is a legitimate file within the theme-gem. | The theme-config should be a set of key-value pairs. An empty config file, a config file that simply lists items under a key, or a config file with just a simple string of text will simply be ignored silently. Users will not get a warning or any log output regarding this discrepancy. | Any settings defined by the theme-config can be overridden by the user. | . While this feature is to enable easier adoption of a theme, the restrictions ensure that a theme-config cannot affect the build in a concerning manner. Any plugins required by the theme will have to be listed manually by the user or provided by the theme’s gemspec file. This feature will let the theme-gem to work with theme-specific config variables out-of-the-box. ",
    "url": "/docs/themes/#pre-configuring-theme-gems40",
    "relUrl": "/docs/themes/#pre-configuring-theme-gems40"
  },"850": {
    "doc": "Themes",
    "title": "Documenting your theme",
    "content": "Your theme should include a /README.md file, which explains how site authors can install and use your theme. What layouts are included? What includes? Do they need to add anything special to their site’s configuration file? . ",
    "url": "/docs/themes/#documenting-your-theme",
    "relUrl": "/docs/themes/#documenting-your-theme"
  },"851": {
    "doc": "Themes",
    "title": "Adding a screenshot",
    "content": "Themes are visual. Show users what your theme looks like by including a screenshot as /screenshot.png within your theme’s repository where it can be retrieved programmatically. You can also include this screenshot within your theme’s documentation. ",
    "url": "/docs/themes/#adding-a-screenshot",
    "relUrl": "/docs/themes/#adding-a-screenshot"
  },"852": {
    "doc": "Themes",
    "title": "Previewing your theme",
    "content": "To preview your theme as you’re authoring it, it may be helpful to add dummy content in, for example, /index.html and /page.html files. This will allow you to use the jekyll build and jekyll serve commands to preview your theme, just as you’d preview a Jekyll site. If you do preview your theme locally, be sure to add /_site to your theme’s .gitignore file to prevent the compiled site from also being included when you distribute your theme. ",
    "url": "/docs/themes/#previewing-your-theme",
    "relUrl": "/docs/themes/#previewing-your-theme"
  },"853": {
    "doc": "Themes",
    "title": "Publishing your theme",
    "content": "Themes are published via RubyGems.org. You will need a RubyGems account, which you can create for free. | First, you need to have it in a git repository: . git init # Only the first time git add -A git commit -m \"Init commit\" . | Next, package your theme, by running the following command, replacing jekyll-theme-awesome with the name of your theme: . gem build jekyll-theme-awesome.gemspec . | Finally, push your packaged theme up to the RubyGems service, by running the following command, again replacing jekyll-theme-awesome with the name of your theme: . gem push jekyll-theme-awesome-*.gem . | To release a new version of your theme, update the version number in the gemspec file, ( jekyll-theme-awesome.gemspec in this example ), and then repeat Steps 1 - 3 above. We recommend that you follow Semantic Versioning while bumping your theme-version. | . ",
    "url": "/docs/themes/#publishing-your-theme",
    "relUrl": "/docs/themes/#publishing-your-theme"
  },"854": {
    "doc": "Themes",
    "title": "Themes",
    "content": "Jekyll has an extensive theme system that allows you to leverage community-maintained templates and styles to customize your site’s presentation. Jekyll themes specify plugins and package up assets, layouts, includes, and stylesheets in a way that can be overridden by your site’s content. ",
    "url": "/docs/themes/",
    "relUrl": "/docs/themes/"
  },"855": {
    "doc": "Troubleshooting",
    "title": "Installation Problems",
    "content": "If you encounter errors during gem installation, you may need to install the header files for compiling extension modules for Ruby 2.x This can be done on Ubuntu or Debian by running: . sudo apt-get install ruby2.6-dev . On Red Hat, CentOS, and Fedora systems you can do this by running: . sudo yum install ruby-devel . On Arch Linux you need to run: . sudo pacman -S ruby-ffi . On Ubuntu if you get stuck after bundle exec jekyll serve and see error messages like Could not locate Gemfile or .bundle/ directory, it’s likely because all requirements have not been fully met. Recent stock Ubuntu distributions require the installation of both the ruby and ruby-all-dev packages: . sudo apt-get install ruby ruby-all-dev . On NearlyFreeSpeech you need to run the following commands before installing Jekyll: . export GEM_HOME=/home/private/gems export GEM_PATH=/home/private/gems:/usr/local/lib/ruby/gems/1.8/ export PATH=$PATH:/home/private/gems/bin export RB_USER_INSTALL='true' . To install RubyGems on Gentoo: . sudo emerge -av dev-ruby/rubygems . On Windows, you may need to install RubyInstaller DevKit. On Android (with Termux) you can install all requirements by running: . apt update &amp;&amp; apt install libffi-dev clang ruby-dev make . On macOS, you may need to update RubyGems (using sudo only if necessary): . gem update --system . If you still have issues, you can download and install new Command Line Tools (such as gcc) using the following command: . xcode-select --install . which may allow you to install native gems using this command (again, using sudo only if necessary): . gem install jekyll . Note that upgrading macOS does not automatically upgrade Xcode itself (that can be done separately via the App Store), and having an out-of-date Xcode.app can interfere with the command line tools downloaded above. If you run into this issue, upgrade Xcode and install the upgraded Command Line Tools. ",
    "url": "/docs/troubleshooting/#installation-problems",
    "relUrl": "/docs/troubleshooting/#installation-problems"
  },"856": {
    "doc": "Troubleshooting",
    "title": "Running Jekyll as Non-Superuser (no sudo!)",
    "content": "On most flavors of Linux, macOS, and Bash on Ubuntu on Windows, it is possible to run Jekyll as a non-superuser and without having to install gems to system-wide locations by adding the following lines to the end of your .bashrc file: . # Ruby exports export GEM_HOME=$HOME/gems export PATH=$HOME/gems/bin:$PATH . This tells gem to place its gems within the user’s home folder, not in a system-wide location, and adds the local jekyll command to the user’s PATH ahead of any system-wide paths. This is also useful for many shared webhosting services, where user accounts have only limited privileges. Adding these exports to .bashrc before running gem install jekyll bundler allows a complete non-sudo install of Jekyll. To activate the new exports, either close and restart Bash, logout and log back into your shell account, or run .bashrc in the currently-running shell. If you see the following error when running the jekyll new command, you can solve it by using the above-described procedure: . jekyll new test Running bundle install in /home/user/test... Your user account is not allowed to install to the system RubyGems. You can cancel this installation and run: bundle install --path vendor/bundle to install the gems into ./vendor/bundle/, or you can enter your password and install the bundled gems to RubyGems using sudo. Password: . Once this is done, the jekyll new command should work properly for your user account. ",
    "url": "/docs/troubleshooting/#no-sudo",
    "relUrl": "/docs/troubleshooting/#no-sudo"
  },"857": {
    "doc": "Troubleshooting",
    "title": "Jekyll &amp; macOS",
    "content": "With the introduction of System Integrity Protection in v10.11, several directories that were previously writable are now considered system locations and are no longer available. Given these changes, there are a couple of simple ways to get up and running. One option is to change the location where the gem will be installed (again, using sudo only if necessary): . gem install -n /usr/local/bin jekyll . Alternatively, Homebrew can be installed and used to set up Ruby. This can be done as follows: . ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" . Once Homebrew is installed, the second step is to run: . brew install ruby . Advanced users (with more complex needs) may find it helpful to choose one of a number of Ruby version managers (RVM, rbenv, chruby, etc.) in which to install Jekyll. If you elect to use one of the above methods to install Ruby, it might be necessary to modify your $PATH variable using the following command: . export PATH=/usr/local/bin:$PATH . GUI apps can modify the $PATH as follows: . launchctl setenv PATH \"/usr/local/bin:$PATH\" . Either of these approaches are useful because /usr/local is considered a “safe” location on systems which have SIP enabled, they avoid potential conflicts with the version of Ruby included by Apple, and it keeps Jekyll and its dependencies in a sandboxed environment. This also has the added benefit of not requiring sudo when you want to add or remove a gem. ",
    "url": "/docs/troubleshooting/#jekyll--macos",
    "relUrl": "/docs/troubleshooting/#jekyll--macos"
  },"858": {
    "doc": "Troubleshooting",
    "title": "Could not find a JavaScript runtime. (ExecJS::RuntimeUnavailable)",
    "content": "This error can occur during the installation of jekyll-coffeescript when you don’t have a proper JavaScript runtime. To solve this, either install execjs and therubyracer gems, or install nodejs. Check out issue #2327 for more info. ",
    "url": "/docs/troubleshooting/#could-not-find-a-javascript-runtime-execjsruntimeunavailable",
    "relUrl": "/docs/troubleshooting/#could-not-find-a-javascript-runtime-execjsruntimeunavailable"
  },"859": {
    "doc": "Troubleshooting",
    "title": "Problems running Jekyll",
    "content": " ",
    "url": "/docs/troubleshooting/#problems-running-jekyll",
    "relUrl": "/docs/troubleshooting/#problems-running-jekyll"
  },"860": {
    "doc": "Troubleshooting",
    "title": "macOS",
    "content": "Jekyll is compatible with macOS with ARM64 architecture. However, bundle exec jekyll serve may fail with older version ffi. You may need to run bundle update or update ffi to at least 1.14.2 manually. ",
    "url": "/docs/troubleshooting/#macos",
    "relUrl": "/docs/troubleshooting/#macos"
  },"861": {
    "doc": "Troubleshooting",
    "title": "Debian or Ubuntu",
    "content": "On Debian or Ubuntu, you may need to add /var/lib/gems/1.8/bin/ to your path in order to have the jekyll executable be available in your Terminal. ",
    "url": "/docs/troubleshooting/#debian-or-ubuntu",
    "relUrl": "/docs/troubleshooting/#debian-or-ubuntu"
  },"862": {
    "doc": "Troubleshooting",
    "title": "Base-URL Problems",
    "content": "If you are using base-url option like: . jekyll serve --baseurl '/blog' . … then make sure that you access the site at: . http://localhost:4000/blog/index.html . It won’t work to just access: . http://localhost:4000/blog . ",
    "url": "/docs/troubleshooting/#base-url-problems",
    "relUrl": "/docs/troubleshooting/#base-url-problems"
  },"863": {
    "doc": "Troubleshooting",
    "title": "Configuration problems",
    "content": "The order of precedence for conflicting configuration settings is as follows: . | Command-line flags | Configuration file settings | Defaults | . That is: defaults are overridden by options specified in _config.yml, and flags specified at the command-line will override all other settings specified elsewhere. Note: From v3.3.0 onward, Jekyll does not process node_modules and certain subdirectories within vendor, by default. But, by having an exclude: array defined explicitly in the config file overrides this default setting, which results in some users to encounter an error in building the site, with the following error message: . ERROR: YOUR SITE COULD NOT BE BUILT: ------------------------------------ Invalid date '&lt;%= Time.now.strftime('%Y-%m-%d %H:%M:%S %z') %&gt;': Document 'vendor/bundle/gems/jekyll-3.4.3/lib/site_template/_posts/0000-00-00-welcome-to-jekyll.markdown.erb' does not have a valid date in front matter. Adding vendor/bundle to the exclude: list will solve this problem but will lead to having other sub-directories under /vendor/ (and also /node_modules/, if present) be processed to the destination folder _site. The proper solution is to incorporate the default setting for exclude: rather than override it completely: . For versions up to v3.4.3, the exclude: setting must look like following: . exclude: - Gemfile - Gemfile.lock - node_modules - vendor/bundle/ - vendor/cache/ - vendor/gems/ - vendor/ruby/ - any_additional_item # any user-specific listing goes at the end . From v3.5 onward, Gemfile and Gemfile.lock are also excluded by default. So, in most cases there is no need to define another exclude: array in the config file. So an existing definition can either be modified as above, or removed completely, or commented out to enable easy edits in future. ",
    "url": "/docs/troubleshooting/#configuration-problems",
    "relUrl": "/docs/troubleshooting/#configuration-problems"
  },"864": {
    "doc": "Troubleshooting",
    "title": "Markup Problems",
    "content": "The various markup engines that Jekyll uses may have some issues. This page will document them to help others who may run into the same problems. ",
    "url": "/docs/troubleshooting/#markup-problems",
    "relUrl": "/docs/troubleshooting/#markup-problems"
  },"865": {
    "doc": "Troubleshooting",
    "title": "Liquid",
    "content": "Liquid version 2.0 seems to break the use of {{ in templates. Unlike previous versions, using {{ in 2.0 triggers the following error: . '{{' was not properly terminated with regexp: /\\}\\}/ (Liquid::SyntaxError) . ",
    "url": "/docs/troubleshooting/#liquid",
    "relUrl": "/docs/troubleshooting/#liquid"
  },"866": {
    "doc": "Troubleshooting",
    "title": "Excerpts",
    "content": "Since v1.0.0, Jekyll has had automatically-generated post excerpts. Since v1.1.0, Jekyll also passes these excerpts through Liquid, which can cause strange errors where references don’t exist or a tag hasn’t been closed. If you run into these errors, try setting excerpt_separator: \"\" in your _config.yml, or set it to some nonsense string. ",
    "url": "/docs/troubleshooting/#excerpts",
    "relUrl": "/docs/troubleshooting/#excerpts"
  },"867": {
    "doc": "Troubleshooting",
    "title": "Production Problems",
    "content": "If you run into an issue that a static file can’t be found in your production environment during build since v3.2.0 you should set your environment to production. The issue is caused by trying to copy a non-existing symlink. Please report issues you encounter! . If you come across a bug, please create an issue on GitHub describing the problem and any work-arounds you find so we can document it here for others. ",
    "url": "/docs/troubleshooting/#production-problems",
    "relUrl": "/docs/troubleshooting/#production-problems"
  },"868": {
    "doc": "Troubleshooting",
    "title": "Troubleshooting",
    "content": "If you ever run into problems installing or using Jekyll, here are a few tips that might be of help. If the problem you’re experiencing isn’t covered below, please check out our other help resources as well. | Installation Problems | Problems running Jekyll | Base-URL Problems | Configuration problems | Markup Problems | Production Problems | . ",
    "url": "/docs/troubleshooting/",
    "relUrl": "/docs/troubleshooting/"
  },"869": {
    "doc": "Upgrading",
    "title": "Minor updates",
    "content": "Stay Up to Date . We recommend you update Jekyll as often as possible to benefit from the latest bug fixes. If you followed our setup recommendations and installed Bundler, run bundle update jekyll or simply bundle update and all your gems will update to the latest versions. If you don’t have Bundler installed, run gem update jekyll. The procedure is similar if you use the github-pages gem. ",
    "url": "/docs/upgrading/#minor-updates",
    "relUrl": "/docs/upgrading/#minor-updates"
  },"870": {
    "doc": "Upgrading",
    "title": "Upgrading",
    "content": "Upgrading from an older version of Jekyll? Upgrading to a new major version of Jekyll (e.g. from v2.x to v3.x) may cause some headaches. Take the following guides to aid your upgrade: . | From 0.x to 1.x and 2.x | From 2.x to 3.x | From 3.x to 4.x | . ",
    "url": "/docs/upgrading/",
    "relUrl": "/docs/upgrading/"
  },"871": {
    "doc": "Upgrading from 0.x to 2.x",
    "title": "The Jekyll Command",
    "content": "For better clarity, Jekyll now accepts the commands build and serve. Whereas before you might simply run the command jekyll to generate a site and jekyll --server to view it locally, in v2.0 (and later) you should use the subcommands jekyll build and jekyll serve to build and preview your site. Watching and Serving . With the new subcommands, the way sites are previewed locally changed a bit. Instead of specifying server: true in the site’s configuration file, use jekyll serve. The same holds true for watch: true. Instead, use the --watch flag with either jekyll serve or jekyll build. ",
    "url": "/docs/upgrading/0-to-2/#the-jekyll-command",
    "relUrl": "/docs/upgrading/0-to-2/#the-jekyll-command"
  },"872": {
    "doc": "Upgrading from 0.x to 2.x",
    "title": "Absolute Permalinks",
    "content": "In Jekyll v1.0, we introduced absolute permalinks for pages in subdirectories. Starting with v2.0, absolute permalinks are opt-out, meaning Jekyll will default to using absolute permalinks instead of relative permalinks. Relative permalink backwards-compatibility was removed in v3.0. Absolute permalinks will be required in v3.0 and on . Starting with Jekyll v3.0, relative permalinks functionality will be removed and thus unavailable for use. ",
    "url": "/docs/upgrading/0-to-2/#absolute-permalinks",
    "relUrl": "/docs/upgrading/0-to-2/#absolute-permalinks"
  },"873": {
    "doc": "Upgrading from 0.x to 2.x",
    "title": "Draft Posts",
    "content": "Jekyll now lets you write draft posts, and allows you to easily preview how they will look prior to publishing. To start a draft, create a folder called _drafts in your site’s source directory (e.g., alongside _posts), and add a new markdown file to it. To preview your new post, run the jekyll serve command with the --drafts flag. Drafts don’t have dates . Unlike posts, drafts don’t have a date, since they haven’t been published yet. Rather than naming your draft something like 2013-07-01-my-draft-post.md, simply name the file what you’d like your post to eventually be titled, here my-draft-post.md. ",
    "url": "/docs/upgrading/0-to-2/#draft-posts",
    "relUrl": "/docs/upgrading/0-to-2/#draft-posts"
  },"874": {
    "doc": "Upgrading from 0.x to 2.x",
    "title": "Custom Config File",
    "content": "Rather than passing individual flags via the command line, you can now pass an entire custom Jekyll config file. This helps to distinguish between environments, or lets you programmatically override user-specified defaults. Add the --config flag to the jekyll command, followed by the path to one or more config files (comma-delimited, no spaces). As a result, the following command line flags are now deprecated: . | --no-server | --no-auto (now --no-watch) | --auto (now --watch) | --server | --url= | --maruku, --rdiscount, and --redcarpet | --pygments | --permalink= | --paginate | . The config flag explicitly specifies your configuration file(s) . If you use the --config flag, Jekyll will ignore your _config.yml file. Want to merge a custom configuration with the normal configuration? No problem. Jekyll will accept more than one custom config file via the command line. Config files cascade from right to left, such that if I run jekyll serve --config _config.yml,_config-dev.yml, the values in the config files on the right (_config-dev.yml) overwrite those on the left (_config.yml) when both contain the same key. ",
    "url": "/docs/upgrading/0-to-2/#custom-config-file",
    "relUrl": "/docs/upgrading/0-to-2/#custom-config-file"
  },"875": {
    "doc": "Upgrading from 0.x to 2.x",
    "title": "New Config File Options",
    "content": "Jekyll 1.0 introduced several new config file options. Before you upgrade, you should check to see if any of these are present in your pre-1.0 config file, and if so, make sure that you’re using them properly: . | excerpt_separator | host | include | keep_files | layouts | show_drafts | timezone | url | . ",
    "url": "/docs/upgrading/0-to-2/#new-config-file-options",
    "relUrl": "/docs/upgrading/0-to-2/#new-config-file-options"
  },"876": {
    "doc": "Upgrading from 0.x to 2.x",
    "title": "Baseurl",
    "content": "Often, you’ll want the ability to run a Jekyll site in multiple places, such as previewing locally before pushing to GitHub Pages. Jekyll 1.0 makes that easier with the new --baseurl flag. To take advantage of this feature, first add the production baseurl to your site’s _config.yml file. Then, throughout the site, prefix relative URLs with {{ site.baseurl }}. When you’re ready to preview your site locally, pass along the --baseurl flag with your local baseurl (most likely /) to jekyll serve and Jekyll will swap in whatever you’ve passed along, ensuring all your links work as you’d expect in both environments. All page and post URLs contain leading slashes . If you use the method described above, please remember that the URLs for all posts and pages contain a leading slash. Therefore, concatenating the site baseurl and the post/page url where site.baseurl = / and post.url = /2013/06/05/my-fun-post/ will result in two leading slashes, which will break links. It is thus suggested that prefixing with site.baseurl only be used when the baseurl is something other than the default of /. ",
    "url": "/docs/upgrading/0-to-2/#baseurl",
    "relUrl": "/docs/upgrading/0-to-2/#baseurl"
  },"877": {
    "doc": "Upgrading from 0.x to 2.x",
    "title": "Upgrading from 0.x to 2.x",
    "content": "Upgrading from an older version of Jekyll? A few things have changed in 1.0 and 2.0 that you’ll want to know about. Before we dive in, go ahead and fetch the latest version of Jekyll: . gem update jekyll . Diving in . Want to get a new Jekyll site up and running quickly? Simply run jekyll new SITENAME to create a new folder with a bare bones Jekyll site. ",
    "url": "/docs/upgrading/0-to-2/",
    "relUrl": "/docs/upgrading/0-to-2/"
  },"878": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "site.collections has changed",
    "content": "In 2.x, your iterations over site.collections yielded an array with the collection label and the collection object as the first and second items, respectively. In 3.x, this complication has been removed and iterations now yield simply the collection object. A simple conversion must be made in your templates: . | collection[0] becomes collection.label | collection[1] becomes collection | . When iterating over site.collections, ensure the above conversions are made. For site.collections.myCollection in Jekyll 2, you now do: . {% assign myCollection = site.collections | where: \"label\", \"myCollection\" | first %} . This is a bit cumbersome at first, but is easier than a big for loop. ",
    "url": "/docs/upgrading/2-to-3/#sitecollections-has-changed",
    "relUrl": "/docs/upgrading/2-to-3/#sitecollections-has-changed"
  },"879": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Textile support",
    "content": "We dropped native support for Textile, from now on you have to install our jekyll-textile-converter plugin to work with Textile files. ",
    "url": "/docs/upgrading/2-to-3/#textile-support",
    "relUrl": "/docs/upgrading/2-to-3/#textile-support"
  },"880": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Dropped dependencies",
    "content": "We dropped a number of dependencies the Core Team felt were optional. As such, in 3.0, they must be explicitly installed and included if you use any of the features. They are: . | jekyll-paginate – Jekyll’s pagination solution from days past | jekyll-coffeescript – processing of CoffeeScript | jekyll-gist – the gist Liquid tag | pygments.rb – the Pygments highlighter | redcarpet – the Markdown processor | toml – an alternative to YAML for configuration files | classifier-reborn – for site.related_posts | . ",
    "url": "/docs/upgrading/2-to-3/#dropped-dependencies",
    "relUrl": "/docs/upgrading/2-to-3/#dropped-dependencies"
  },"881": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Future posts",
    "content": "A seeming feature regression in 2.x, the --future flag was automatically enabled. The future flag allows post authors to give the post a date in the future and to have it excluded from the build until the system time is equal or after the post time. In Jekyll 3, this has been corrected. Now, --future is disabled by default. This means you will need to include --future if you want your future-dated posts to generate when running jekyll build or jekyll serve. Future Posts on GitHub Pages . An exception to the above rule are GitHub Pages sites, where the --future flag remains enabled by default to maintain historical consistency for those sites. ",
    "url": "/docs/upgrading/2-to-3/#future-posts",
    "relUrl": "/docs/upgrading/2-to-3/#future-posts"
  },"882": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Layout metadata",
    "content": "Introducing: layout. In Jekyll 2 and below, any metadata in the layout was merged onto the page variable in Liquid. This caused a lot of confusion in the way the data was merged and some unexpected behaviour. In Jekyll 3, all layout data is accessible via layout in Liquid. For example, if your layout has class: my-layout in its front matter, then the layout can access that via {{ layout.class }}. ",
    "url": "/docs/upgrading/2-to-3/#layout-metadata",
    "relUrl": "/docs/upgrading/2-to-3/#layout-metadata"
  },"883": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Syntax highlighter changed",
    "content": "For the first time, the default syntax highlighter has changed for the highlight tag and for backtick code blocks. Instead of Pygments.rb, it’s now Rouge. If you were using the highlight tag with certain options, such as hl_lines, they may not be available when using Rouge. To go back to using Pygments, set highlighter: pygments in your _config.yml file and run gem install pygments.rb or add gem 'pygments.rb' to your project’s Gemfile. ",
    "url": "/docs/upgrading/2-to-3/#syntax-highlighter-changed",
    "relUrl": "/docs/upgrading/2-to-3/#syntax-highlighter-changed"
  },"884": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Relative Permalink support removed",
    "content": "In Jekyll 3 and above, relative permalinks have been deprecated. If you created your site using Jekyll 2 and below, you may receive the following error when trying to serve or build: . Since v3.0, permalinks for pages in subfolders must be relative to the site source directory, not the parent directory. Check https://jekyllrb.com/docs/upgrading/ for more info. This can be fixed by removing the following line from your _config.yml file: . relative_permalinks: true . ",
    "url": "/docs/upgrading/2-to-3/#relative-permalink-support-removed",
    "relUrl": "/docs/upgrading/2-to-3/#relative-permalink-support-removed"
  },"885": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Permalinks no longer automatically add a trailing slash",
    "content": "In Jekyll 2, any URL constructed from the permalink: field had a trailing slash (/) added to it automatically. Jekyll 3 no longer adds a trailing slash automatically to permalink: URLs. This can potentially result in old links to pages returning a 404 error. For example, suppose a page previously contained the YAML permalink: /:year-:month-:day-:title that resulted in the URL example.com/2016-02-01-test/ (notice the trailing slash), Jekyll internally generates a folder named 2016-02-01-test. In Jekyll 3, the same permalink: generate the file 2016-02-01-test.html and the URL for the same page will be example.com/2016-02-01-test, and consequently any links to the old URL will result in a 404 error. In order to maintain the same URLs and avoid this problem, a trailing slash should be added to the permalink: field, for example permalink: /:year-:month-:day-:title/. ",
    "url": "/docs/upgrading/2-to-3/#permalinks-no-longer-automatically-add-a-trailing-slash",
    "relUrl": "/docs/upgrading/2-to-3/#permalinks-no-longer-automatically-add-a-trailing-slash"
  },"886": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "All my posts are gone! Where’d they go!",
    "content": "Try adding future: true to your _config.yml file. Are they showing up now? If they are, then you were ensnared by an issue with the way Ruby parses times. Each of your posts is being read in a different timezone than you might expect and, when compared to the computer’s current time, is “in the future.” The fix for this is to add a timezone offset to each post (and make sure you remove future: true from your _config.yml file). If you’re writing from California, for example, you would change this: . --- date: 2016-02-06 19:32:10 --- . to this (note the offset): . --- date: 2016-02-06 19:32:10 -0800 --- . ",
    "url": "/docs/upgrading/2-to-3/#all-my-posts-are-gone-whered-they-go",
    "relUrl": "/docs/upgrading/2-to-3/#all-my-posts-are-gone-whered-they-go"
  },"887": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "My categories have stopped working!",
    "content": "If you organized your categories as /_posts/code/2008-12-24-closures.md, you will need to restructure your directories to put the categories above the _posts directories, as follows: /code/_posts/2008-12-24-closures.md. Did we miss something? Please click “Improve this page” above and add a section. Thanks! . ",
    "url": "/docs/upgrading/2-to-3/#my-categories-have-stopped-working",
    "relUrl": "/docs/upgrading/2-to-3/#my-categories-have-stopped-working"
  },"888": {
    "doc": "Upgrading from 2.x to 3.x",
    "title": "Upgrading from 2.x to 3.x",
    "content": "Upgrading from an older version of Jekyll? A few things have changed in Jekyll 3 that you’ll want to know about. Before we dive in, go ahead and fetch the latest version of Jekyll: . gem update jekyll . Since version 3.2 , Jekyll requires Ruby version &gt;= 2.1. Diving in . Want to get a new Jekyll site up and running quickly? Simply run jekyll new SITENAME to create a new folder with a bare bones Jekyll site. ",
    "url": "/docs/upgrading/2-to-3/",
    "relUrl": "/docs/upgrading/2-to-3/"
  },"889": {
    "doc": "Upgrading from 3.x to 4.x",
    "title": "Template rendering",
    "content": "We’ve slightly altered the way Jekyll parses and renders your various templates to improve the overall build times. Jekyll now parses a template once, caches it internally and then renders the parsed template multiple times as required by your pages and documents. The downside to this is that some of the community-authored plugins may not work as they previously used to. ",
    "url": "/docs/upgrading/3-to-4/#template-rendering",
    "relUrl": "/docs/upgrading/3-to-4/#template-rendering"
  },"890": {
    "doc": "Upgrading from 3.x to 4.x",
    "title": "Static files in unrendered collections",
    "content": "Collections other than posts can contain static assets along with Markdown files. But if the collection has not been configured with metadata output: true, then neither its documents nor its static assets will be output to the destination directory. ",
    "url": "/docs/upgrading/3-to-4/#static-files-in-unrendered-collections",
    "relUrl": "/docs/upgrading/3-to-4/#static-files-in-unrendered-collections"
  },"891": {
    "doc": "Upgrading from 3.x to 4.x",
    "title": "For plugin authors",
    "content": ". | If your plugin depends on the following code: site.liquid_renderer.file(path).parse(content), note that the return value (template, an instance of Liquid::Template), from that line will always be the same object for a given path. The template instance is then rendered as previously, with respect to the payload passed to it. You’ll therefore have to ensure that payload is not memoized or cached in your plugin instance. | If its a requirement that template you get from the above step be different at all times, you can invoke Liquid::Template directly: . - template = site.liquid_renderer.file(path).parse(content) + template = Liquid::Template.parse(content) . | . ",
    "url": "/docs/upgrading/3-to-4/#for-plugin-authors",
    "relUrl": "/docs/upgrading/3-to-4/#for-plugin-authors"
  },"892": {
    "doc": "Upgrading from 3.x to 4.x",
    "title": "Exclusion changes",
    "content": "We’ve enhanced our default exclusion array. It now looks like the following: . # default excludes exclude: - .sass-cache/ - .jekyll-cache/ - gemfiles/ - Gemfile - Gemfile.lock - node_modules/ - vendor/bundle/ - vendor/cache/ - vendor/gems/ - vendor/ruby/ . What’s new is that this array does not get overridden by the exclude array in the user’s config file anymore. The user’s exclude entries simply get added to the above default array (if the entry isn’t already excluded). To forcibly “process” directories or files that have been excluded, list them in the include array instead: . # overrides your excluded items configuration and the default include array ([\".htaccess\"]) include: - .htaccess - node_modules/uglifier/index.js . The above configuration directs Jekyll to handle only node_modules/uglifier/index.js while ignoring every other file in the node_modules directory since that directory is “excluded” by default. Note that the default include array still gets overridden by the include array in your config file. So, be sure to add .htaccess to the list if you need that file to be present in the generated site. ",
    "url": "/docs/upgrading/3-to-4/#exclusion-changes",
    "relUrl": "/docs/upgrading/3-to-4/#exclusion-changes"
  },"893": {
    "doc": "Upgrading from 3.x to 4.x",
    "title": "Kramdown v2",
    "content": "Jekyll has dropped support for kramdown-1.x entirely. From v2.0 onwards kramdown requires specific extensions to be additionally installed to use certain features are desired outside of kramdown’s core functionality. Out of all the extensions listed in the report linked above, gem kramdown-parser-gfm is automatically installed along with Jekyll 4.0. The remaining extensions will have to be manually installed by the user depending on desired functionality, by listing the extension’s gem-name in their Gemfile. Notes: . | kramdown-converter-pdf will be ignored by Jekyll Core. To have Jekyll convert Markdown to PDF you’ll have to depend on a plugin that subclasses Jekyll::Converter with the required methods. For example: . module Jekyll External.require_with_graceful_fail \"kramdown-converter-pdf\" class Markdown2PDF &lt; Converter safe true priority :low def matches(ext) # match only files that have an extension exactly \".markdown\" ext =~ /^\\.markdown$/ end def convert(content) Kramdown::Document.new(content).to_pdf end def output_ext \".pdf\" end end end . | Vendors that provide a versioned Jekyll Environment Image (e.g. Docker Image, GitHub Pages, etc) will have to manually whitelist kramdown’s extension gems in their distributions for Jekyll 4.0. | . ",
    "url": "/docs/upgrading/3-to-4/#kramdown-v2",
    "relUrl": "/docs/upgrading/3-to-4/#kramdown-v2"
  },"894": {
    "doc": "Upgrading from 3.x to 4.x",
    "title": "Deprecated Configuration Options",
    "content": "Jekyll 4.0 has dropped support for all legacy configuration options that were deprecated over multiple releases in the previous series. To that end, we shall no longer output a deprecation warning when we encounter a legacy config key nor shall we gracefully assign their values to the newer counterparts. Depending on the key, it shall either be ignored or raise an InvalidConfigurationError error if the key is still valid but the associated value is not of the valid type. ",
    "url": "/docs/upgrading/3-to-4/#deprecated-configuration-options",
    "relUrl": "/docs/upgrading/3-to-4/#deprecated-configuration-options"
  },"895": {
    "doc": "Upgrading from 3.x to 4.x",
    "title": "Upgrading from 3.x to 4.x",
    "content": "A few things have changed in Jekyll 4. Before we dive in, you need to have at least Ruby 2.5.0 installed. Run the following in your terminal to check . ruby -v ruby 3.1.2p20 (2022-04-12 revision 4491bb740a) . If you’re using a supported Ruby version &gt;= 2.5.0, go ahead and fetch the latest version of Jekyll: . gem update jekyll . post_url Tag and Baseurl . &nbsp; . The post_url tag now incorporates the relative_url filter within itself and therefore automatically prepends your site's baseurl to the post's url value. Please ensure that you change all instances of the post_url usage as following: . - {{ site.baseurl }}/{% post_url 2018-03-20-hello-world.markdown %} + {% post_url 2018-03-20-hello-world.markdown %} . ",
    "url": "/docs/upgrading/3-to-4/",
    "relUrl": "/docs/upgrading/3-to-4/"
  },"896": {
    "doc": "Command Line Usage",
    "title": "Command Line Usage",
    "content": "The Jekyll gem makes a jekyll executable available to you in your terminal. The jekyll program has several commands but the structure is always: . jekyll command [argument] [option] [argument_to_option] Examples: jekyll new site/ --blank jekyll serve --config _alternative_config.yml . Typically you’ll use jekyll serve while developing locally and jekyll build when you need to generate the site for production. For a full list of options and their argument, see Build Command Options. Here are some of the most common commands: . | jekyll new PATH - Creates a new Jekyll site with default gem-based theme at specified path. The directories will be created as necessary. | jekyll new PATH --blank - Creates a new blank Jekyll site scaffold at specified path. | jekyll build or jekyll b - Performs a one off build your site to ./_site (by default). | jekyll serve or jekyll s - Builds your site any time a source file changes and serves it locally. | jekyll clean - Removes all generated files: destination folder, metadata file, Sass and Jekyll caches. | jekyll help - Shows help, optionally for a given subcommand, e.g. jekyll help build. | jekyll new-theme - Creates a new Jekyll theme scaffold. | jekyll doctor - Outputs any deprecation or configuration issues. | . To change Jekyll’s default build behavior have a look through the configuration options. ",
    "url": "/docs/usage/",
    "relUrl": "/docs/usage/"
  },"897": {
    "doc": "Variables",
    "title": "Global Variables",
    "content": "| Variable | Description | . | site . | Site wide information + configuration settings from _config.yml. See below for details. | . | page . | Page specific information + the front matter. Custom variables set via the front matter will be available here. See below for details. | . | layout . | Layout specific information + the front matter. Custom variables set via front matter in layouts will be available here. | . | content . | In layout files, the rendered content of the Post or Page being wrapped. Not defined in Post or Page files. | . | paginator . | When the paginate configuration option is set, this variable becomes available for use. See Pagination for details. | . ",
    "url": "/docs/variables/#global-variables",
    "relUrl": "/docs/variables/#global-variables"
  },"898": {
    "doc": "Variables",
    "title": "Site Variables",
    "content": "| Variable | Description | . | site.time . | The current time (when you run the jekyll command). | . | site.pages . | A list of all Pages. | . | site.posts . | A reverse chronological list of all Posts. | . | site.related_posts . | If the page being processed is a Post, this contains a list of up to ten related Posts. By default, these are the ten most recent posts. For high quality but slow to compute results, run the jekyll command with the --lsi (latent semantic indexing) option. Also note GitHub Pages does not support the lsi option when generating sites. | . | site.static_files . | A list of all static files (i.e. files not processed by Jekyll's converters or the Liquid renderer). Each file has five properties: path, modified_time, name, basename and extname. | . | site.html_pages . | A subset of site.pages listing those which end in .html. | . | site.html_files . | A subset of site.static_files listing those which end in .html. | . | site.collections . | A list of all the collections (including posts). | . | site.data . | A list containing the data loaded from the YAML files located in the _data directory. | . | site.documents . | A list of all the documents in every collection. | . | site.categories.CATEGORY . | The list of all Posts in category CATEGORY. | . | site.tags.TAG . | The list of all Posts with tag TAG. | . | site.url . | Contains the url of your site as it is configured in the _config.yml. For example, if you have url: http://mysite.com in your configuration file, then it will be accessible in Liquid as site.url. For the development environment there is an exception, if you are running jekyll serve in a development environment site.url will be set to the value of host, port, and SSL-related options. This defaults to url: http://localhost:4000. | . | site.[CONFIGURATION_DATA] . | All the variables set via the command line and your _config.yml are available through the site variable. For example, if you have foo: bar in your configuration file, then it will be accessible in Liquid as site.foo. Jekyll does not parse changes to _config.yml in watch mode, you must restart Jekyll to see changes to variables. | . ",
    "url": "/docs/variables/#site-variables",
    "relUrl": "/docs/variables/#site-variables"
  },"899": {
    "doc": "Variables",
    "title": "Page Variables",
    "content": "| Variable | Description | . | page.content . | The content of the Page, rendered or un-rendered depending upon what Liquid is being processed and what page is. | . | page.title . | The title of the Page. | . | page.excerpt . | The un-rendered excerpt of a document. | . | page.url . | The URL of the Post without the domain, but with a leading slash, e.g. /2008/12/14/my-post.html . | . | page.date . | The Date assigned to the Post. This can be overridden in a Post’s front matter by specifying a new date/time in the format YYYY-MM-DD HH:MM:SS (assuming UTC), or YYYY-MM-DD HH:MM:SS +/-TTTT (to specify a time zone using an offset from UTC. e.g. 2008-12-14 10:30:00 +0900). | . | page.id . | An identifier unique to a document in a Collection or a Post (useful in RSS feeds). e.g. /2008/12/14/my-post/my-collection/my-document . | . | page.categories . | The list of categories to which this post belongs. Categories are derived from the directory structure above the _posts directory. For example, a post at /work/code/_posts/2008-12-24-closures.md would have this field set to ['work', 'code']. These can also be specified in the front matter. | . | page.collection . | The label of the collection to which this document belongs. e.g. posts for a post, or puppies for a document at path _puppies/rover.md. If not part of a collection, an empty string is returned. | . | page.tags . | The list of tags to which this post belongs. These can be specified in the front matter. | . | page.dir . | The path between the source directory and the file of the post or page, e.g. /pages/. This can be overridden by permalink in the front matter. | . | page.name . | The filename of the post or page, e.g. about.md . | . | page.path . | The path to the raw post or page. Example usage: Linking back to the page or post’s source on GitHub. This can be overridden in the front matter. | . | page.next . | The next post relative to the position of the current post in site.posts. Returns nil for the last entry. | . | page.previous . | The previous post relative to the position of the current post in site.posts. Returns nil for the first entry. | . ProTip™: Use Custom Front Matter . Any custom front matter that you specify will be available under page. For example, if you specify custom_css: true in a page’s front matter, that value will be available as page.custom_css. If you specify front matter in a layout, access that via layout. For example, if you specify class: full_page in a layout’s front matter, that value will be available as layout.class in the layout and its parents. ",
    "url": "/docs/variables/#page-variables",
    "relUrl": "/docs/variables/#page-variables"
  },"900": {
    "doc": "Variables",
    "title": "Paginator",
    "content": "| Variable | Description | . | paginator.page . | The number of the current page . | . | paginator.per_page . | Number of posts per page . | . | paginator.posts . | Posts available for the current page . | . | paginator.total_posts . | Total number of posts . | . | paginator.total_pages . | Total number of pages . | . | paginator.previous_page . | The number of the previous page, or nil if no previous page exists . | . | paginator.previous_page_path . | The path to the previous page, or nil if no previous page exists . | . | paginator.next_page . | The number of the next page, or nil if no subsequent page exists . | . | paginator.next_page_path . | The path to the next page, or nil if no subsequent page exists . | . Paginator variable availability . These are only available in index files, however they can be located in a subdirectory, such as /blog/index.html. ",
    "url": "/docs/variables/#paginator",
    "relUrl": "/docs/variables/#paginator"
  },"901": {
    "doc": "Variables",
    "title": "Variables",
    "content": "Jekyll traverses your site looking for files to process. Any files with front matter are subject to processing. For each of these files, Jekyll makes a variety of data available via Liquid. The following is a reference of the available data. ",
    "url": "/docs/variables/",
    "relUrl": "/docs/variables/"
  }
}
